{"version":3,"file":"d-base-border.js","sourceRoot":"","sources":["../../../src/main/typescript/wcardinal/ui/d-base-border.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAKH,OAAO,EAAE,WAAW,EAAE,MAAM,iBAAiB,CAAC;AAE9C,OAAO,EAAE,UAAU,EAAE,MAAM,oBAAoB,CAAC;AAChD,OAAO,EAAE,QAAQ,EAAE,MAAM,kBAAkB,CAAC;AAI5C;IASC,qBAAa,KAAiB,EAAE,OAA2B,EAAE,QAAmB;QAC/E,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;QAC1B,IAAI,OAAO,IAAI,IAAI,IAAI,OAAO,CAAC,MAAM,IAAI,IAAI,EAAG;YAC/C,IAAM,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;YAC9B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC;YAC3B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC;YAC3B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC;YAC3B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC;YAC3B,IAAI,CAAC,KAAK,GAAG,CAAE,QAAQ,CAAE,MAAM,CAAC,IAAI,CAAE,CAAC,CAAC,CAAC,WAAW,CAAE,MAAM,CAAC,IAAI,CAAE,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAE,CAAC;SACpF;IACF,CAAC;IAED,8BAAQ,GAAR;QACC,OAAO,IAAI,CAAC,MAAM,CAAC;IACpB,CAAC;IAED,8BAAQ,GAAR,UAAU,KAAiB;QAC1B,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;IACrB,CAAC;IAED,8BAAQ,GAAR,UAAU,KAAiB;QAC1B,IAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC;QAC1B,IAAI,KAAK,KAAK,SAAS,EAAG;YACzB,IAAI,UAAU,CAAE,KAAK,CAAE,EAAG;gBACzB,IAAM,MAAM,GAAG,KAAK,CAAE,KAAK,CAAE,CAAC;gBAC9B,IAAI,MAAM,KAAK,SAAS,EAAG;oBAC1B,OAAO,MAAM,CAAC;iBACd;aACD;iBAAM;gBACN,OAAO,KAAK,CAAC;aACb;SACD;QACD,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAE,KAAK,CAAE,CAAC;IAC5C,CAAC;IAED,sBAAI,8BAAK;aAAT;YACC,OAAO,IAAI,CAAC,MAAM,CAAC;QACpB,CAAC;aAED,UAAW,KAA+C;YACzD,IAAI,IAAI,CAAC,MAAM,KAAK,KAAK,EAAG;gBAC3B,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;gBACpB,IAAI,CAAC,QAAQ,EAAE,CAAC;aAChB;QACF,CAAC;;;OAPA;IASD,8BAAQ,GAAR,UAAU,KAAiB;QAC1B,IAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC;QAC1B,IAAI,KAAK,KAAK,SAAS,EAAG;YACzB,IAAI,UAAU,CAAE,KAAK,CAAE,EAAG;gBACzB,IAAM,MAAM,GAAG,KAAK,CAAE,KAAK,CAAE,CAAC;gBAC9B,IAAI,MAAM,KAAK,SAAS,EAAG;oBAC1B,OAAO,MAAM,CAAC;iBACd;aACD;iBAAM;gBACN,OAAO,KAAK,CAAC;aACb;SACD;QACD,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAE,KAAK,CAAE,CAAC;IAC5C,CAAC;IAED,sBAAI,8BAAK;aAAT;YACC,OAAO,IAAI,CAAC,MAAM,CAAC;QACpB,CAAC;aAED,UAAW,KAAwC;YAClD,IAAI,IAAI,CAAC,MAAM,KAAK,KAAK,EAAG;gBAC3B,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;gBACpB,IAAI,CAAC,QAAQ,EAAE,CAAC;aAChB;QACF,CAAC;;;OAPA;IASD,8BAAQ,GAAR,UAAU,KAAiB;QAC1B,IAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC;QAC1B,IAAI,KAAK,KAAK,SAAS,EAAG;YACzB,IAAI,UAAU,CAAE,KAAK,CAAE,EAAG;gBACzB,IAAM,MAAM,GAAG,KAAK,CAAE,KAAK,CAAE,CAAC;gBAC9B,IAAI,MAAM,KAAK,SAAS,EAAG;oBAC1B,OAAO,MAAM,CAAC;iBACd;aACD;iBAAM;gBACN,OAAO,KAAK,CAAC;aACb;SACD;QACD,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAE,KAAK,CAAE,CAAC;IAC5C,CAAC;IAED,sBAAI,8BAAK;aAAT;YACC,OAAO,IAAI,CAAC,MAAM,CAAC;QACpB,CAAC;aAED,UAAW,KAAwC;YAClD,IAAI,IAAI,CAAC,MAAM,KAAK,KAAK,EAAG;gBAC3B,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;gBACpB,IAAI,CAAC,QAAQ,EAAE,CAAC;aAChB;QACF,CAAC;;;OAPA;IASD,8BAAQ,GAAR,UAAU,KAAiB;QAC1B,IAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC;QAC1B,IAAI,KAAK,KAAK,SAAS,EAAG;YACzB,IAAI,UAAU,CAAE,KAAK,CAAE,EAAG;gBACzB,IAAM,MAAM,GAAG,KAAK,CAAE,KAAK,CAAE,CAAC;gBAC9B,IAAI,MAAM,KAAK,SAAS,EAAG;oBAC1B,OAAO,MAAM,CAAC;iBACd;aACD;iBAAM;gBACN,OAAO,KAAK,CAAC;aACb;SACD;QACD,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAE,KAAK,CAAE,CAAC;IAC5C,CAAC;IAED,sBAAI,8BAAK;aAAT;YACC,OAAO,IAAI,CAAC,MAAM,CAAC;QACpB,CAAC;aAED,UAAW,KAAwC;YAClD,IAAI,IAAI,CAAC,MAAM,KAAK,KAAK,EAAG;gBAC3B,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;gBACpB,IAAI,CAAC,QAAQ,EAAE,CAAC;aAChB;QACF,CAAC;;;OAPA;IASD,6BAAO,GAAP,UAAS,KAAiB;QACzB,IAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC;QACxB,IAAI,IAAI,KAAK,SAAS,EAAG;YACxB,IAAI,UAAU,CAAE,IAAI,CAAE,EAAG;gBACxB,IAAM,MAAM,GAAG,IAAI,CAAE,KAAK,CAAE,CAAC;gBAC7B,IAAI,MAAM,KAAK,SAAS,EAAG;oBAC1B,OAAO,MAAM,CAAC;iBACd;aACD;iBAAM;gBACN,OAAO,IAAI,CAAC;aACZ;SACD;QACD,OAAO,IAAI,CAAC,MAAM,CAAC,aAAa,CAAE,KAAK,CAAE,CAAC;IAC3C,CAAC;IAED,sBAAI,6BAAI;aAAR;YACC,OAAO,IAAI,CAAC,KAAK,CAAC;QACnB,CAAC;aAED,UAAU,IAA4C;YACrD,IAAI,IAAI,CAAC,KAAK,KAAK,IAAI,EAAG;gBACzB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;gBAClB,IAAI,CAAC,QAAQ,EAAE,CAAC;aAChB;QACF,CAAC;;;OAPA;IASS,8BAAQ,GAAlB;QACC,IAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC;QAChC,IAAI,QAAQ,IAAI,IAAI,EAAG;YACtB,QAAQ,EAAE,CAAC;SACX;IACF,CAAC;IACF,kBAAC;AAAD,CAAC,AAtKD,IAsKC","sourcesContent":["/*\r\n * Copyright (C) 2019 Toshiba Corporation\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { DBaseOptions, DThemeBase } from \"./d-base\";\r\nimport { DBaseState } from \"./d-base-state\";\r\nimport { DBorderStateAware } from \"./d-border\";\r\nimport { DBorderMask } from \"./d-border-mask\";\r\nimport { DStateAwareOrValueMightBe } from \"./d-state-aware\";\r\nimport { isFunction } from \"./util/is-function\";\r\nimport { isString } from \"./util/is-string\";\r\n\r\ntype Callback = () => void;\r\n\r\nexport class DBaseBorder implements DBorderStateAware {\r\n\tprotected _theme: DThemeBase;\r\n\tprotected _color?: DStateAwareOrValueMightBe<number | null>;\r\n\tprotected _alpha?: DStateAwareOrValueMightBe<number>;\r\n\tprotected _width?: DStateAwareOrValueMightBe<number>;\r\n\tprotected _align?: DStateAwareOrValueMightBe<number>;\r\n\tprotected _mask?: DStateAwareOrValueMightBe<DBorderMask>;\r\n\tprotected _callback: Callback | undefined;\r\n\r\n\tconstructor( theme: DThemeBase, options?: DBaseOptions<any>, callback?: Callback ) {\r\n\t\tthis._theme = theme;\r\n\t\tthis._callback = callback;\r\n\t\tif( options != null && options.border != null ) {\r\n\t\t\tconst border = options.border;\r\n\t\t\tthis._color = border.color;\r\n\t\t\tthis._alpha = border.alpha;\r\n\t\t\tthis._width = border.width;\r\n\t\t\tthis._align = border.align;\r\n\t\t\tthis._mask = ( isString( border.mask ) ? DBorderMask[ border.mask ] : border.mask );\r\n\t\t}\r\n\t}\r\n\r\n\tgetTheme(): DThemeBase {\r\n\t\treturn this._theme;\r\n\t}\r\n\r\n\tsetTheme( theme: DThemeBase ): void {\r\n\t\tthis._theme = theme;\r\n\t}\r\n\r\n\tgetColor( state: DBaseState ): number | null {\r\n\t\tconst color = this._color;\r\n\t\tif( color !== undefined ) {\r\n\t\t\tif( isFunction( color ) ) {\r\n\t\t\t\tconst result = color( state );\r\n\t\t\t\tif( result !== undefined ) {\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\treturn color;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._theme.getBorderColor( state );\r\n\t}\r\n\r\n\tget color(): DStateAwareOrValueMightBe<number | null> {\r\n\t\treturn this._color;\r\n\t}\r\n\r\n\tset color( color: DStateAwareOrValueMightBe<number | null> ) {\r\n\t\tif( this._color !== color ) {\r\n\t\t\tthis._color = color;\r\n\t\t\tthis.onChange();\r\n\t\t}\r\n\t}\r\n\r\n\tgetAlpha( state: DBaseState ): number {\r\n\t\tconst alpha = this._alpha;\r\n\t\tif( alpha !== undefined ) {\r\n\t\t\tif( isFunction( alpha ) ) {\r\n\t\t\t\tconst result = alpha( state );\r\n\t\t\t\tif( result !== undefined ) {\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\treturn alpha;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._theme.getBorderAlpha( state );\r\n\t}\r\n\r\n\tget alpha(): DStateAwareOrValueMightBe<number> {\r\n\t\treturn this._alpha;\r\n\t}\r\n\r\n\tset alpha( alpha: DStateAwareOrValueMightBe<number> ) {\r\n\t\tif( this._alpha !== alpha ) {\r\n\t\t\tthis._alpha = alpha;\r\n\t\t\tthis.onChange();\r\n\t\t}\r\n\t}\r\n\r\n\tgetWidth( state: DBaseState ): number {\r\n\t\tconst width = this._width;\r\n\t\tif( width !== undefined ) {\r\n\t\t\tif( isFunction( width ) ) {\r\n\t\t\t\tconst result = width( state );\r\n\t\t\t\tif( result !== undefined ) {\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\treturn width;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._theme.getBorderWidth( state );\r\n\t}\r\n\r\n\tget width(): DStateAwareOrValueMightBe<number> {\r\n\t\treturn this._width;\r\n\t}\r\n\r\n\tset width( width: DStateAwareOrValueMightBe<number> ) {\r\n\t\tif( this._width !== width ) {\r\n\t\t\tthis._width = width;\r\n\t\t\tthis.onChange();\r\n\t\t}\r\n\t}\r\n\r\n\tgetAlign( state: DBaseState ): number {\r\n\t\tconst align = this._align;\r\n\t\tif( align !== undefined ) {\r\n\t\t\tif( isFunction( align ) ) {\r\n\t\t\t\tconst result = align( state );\r\n\t\t\t\tif( result !== undefined ) {\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\treturn align;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._theme.getBorderAlign( state );\r\n\t}\r\n\r\n\tget align(): DStateAwareOrValueMightBe<number> {\r\n\t\treturn this._align;\r\n\t}\r\n\r\n\tset align( align: DStateAwareOrValueMightBe<number> ) {\r\n\t\tif( this._align !== align ) {\r\n\t\t\tthis._align = align;\r\n\t\t\tthis.onChange();\r\n\t\t}\r\n\t}\r\n\r\n\tgetMask( state: DBaseState ): number {\r\n\t\tconst mask = this._mask;\r\n\t\tif( mask !== undefined ) {\r\n\t\t\tif( isFunction( mask ) ) {\r\n\t\t\t\tconst result = mask( state );\r\n\t\t\t\tif( result !== undefined ) {\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\treturn mask;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._theme.getBorderMask( state );\r\n\t}\r\n\r\n\tget mask(): DStateAwareOrValueMightBe<DBorderMask> {\r\n\t\treturn this._mask;\r\n\t}\r\n\r\n\tset mask( mask: DStateAwareOrValueMightBe<DBorderMask> ) {\r\n\t\tif( this._mask !== mask ) {\r\n\t\t\tthis._mask = mask;\r\n\t\t\tthis.onChange();\r\n\t\t}\r\n\t}\r\n\r\n\tprotected onChange(): void {\r\n\t\tconst callback = this._callback;\r\n\t\tif( callback != null ) {\r\n\t\t\tcallback();\r\n\t\t}\r\n\t}\r\n}\r\n"]}