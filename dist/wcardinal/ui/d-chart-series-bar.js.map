{"version":3,"file":"d-chart-series-bar.js","sourceRoot":"","sources":["../../../src/main/typescript/wcardinal/ui/d-chart-series-bar.ts"],"names":[],"mappings":"AAAA;;;GAGG;;AAKH,OAAO,EACN,qBAAqB,EACrB,MAAM,8BAA8B,CAAC;AAGtC,OAAO,EAAE,sBAAsB,EAAE,MAAM,4CAA4C,CAAC;AACpF,OAAO,EAAE,OAAO,EAAE,MAAM,iBAAiB,CAAC;AAE1C;;;GAGG;AACH;IAAqC,mCAAqB;IAOzD,yBAAa,OAAsC;QAAnD,YACC,kBAAO,OAAO,CAAE,SAKhB;QAJA,KAAI,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC;QACpB,KAAI,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC;QACpB,KAAI,CAAC,cAAc,GAAG,CAAC,CAAC,CAAC;QACzB,KAAI,CAAC,uBAAuB,GAAG,CAAC,CAAC,CAAC;;IACnC,CAAC;IAED,8BAAI,GAAJ,UAAM,SAAgC,EAAE,KAAa;QACpD,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC;QACpB,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC;QACpB,IAAI,CAAC,cAAc,GAAG,CAAC,CAAC,CAAC;QACzB,IAAI,CAAC,uBAAuB,GAAG,CAAC,CAAC,CAAC;QAClC,iBAAM,IAAI,YAAE,SAAS,EAAE,KAAK,CAAE,CAAC;IAChC,CAAC;IAES,kCAAQ,GAAlB,UACC,IAAqB,EACrB,OAAiD,EACjD,SAAgC,EAChC,KAAa;QAEb,iBAAM,QAAQ,YAAE,IAAI,EAAE,OAAO,EAAE,SAAS,EAAE,KAAK,CAAE,CAAC;QAClD,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC,UAAU,CAAE,KAAK,EAAE,OAAO,IAAI,OAAO,CAAC,OAAO,CAAE,CAAC;IAC3E,CAAC;IAES,sCAAY,GAAtB;QACC,OAAO,IAAI,sBAAsB,EAAE,CAAC;IACrC,CAAC;IAES,wCAAc,GAAxB;QACC,OAAO,CAAC,CAAC;IACV,CAAC;IAES,0CAAgB,GAA1B,UACC,IAAY,EAAE,IAAY,EAC1B,IAAY,EAAE,IAAY,EAC1B,MAAmC;QAEnC,OAAO,iBAAM,gBAAgB,YAC5B,IAAI,EACJ,IAAI,EACJ,IAAI,CAAC,GAAG,CAAE,CAAC,EAAE,IAAI,CAAE,EACnB,IAAI,CAAC,GAAG,CAAE,CAAC,EAAE,IAAI,CAAE,EACnB,MAAM,CACN,CAAC;IACH,CAAC;IAES,gDAAsB,GAAhC;QACC,IAAI,IAAI,CAAC,SAAS,GAAG,CAAC,IAAI,IAAI,CAAC,SAAS,GAAG,CAAC,EAAG;YAC9C,IAAI,QAAQ,GAAG,CAAC,CAAC;YACjB,IAAI,QAAQ,GAAG,CAAC,CAAC;YACjB,IAAM,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC;YAClC,IAAI,SAAS,EAAG;gBACf,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,IAAI,GAAG,SAAS,CAAC,IAAI,EAAE,EAAE,CAAC,GAAG,IAAI,EAAE,EAAE,CAAC,EAAG;oBACxD,IAAM,MAAM,GAAG,SAAS,CAAC,GAAG,CAAE,CAAC,CAAE,CAAC;oBAClC,IAAI,MAAM,KAAK,IAAI,EAAG;wBACrB,QAAQ,GAAG,QAAQ,CAAC;qBACpB;oBACD,IAAI,MAAM,YAAY,eAAe,EAAG;wBACvC,QAAQ,IAAI,CAAC,CAAC;qBACd;iBACD;aACD;YACD,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAE,CAAC,EAAE,QAAQ,CAAE,CAAC;YACnC,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;YAC1B,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;YAC1B,OAAO,IAAI,CAAC;SACZ;QACD,OAAO,KAAK,CAAC;IACd,CAAC;IAES,mCAAS,GAAnB,UACC,IAAqB,EACrB,WAA6B,EAC7B,WAA6B,EAC7B,EAAU,EAAE,EAAU,EACtB,EAAU,EAAE,EAAU,EACtB,MAAgB;QAEhB,SAAS;QACT,IAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC;QACxB,IAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC;QAC5B,IAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC9B,IAAI,IAAI,IAAI,MAAM,IAAI,OAAO,EAAG;YAC/B,IAAM,aAAa,GAAG,WAAW,CAAC,EAAE,CAAC;YACrC,IAAM,sBAAsB,GAAG,WAAW,CAAC,SAAS,CAAC,EAAE,CAAC;YACxD,IAAI,IAAI,CAAC,sBAAsB,EAAE,IAAI,IAAI,CAAC,cAAc,KAAK,aAAa;gBACzE,IAAI,CAAC,uBAAuB,KAAK,sBAAsB,EAAG;gBAC1D,IAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC;gBAChC,IAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC;gBAChC,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;gBACpC,IAAI,CAAC,uBAAuB,GAAG,sBAAsB,CAAC;gBAEtD,IAAM,EAAE,GAAG,WAAW,CAAC,SAAS,CAAC,GAAG,CAAE,WAAW,CAAC,GAAG,CAAE,CAAC,CAAE,CAAE,CAAC;gBAC7D,IAAM,EAAE,GAAG,WAAW,CAAC,SAAS,CAAC,GAAG,CAAE,WAAW,CAAC,GAAG,CAAE,IAAI,CAAC,CAAC,CAAE,CAAE,CAAC;gBAClE,IAAM,cAAc,GAAG,IAAI,CAAC,GAAG,CAAE,EAAE,GAAG,EAAE,CAAE,GAAG,CAAE,CAAC,GAAG,OAAO,CAAC,KAAK,CAAE,CAAC;gBACnE,IAAI,QAAQ,IAAI,CAAC,EAAG;oBACnB,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;oBAChC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,GAAG,cAAc,CAAC;iBACpC;qBAAM;oBACN,IAAM,aAAa,GAAG,cAAc,GAAG,CAAE,CAAC,GAAG,OAAO,CAAC,KAAK,CAAE,CAAC;oBAC7D,IAAM,iBAAiB,GAAG,cAAc,GAAG,aAAa,CAAC;oBACzD,IAAM,QAAQ,GAAG,aAAa,GAAG,QAAQ,CAAC;oBAC1C,IAAM,UAAU,GAAG,iBAAiB,GAAG,CAAE,QAAQ,GAAG,CAAC,CAAE,CAAC;oBACxD,IAAM,IAAI,GAAG,QAAQ,GAAG,CAAC,QAAQ,GAAG,GAAG,CAAC,GAAG,QAAQ,GAAG,UAAU,CAAC;oBACjE,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,GAAG,IAAI,GAAG,cAAc,GAAG,GAAG,CAAC;oBAC9D,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,GAAG,QAAQ,CAAC;iBAC9B;aACD;SACD;QAED,kBAAkB;QAClB,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;QAC/B,IAAI,CAAE,OAAO,CAAE,KAAK,CAAE,EAAG;YACxB,KAAK,GAAG,EAAE,CAAC;SACX;QACD,IAAM,WAAW,GAAG,KAAK,CAAC,MAAM,CAAC;QAEjC,IAAI,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;QACnC,IAAI,CAAE,OAAO,CAAE,OAAO,CAAE,EAAG;YAC1B,OAAO,GAAG,EAAE,CAAC;SACb;QACD,IAAM,aAAa,GAAG,OAAO,CAAC,MAAM,CAAC;QAErC,IAAI,KAAK,GAAG,CAAC,CAAC;QACd,IAAM,EAAE,GAAG,WAAW,CAAC,SAAS,CAAC,GAAG,CAAE,WAAW,CAAC,GAAG,CAAE,CAAC,CAAE,CAAE,GAAG,EAAE,CAAC;QAClE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,IAAI,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,IAAI,EAAE,CAAC,IAAI,CAAC,EAAE,KAAK,IAAI,CAAC,EAAG;YACpE,IAAM,QAAQ,GAAG,MAAM,CAAE,CAAC,GAAG,CAAC,CAAE,GAAG,EAAE,CAAC;YAEtC,IAAM,CAAC,GAAG,IAAI,CAAC,GAAG,CAAE,QAAQ,CAAE,CAAC;YAC/B,IAAI,KAAK,GAAG,WAAW,EAAG;gBACzB,KAAK,CAAE,KAAK,CAAE,GAAG,CAAC,CAAC;aACnB;iBAAM;gBACN,KAAK,CAAC,IAAI,CAAE,CAAC,CAAE,CAAC;aAChB;YAED,IAAM,CAAC,GAAG,CAAC,GAAG,GAAG,QAAQ,CAAC;YAC1B,IAAI,KAAK,GAAG,aAAa,EAAG;gBAC3B,OAAO,CAAE,KAAK,CAAE,GAAG,CAAC,CAAC;aACrB;iBAAM;gBACN,OAAO,CAAC,IAAI,CAAE,CAAC,CAAE,CAAC;aAClB;SACD;QACD,IAAI,KAAK,CAAC,MAAM,KAAK,KAAK,EAAG;YAC5B,KAAK,CAAC,MAAM,GAAG,KAAK,CAAC;SACrB;QACD,IAAI,OAAO,CAAC,MAAM,KAAK,KAAK,EAAG;YAC9B,OAAO,CAAC,MAAM,GAAG,KAAK,CAAC;SACvB;QAED,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC;QAC3B,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,GAAG,OAAO,CAAC;QAE/B,SAAS;QACT,iBAAM,SAAS,YAAE,IAAI,EAAE,WAAW,EAAE,WAAW,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,MAAM,CAAE,CAAC;IAC3E,CAAC;IAES,oCAAU,GAApB,UAAsB,MAA4B,EAAE,MAAoB,EAAE,KAAmB;QAC5F,iBAAM,UAAU,YAAE,MAAM,EAAE,MAAM,EAAE,KAAK,CAAE,CAAC;QAE1C,IAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC;QACxB,IAAI,IAAI,EAAG;YACV,IAAM,EAAE,GAAG,IAAI,CAAC,CAAC,GAAG,GAAG,CAAC;YACxB,MAAM,CAAC,GAAG,CAAE,MAAM,CAAC,IAAI,GAAG,EAAE,EAAE,MAAM,CAAC,EAAE,GAAG,EAAE,CAAE,CAAC;SAC/C;QACD,KAAK,CAAC,GAAG,CAAE,CAAC,EAAE,CAAC,CAAE,CAAC;IACnB,CAAC;IACF,sBAAC;AAAD,CAAC,AA/KD,CAAqC,qBAAqB,GA+KzD","sourcesContent":["/*\r\n * Copyright (C) 2019 Toshiba Corporation\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { DChartCoordinate } from \"./d-chart-coordinate\";\r\nimport { DChartRegion } from \"./d-chart-region\";\r\nimport { DChartSeriesContainer } from \"./d-chart-series-container\";\r\nimport {\r\n\tDChartSeriesLineOfAny, DChartSeriesLineOfAnyOptions, DChartSeriesLineOfAnyRegion\r\n} from \"./d-chart-series-line-of-any\";\r\nimport { DChartSeriesPaddingComputed } from \"./d-chart-series-padding-computed\";\r\nimport { EShapeLineOfAny } from \"./shape/variant/e-shape-line-of-any\";\r\nimport { EShapeLineOfRectangles } from \"./shape/variant/e-shape-line-of-rectangles\";\r\nimport { isArray } from \"./util/is-array\";\r\n\r\n/**\r\n * A series represents bars.\r\n * Data points must be sorted in ascending order on the X axis.\r\n */\r\nexport class DChartSeriesBar extends DChartSeriesLineOfAny {\r\n\tprotected _barCount: number;\r\n\tprotected _barIndex: number;\r\n\tprotected _xcoordinateId: number;\r\n\tprotected _xcoordinateTransformId: number;\r\n\tprotected _padding?: DChartSeriesPaddingComputed;\r\n\r\n\tconstructor( options?: DChartSeriesLineOfAnyOptions ) {\r\n\t\tsuper( options );\r\n\t\tthis._barCount = -1;\r\n\t\tthis._barIndex = -1;\r\n\t\tthis._xcoordinateId = -1;\r\n\t\tthis._xcoordinateTransformId = -1;\r\n\t}\r\n\r\n\tbind( container: DChartSeriesContainer, index: number ): void {\r\n\t\tthis._barCount = -1;\r\n\t\tthis._barIndex = -1;\r\n\t\tthis._xcoordinateId = -1;\r\n\t\tthis._xcoordinateTransformId = -1;\r\n\t\tsuper.bind( container, index );\r\n\t}\r\n\r\n\tprotected initLine(\r\n\t\tline: EShapeLineOfAny,\r\n\t\toptions: DChartSeriesLineOfAnyOptions | undefined,\r\n\t\tcontainer: DChartSeriesContainer,\r\n\t\tindex: number\r\n\t): void {\r\n\t\tsuper.initLine( line, options, container, index );\r\n\t\tthis._padding = container.newPadding( index, options && options.padding );\r\n\t}\r\n\r\n\tprotected newLineOfAny(): EShapeLineOfAny {\r\n\t\treturn new EShapeLineOfRectangles();\r\n\t}\r\n\r\n\tprotected getSizeDefault(): number {\r\n\t\treturn 1;\r\n\t}\r\n\r\n\tprotected adjustLineRegion(\r\n\t\txmin: number, xmax: number,\r\n\t\tymin: number, ymax: number,\r\n\t\tresult: DChartSeriesLineOfAnyRegion\r\n\t): DChartSeriesLineOfAnyRegion {\r\n\t\treturn super.adjustLineRegion(\r\n\t\t\txmin,\r\n\t\t\txmax,\r\n\t\t\tMath.min( 0, ymin ),\r\n\t\t\tMath.max( 0, ymax ),\r\n\t\t\tresult\r\n\t\t);\r\n\t}\r\n\r\n\tprotected updateBarCountAndIndex(): boolean {\r\n\t\tif( this._barIndex < 0 || this._barCount < 0 ) {\r\n\t\t\tlet barIndex = 0;\r\n\t\t\tlet barCount = 0;\r\n\t\t\tconst container = this._container;\r\n\t\t\tif( container ) {\r\n\t\t\t\tfor( let i = 0, imax = container.size(); i < imax; ++i ) {\r\n\t\t\t\t\tconst series = container.get( i );\r\n\t\t\t\t\tif( series === this ) {\r\n\t\t\t\t\t\tbarIndex = barCount;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif( series instanceof DChartSeriesBar ) {\r\n\t\t\t\t\t\tbarCount += 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tbarCount = Math.max( 1, barCount );\r\n\t\t\tthis._barCount = barCount;\r\n\t\t\tthis._barIndex = barIndex;\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tprotected applyLine(\r\n\t\tline: EShapeLineOfAny,\r\n\t\txcoordinate: DChartCoordinate,\r\n\t\tycoordinate: DChartCoordinate,\r\n\t\tsx: number, sy: number,\r\n\t\tcx: number, cy: number,\r\n\t\tvalues: number[]\r\n\t): void {\r\n\t\t// Offset\r\n\t\tconst size = this._size;\r\n\t\tconst offset = this._offset;\r\n\t\tconst padding = this._padding;\r\n\t\tif( size && offset && padding ) {\r\n\t\t\tconst xcoordinateId = xcoordinate.id;\r\n\t\t\tconst xcoordinateTransformId = xcoordinate.transform.id;\r\n\t\t\tif( this.updateBarCountAndIndex() || this._xcoordinateId !== xcoordinateId ||\r\n\t\t\t\tthis._xcoordinateTransformId !== xcoordinateTransformId ) {\r\n\t\t\t\tconst barCount = this._barCount;\r\n\t\t\t\tconst barIndex = this._barIndex;\r\n\t\t\t\tthis._xcoordinateId = xcoordinateId;\r\n\t\t\t\tthis._xcoordinateTransformId = xcoordinateTransformId;\r\n\r\n\t\t\t\tconst x0 = xcoordinate.transform.map( xcoordinate.map( 0 ) );\r\n\t\t\t\tconst x1 = xcoordinate.transform.map( xcoordinate.map( size.x ) );\r\n\t\t\t\tconst totalBandWidth = Math.abs( x1 - x0 ) * ( 1 - padding.outer );\r\n\t\t\t\tif( barCount <= 1 ) {\r\n\t\t\t\t\tline.points.offset.x = offset.x;\r\n\t\t\t\t\tline.points.size.x = totalBandWidth;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconst totalBarWidth = totalBandWidth * ( 1 - padding.inner );\r\n\t\t\t\t\tconst totalPaddingInner = totalBandWidth - totalBarWidth;\r\n\t\t\t\t\tconst barWidth = totalBarWidth / barCount;\r\n\t\t\t\t\tconst barPadding = totalPaddingInner / ( barCount - 1 );\r\n\t\t\t\t\tconst barX = barWidth * (barIndex + 0.5) + barIndex * barPadding;\r\n\t\t\t\t\tline.points.offset.x = offset.x + barX - totalBandWidth * 0.5;\r\n\t\t\t\t\tline.points.size.x = barWidth;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Sizes & Offsets\r\n\t\tlet sizes = line.points.size.y;\r\n\t\tif( ! isArray( sizes ) ) {\r\n\t\t\tsizes = [];\r\n\t\t}\r\n\t\tconst sizesLength = sizes.length;\r\n\r\n\t\tlet offsets = line.points.offset.y;\r\n\t\tif( ! isArray( offsets ) ) {\r\n\t\t\toffsets = [];\r\n\t\t}\r\n\t\tconst offsetsLength = offsets.length;\r\n\r\n\t\tlet isize = 0;\r\n\t\tconst y0 = ycoordinate.transform.map( ycoordinate.map( 0 ) ) - cy;\r\n\t\tfor( let i = 0, imax = values.length; i < imax; i += 2, isize += 1 ) {\r\n\t\t\tconst distance = values[ i + 1 ] - y0;\r\n\r\n\t\t\tconst s = Math.abs( distance );\r\n\t\t\tif( isize < sizesLength ) {\r\n\t\t\t\tsizes[ isize ] = s;\r\n\t\t\t} else {\r\n\t\t\t\tsizes.push( s );\r\n\t\t\t}\r\n\r\n\t\t\tconst o = -0.5 * distance;\r\n\t\t\tif( isize < offsetsLength ) {\r\n\t\t\t\toffsets[ isize ] = o;\r\n\t\t\t} else {\r\n\t\t\t\toffsets.push( o );\r\n\t\t\t}\r\n\t\t}\r\n\t\tif( sizes.length !== isize ) {\r\n\t\t\tsizes.length = isize;\r\n\t\t}\r\n\t\tif( offsets.length !== isize ) {\r\n\t\t\toffsets.length = isize;\r\n\t\t}\r\n\r\n\t\tline.points.size.y = sizes;\r\n\t\tline.points.offset.y = offsets;\r\n\r\n\t\t// Others\r\n\t\tsuper.applyLine( line, xcoordinate, ycoordinate, sx, sy, cx, cy, values );\r\n\t}\r\n\r\n\tprotected calcRegion( points: Array<number | null>, domain: DChartRegion, range: DChartRegion ): void {\r\n\t\tsuper.calcRegion( points, domain, range );\r\n\r\n\t\tconst size = this._size;\r\n\t\tif( size ) {\r\n\t\t\tconst sx = size.x * 0.5;\r\n\t\t\tdomain.set( domain.from - sx, domain.to + sx );\r\n\t\t}\r\n\t\trange.add( 0, 0 );\r\n\t}\r\n}\r\n"]}