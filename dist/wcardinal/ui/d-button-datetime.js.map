{"version":3,"file":"d-button-datetime.js","sourceRoot":"","sources":["../../../src/main/typescript/wcardinal/ui/d-button-datetime.ts"],"names":[],"mappings":"AAAA;;;GAGG;;AAGH,OAAO,EAAE,OAAO,EAAkD,MAAM,YAAY,CAAC;AACrF,OAAO,EAAE,eAAe,EAA0B,MAAM,qBAAqB,CAAC;AAC9E,OAAO,EAAE,gBAAgB,EAAE,MAAM,sBAAsB,CAAC;AAExD,OAAO,EAAE,gBAAgB,EAAE,MAAM,sBAAsB,CAAC;AA2BxD;IAGU,mCAA6B;IAHvC;;IA4DA,CAAC;IApDU,8BAAI,GAAd,UAAgB,OAAiB;QAAjC,iBAmBC;QAlBA,IAAI,CAAC,cAAc,GAAG,OAAO,IAAI,OAAO,CAAC,MAAM,CAAC;QAChD,IAAI,CAAC,aAAa,GAAG,gBAAgB,CAAC,MAAM,CAAE,OAAO,IAAI,OAAO,CAAC,MAAM,IAAI,OAAO,CAAC,MAAM,CAAC,MAAM,CAAE,CAAC;QAEnG,iBAAM,IAAI,YAAE,OAAO,CAAE,CAAC;QAEtB,IAAI,CAAC,EAAE,CAAE,QAAQ,EAAE;YAClB,IAAM,WAAW,GAAG,KAAI,CAAC,kBAAkB,CAAC,OAAO,EAAE,CAAC;YACtD,IAAM,MAAM,GAAG,KAAI,CAAC,MAAM,CAAC;YAC3B,MAAM,CAAC,OAAO,GAAG,IAAI,IAAI,CAAE,WAAW,CAAE,CAAC;YACzC,MAAM,CAAC,GAAG,GAAG,IAAI,IAAI,CAAE,WAAW,CAAE,CAAC;YACrC,MAAM,CAAC,IAAI,GAAG,IAAI,IAAI,CAAE,WAAW,CAAE,CAAC;YACtC,MAAM,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC;gBAClB,IAAM,OAAO,GAAG,MAAM,CAAC,GAAG,CAAC;gBAC3B,IAAM,WAAW,GAAG,MAAM,CAAC,OAAO,CAAC;gBACnC,KAAI,CAAC,IAAI,GAAG,IAAI,IAAI,CAAE,OAAO,CAAC,OAAO,EAAE,CAAE,CAAC;gBAC1C,KAAI,CAAC,IAAI,CAAE,QAAQ,EAAE,OAAO,EAAE,WAAW,EAAE,KAAI,CAAE,CAAC;YACnD,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;IACJ,CAAC;IAED,yCAAe,GAAf;QACC,OAAO,IAAI,CAAC,aAAa,CAAC;IAC3B,CAAC;IAED,sBAAI,mCAAM;aAAV;YACC,IAAI,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC;YAC1B,IAAI,MAAM,IAAI,IAAI,EAAG;gBACpB,IAAM,aAAa,GAAG,IAAI,CAAC,cAAc,CAAC;gBAC1C,IAAI,aAAa,IAAI,IAAI,EAAG;oBAC3B,MAAM,GAAG,IAAI,eAAe,CAAE,IAAI,CAAC,cAAc,CAAE,CAAC;iBACpD;qBAAM;oBACN,MAAM,GAAG,gBAAgB,CAAC,WAAW,EAAE,CAAC;iBACxC;gBACD,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;aACtB;YACD,OAAO,MAAM,CAAC;QACf,CAAC;;;OAAA;IAED,sBAAI,kCAAK;aAAT;YACC,OAAO,IAAI,CAAC,kBAAkB,CAAC;QAChC,CAAC;aAED,UAAW,KAAW;YACrB,IAAI,IAAI,CAAC,kBAAkB,CAAC,OAAO,EAAE,KAAK,KAAK,CAAC,OAAO,EAAE,EAAG;gBAC3D,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;aAClB;QACF,CAAC;;;OANA;IAQS,iCAAO,GAAjB;QACC,OAAO,iBAAiB,CAAC;IAC1B,CAAC;IACF,sBAAC;AAAD,CAAC,AA5DD,CAGU,OAAO,GAyDhB","sourcesContent":["/*\r\n * Copyright (C) 2019 Toshiba Corporation\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { DBaseState } from \"./d-base-state\";\r\nimport { DButton, DButtonOnOptions, DButtonOptions, DThemeButton } from \"./d-button\";\r\nimport { DDialogDatetime, DDialogDatetimeOptions } from \"./d-dialog-datetime\";\r\nimport { DDialogDatetimes } from \"./d-dialog-datetimes\";\r\nimport { DPickerDatetimeMask } from \"./d-picker-datetime-mask\";\r\nimport { DPickerDatetimes } from \"./d-picker-datetimes\";\r\n\r\n/**\r\n * Mappings of event names and handlers.\r\n */\r\nexport interface DButtonDatetimeOnOptions extends DButtonOnOptions<Date> {\r\n\t/**\r\n\t * Triggered when a selection is changed.\r\n\t *\r\n\t * @param self a button\r\n\t */\r\n\tchange?: ( newValue: Date, oldValue: Date, self: any ) => void;\r\n}\r\n\r\nexport interface DButtonDatetimeOptions<\r\n\tTHEME extends DThemeButtonDatetime = DThemeButtonDatetime\r\n> extends DButtonOptions<Date, THEME> {\r\n\tdialog?: DDialogDatetimeOptions;\r\n\ton?: DButtonDatetimeOnOptions;\r\n}\r\n\r\nexport interface DThemeButtonDatetime extends DThemeButton {\r\n\tgetTextFormatter(): ( value: Date, caller: DButtonDatetime ) => string;\r\n\tgetTextValue( state: DBaseState ): Date;\r\n\tnewTextValue(): Date;\r\n}\r\n\r\nexport class DButtonDatetime<\r\n\tTHEME extends DThemeButtonDatetime = DThemeButtonDatetime,\r\n\tOPTIONS extends DButtonDatetimeOptions<THEME> = DButtonDatetimeOptions<THEME>\r\n> extends DButton<Date, THEME, OPTIONS> {\r\n\tprotected _dialog?: DDialogDatetime;\r\n\tprotected _dialogOptions?: DDialogDatetimeOptions;\r\n\tprotected _datetimeMask!: DPickerDatetimeMask;\r\n\r\n\tprotected init( options?: OPTIONS ) {\r\n\t\tthis._dialogOptions = options && options.dialog;\r\n\t\tthis._datetimeMask = DPickerDatetimes.toMask( options && options.dialog && options.dialog.picker );\r\n\r\n\t\tsuper.init( options );\r\n\r\n\t\tthis.on( \"active\", (): void => {\r\n\t\t\tconst currentTime = this._textValueComputed.getTime();\r\n\t\t\tconst dialog = this.dialog;\r\n\t\t\tdialog.current = new Date( currentTime );\r\n\t\t\tdialog.new = new Date( currentTime );\r\n\t\t\tdialog.page = new Date( currentTime );\r\n\t\t\tdialog.open().then((): void => {\r\n\t\t\t\tconst dateNew = dialog.new;\r\n\t\t\t\tconst dateCurrent = dialog.current;\r\n\t\t\t\tthis.text = new Date( dateNew.getTime() );\r\n\t\t\t\tthis.emit( \"change\", dateNew, dateCurrent, this );\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\tgetDatetimeMask(): DPickerDatetimeMask {\r\n\t\treturn this._datetimeMask;\r\n\t}\r\n\r\n\tget dialog(): DDialogDatetime {\r\n\t\tlet dialog = this._dialog;\r\n\t\tif( dialog == null ) {\r\n\t\t\tconst dialogOptions = this._dialogOptions;\r\n\t\t\tif( dialogOptions != null ) {\r\n\t\t\t\tdialog = new DDialogDatetime( this._dialogOptions );\r\n\t\t\t} else {\r\n\t\t\t\tdialog = DDialogDatetimes.getInstance();\r\n\t\t\t}\r\n\t\t\tthis._dialog = dialog;\r\n\t\t}\r\n\t\treturn dialog;\r\n\t}\r\n\r\n\tget value(): Date {\r\n\t\treturn this._textValueComputed;\r\n\t}\r\n\r\n\tset value( value: Date ) {\r\n\t\tif( this._textValueComputed.getTime() !== value.getTime() ) {\r\n\t\t\tthis.text = value;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected getType(): string {\r\n\t\treturn \"DButtonDatetime\";\r\n\t}\r\n}\r\n"]}