{"version":3,"file":"d-table-body-cell-check.js","sourceRoot":"","sources":["../../../src/main/typescript/wcardinal/ui/d-table-body-cell-check.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (C) 2019 Toshiba Corporation\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { DBaseState } from \"./d-base-state\";\r\nimport { DButtonCheck, DButtonCheckOptions, DThemeButtonCheck } from \"./d-button-check\";\r\nimport { DTableBodyCell, DTableBodyCellOptions } from \"./d-table-body-cell\";\r\nimport { DTableBodyCells } from \"./d-table-body-cells\";\r\nimport { DTableColumn, DTableColumnType } from \"./d-table-column\";\r\nimport { DTableData } from \"./d-table-data\";\r\n\r\nexport interface DTableBodyCellCheckOptions<\r\n\tROW = unknown,\r\n\tTHEME extends DThemeTableBodyCellCheck = DThemeTableBodyCellCheck\r\n> extends DButtonCheckOptions<unknown, THEME>, DTableBodyCellOptions<ROW> {\r\n}\r\n\r\nexport interface DThemeTableBodyCellCheck extends DThemeButtonCheck {\r\n\r\n}\r\n\r\nexport class DTableBodyCellCheck<\r\n\tROW = unknown,\r\n\tTHEME extends DThemeTableBodyCellCheck = DThemeTableBodyCellCheck,\r\n\tOPTIONS extends DTableBodyCellCheckOptions<ROW, THEME> = DTableBodyCellCheckOptions<ROW, THEME>\r\n> extends DButtonCheck<unknown, THEME, OPTIONS> implements DTableBodyCell<ROW> {\r\n\tprotected _row?: ROW;\r\n\tprotected _rowIndex!: number;\r\n\tprotected _columnIndex!: number;\r\n\tprotected _columnData!: DTableColumn<ROW>;\r\n\r\n\tconstructor( options: OPTIONS ) {\r\n\t\tsuper( options );\r\n\t}\r\n\r\n\tprotected init( options: OPTIONS ) {\r\n\t\tsuper.init( options );\r\n\t\tthis._rowIndex = 0;\r\n\t\tthis._columnIndex = options.column.index;\r\n\t\tthis._columnData = options.column.data;\r\n\r\n\t\tthis.on( \"active\", (): void => {\r\n\t\t\tthis.onChange( true );\r\n\t\t});\r\n\r\n\t\tthis.on( \"inactive\", (): void => {\r\n\t\t\tthis.onChange( false );\r\n\t\t});\r\n\t}\r\n\r\n\tprotected onChangeSingle( rowIndex: number, columnIndex: number, columnData: DTableColumn<ROW> ) {\r\n\t\tconst tableBodyRow = this.parent;\r\n\t\tif( tableBodyRow ) {\r\n\t\t\tconst tableBody = tableBodyRow.parent as any;\r\n\t\t\tif( tableBody ) {\r\n\t\t\t\tlet isChanged = false;\r\n\t\t\t\tconst getter = columnData.getter;\r\n\t\t\t\tconst setter = columnData.setter;\r\n\t\t\t\tconst data = tableBody.data as DTableData<ROW>;\r\n\t\t\t\tdata.each(( row: ROW, index: number ): boolean => {\r\n\t\t\t\t\tif( rowIndex !== index && getter( row, columnIndex ) ) {\r\n\t\t\t\t\t\tsetter( row, columnIndex, false );\r\n\t\t\t\t\t\tisChanged = true;\r\n\t\t\t\t\t\tthis.emit( \"cellchange\", false, true, row, index, columnIndex, this );\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t});\r\n\t\t\t\tif( isChanged ) {\r\n\t\t\t\t\ttableBody.update( true );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprotected onChange( newValue: boolean ): void {\r\n\t\tconst row = this._row;\r\n\t\tif( row !== undefined ) {\r\n\t\t\tconst rowIndex = this._rowIndex;\r\n\t\t\tconst columnIndex = this._columnIndex;\r\n\t\t\tconst columnData = this._columnData;\r\n\t\t\tcolumnData.setter( row, columnIndex, newValue );\r\n\t\t\tthis.emit( \"cellchange\", newValue, ! newValue, row, rowIndex, columnIndex, this );\r\n\t\t\tif( newValue && columnData.type === DTableColumnType.CHECK_SINGLE ) {\r\n\t\t\t\tthis.onChangeSingle( rowIndex, columnIndex, columnData );\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprotected mergeState( stateLocal: DBaseState, stateParent: DBaseState ): DBaseState {\r\n\t\treturn super.mergeState( stateLocal, stateParent ) |\r\n\t\t\t( stateParent & DBaseState.HOVERED ? DBaseState.HOVERED : DBaseState.NONE );\r\n\t}\r\n\r\n\tset(\r\n\t\tvalue: unknown, row: ROW, supplimental: unknown,\r\n\t\trowIndex: number, columnIndex: number,\r\n\t\tforcibly?: boolean\r\n\t): void {\r\n\t\tthis._row = row;\r\n\t\tthis._rowIndex = rowIndex;\r\n\t\tthis.setActive( !! value );\r\n\r\n\t\tconst columnData = this._columnData;\r\n\t\tDTableBodyCells.setReadOnly( this, row, columnIndex, columnData );\r\n\t\tDTableBodyCells.setRenderable( this, row, columnIndex, columnData );\r\n\t}\r\n\r\n\tunset(): void {\r\n\t\tthis._row = undefined;\r\n\t}\r\n\r\n\tprotected getType(): string {\r\n\t\treturn \"DTableBodyCellCheck\";\r\n\t}\r\n}\r\n"]}