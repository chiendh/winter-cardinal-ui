{"version":3,"file":"d-view.js","sourceRoot":"","sources":["../../../src/main/typescript/wcardinal/ui/d-view.ts"],"names":[],"mappings":"AAAA;;;GAGG","sourcesContent":["/*\r\n * Copyright (C) 2019 Toshiba Corporation\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { IPoint } from \"pixi.js\";\r\nimport { DBase } from \"./d-base\";\r\nimport { DMouseModifier } from \"./d-mouse-modifier\";\r\nimport { DThemeViewDrag, DViewDrag, DViewDragOptions } from \"./d-view-drag\";\r\nimport { DViewTargetPoint } from \"./d-view-to-target\";\r\n\r\nexport type DViewChecker = (\r\n\te: WheelEvent | MouseEvent | TouchEvent, modifier: DMouseModifier, target: DBase\r\n) => boolean;\r\n\r\nexport interface DViewZoomWheelOptions {\r\n\t/** True to enable wheel zoom */\r\n\tenable?: boolean;\r\n\r\n\t/** Zoom speed */\r\n\tspeed?: number;\r\n\r\n\t/** Mouse modifiers */\r\n\tmodifier?: (keyof typeof DMouseModifier) | DMouseModifier;\r\n\r\n\t/**\r\n\t * Wheel zoom checker.\r\n\t * If a checker returns false, wheel zooms will be canceled.\r\n\t */\r\n\tchecker?: DViewChecker;\r\n}\r\n\r\nexport interface DViewZoomDblClickOptions {\r\n\t/** True to enable double click zoom */\r\n\tenable?: boolean;\r\n\r\n\t/** Zoom amount */\r\n\tamount?: number;\r\n\r\n\t/** Mouse modifiers */\r\n\tmodifier?: (keyof typeof DMouseModifier) | DMouseModifier;\r\n\r\n\t/**\r\n\t * Double click zoom checker.\r\n\t * If a checker returns false, double click zooms will be canceled.\r\n\t */\r\n\tchecker?: DViewChecker;\r\n\r\n\t/** Zoom duration */\r\n\tduration?: number;\r\n}\r\n\r\nexport interface DViewrZoomOptions {\r\n\t/** Minimum scale */\r\n\tmin?: number;\r\n\r\n\t/** Maximum scale */\r\n\tmax?: number;\r\n\r\n\t/** True to keep size ratio */\r\n\tkeepRatio?: boolean;\r\n\r\n\t/** Wheel zoom options */\r\n\twheel?: DViewZoomWheelOptions;\r\n\r\n\t/** Double click zoom options */\r\n\tdblclick?: DViewZoomDblClickOptions;\r\n}\r\n\r\nexport interface DViewTranslationWheelOptions {\r\n\t/** True to enable wheel translation */\r\n\tenable?: boolean;\r\n\r\n\t/** Translation speed */\r\n\tspeed?: number;\r\n\r\n\t/** Mouse modifiers */\r\n\tmodifier?: (keyof typeof DMouseModifier) | DMouseModifier;\r\n\r\n\t/**\r\n\t * Wheel translation checker.\r\n\t * If a checker returns false, wheel translations will be canceled.\r\n\t */\r\n\tchecker?: DViewChecker;\r\n}\r\n\r\nexport interface DViewTranslationOptions {\r\n\t/** Wheel transtion options */\r\n\twheel?: DViewTranslationWheelOptions;\r\n}\r\n\r\nexport interface DViewOptions {\r\n\t/** Drag options */\r\n\tdrag?: DViewDragOptions;\r\n\r\n\t/** Zoom options */\r\n\tzoom?: DViewrZoomOptions;\r\n\r\n\t/** Translation options */\r\n\ttranslation?: DViewTranslationOptions;\r\n\r\n\t/** Theme */\r\n\ttheme?: DThemeView | string;\r\n}\r\n\r\nexport interface DThemeView extends DThemeViewDrag {\r\n\tisWheelZoomEnabled(): boolean;\r\n\tisDblClickZoomEnabled(): boolean;\r\n\tisWheelTranslationEnabled(): boolean;\r\n\tgetWheelZoomSpeed(): number;\r\n\tgetWheelZoomModifier(): DMouseModifier;\r\n\tgetDblClickZoomSpeed(): number;\r\n\tgetDblClickZoomModifier(): DMouseModifier;\r\n\tgetDblClickZoomDuration(): number;\r\n\tgetWheelTranslationSpeed(): number;\r\n\tgetWheelTranslationModifier(): DMouseModifier;\r\n\tgetZoomMin(): number;\r\n\tgetZoomMax(): number;\r\n\tgetZoomKeepRatio(): boolean;\r\n}\r\n\r\nexport interface DView {\r\n\treadonly drag: DViewDrag;\r\n\tscale: DViewTargetPoint;\r\n\tposition: DViewTargetPoint;\r\n\r\n\t/**\r\n\t * Stops an animation if exits.\r\n\t */\r\n\tstop(): void;\r\n\r\n\t/**\r\n\t * Resets a position and a scale.\r\n\t *\r\n\t * @param duration an animation duration\r\n\t * @param stop false to stop a previous animation\r\n\t */\r\n\treset( duration?: number, stop?: boolean ): void;\r\n\r\n\t/**\r\n\t * Fits into a screen.\r\n\t *\r\n\t * @param duration an animation duration\r\n\t * @param stop false to stop a previous animation\r\n\t */\r\n\tfit( duration?: number, stop?: boolean ): void;\r\n\r\n\t/**\r\n\t * Zooms in at the current position.\r\n\t *\r\n\t * @param duration an animation duration\r\n\t * @param stop false to keep a previous animation\r\n\t */\r\n\tzoomIn( duration?: number, stop?: boolean ): void;\r\n\r\n\t/**\r\n\t * Zooms out at the current position.\r\n\t *\r\n\t * @param duration an animation duration\r\n\t * @param stop false to keep a previous animation\r\n\t */\r\n\tzoomOut( duration?: number, stop?: boolean ): void;\r\n\r\n\t/**\r\n\t * Zooms into the spcecified position.\r\n\t *\r\n\t * @param x a local X coordinate position\r\n\t * @param y a local Y coordinate position\r\n\t * @param scaleX a X coordinate scale\r\n\t * @param scaleY a Y coordinate scale\r\n\t * @param duration an duration\r\n\t * @param stop false to keep a previous animation\r\n\t */\r\n\tzoomAt( x: number, y: number, scaleX: number, scaleY: number, duration?: number, stop?: boolean ): void;\r\n\r\n\t/**\r\n\t * Zooms into the specified global position.\r\n\t *\r\n\t * @param x a global X coordinate position\r\n\t * @param y a global Y coordinate position\r\n\t * @param scaleX a X coordinate scale\r\n\t * @param scaleY a Y coordinate scale\r\n\t * @param duration an animation duration\r\n\t * @param stop false to keep a previous animation\r\n\t */\r\n\tzoomAtGlobal( x: number, y: number, scaleX: number, scaleY: number, duration?: number, stop?: boolean ): void;\r\n\r\n\t/**\r\n\t * Zooms in / out at the current position.\r\n\t *\r\n\t * @param scaleX a X coordinate scale\r\n\t * @param scaleY a Y coordinate scale\r\n\t * @param duration an animation duration\r\n\t * @param stop false to keep a previous animation\r\n\t */\r\n\tzoom( scaleX: number, scaleY: number, duration?: number, stop?: boolean ): void;\r\n\r\n\t/**\r\n\t * Moves to the spacified position.\r\n\t *\r\n\t * @param x a local X coordinate position\r\n\t * @param y a local Y coordinate position\r\n\t * @param duration an animation duration\r\n\t * @param stop false to keep a previous animation\r\n\t */\r\n\tmoveTo( x: number, y: number, duration?: number, stop?: boolean ): void;\r\n\r\n\t/**\r\n\t * Sets to the specified position and scale.\r\n\t *\r\n\t * @param x a local X coordinate positoon\r\n\t * @param y a local Y coordinate position\r\n\t * @param scaleX a X coordinate scale\r\n\t * @param scaleY a Y coordinate scale\r\n\t * @param duration an animation duration\r\n\t * @param stop false to keep a previous animation\r\n\t */\r\n\ttransform( x: number, y: number, scaleX: number, scaleY: number, duration?: number, stop?: boolean ): void;\r\n\r\n\ttoLocal( global: IPoint, local: IPoint, skipUpdate?: boolean ): IPoint;\r\n\ttoGlobal( local: IPoint, global: IPoint, skipUpdate?: boolean ): IPoint;\r\n}\r\n"]}