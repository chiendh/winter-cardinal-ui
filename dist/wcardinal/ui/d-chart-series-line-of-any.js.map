{"version":3,"file":"d-chart-series-line-of-any.js","sourceRoot":"","sources":["../../../src/main/typescript/wcardinal/ui/d-chart-series-line-of-any.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (C) 2019 Toshiba Corporation\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { IPoint, Point } from \"pixi.js\";\r\nimport { DApplications } from \"./d-applications\";\r\nimport { DChartCoordinate } from \"./d-chart-coordinate\";\r\nimport { DChartRegion } from \"./d-chart-region\";\r\nimport { DChartSeriesHitResult } from \"./d-chart-series\";\r\nimport { DChartSeriesBase, DChartSeriesBaseOptions } from \"./d-chart-series-base\";\r\nimport { DChartSeriesContainer } from \"./d-chart-series-container\";\r\nimport { DChartSeriesFillComputed, DChartSeriesFillComputedOptions } from \"./d-chart-series-fill-computed\";\r\nimport { DChartSeriesPaddingComputedOptions } from \"./d-chart-series-padding-computed\";\r\nimport { DChartSeriesPointComputed, DChartSeriesPointComputedOptions } from \"./d-chart-series-point-computed\";\r\nimport { DChartSeriesStrokeComputed, DChartSeriesStrokeComputedOptions } from \"./d-chart-series-stroke-computed\";\r\nimport { EShapeLineOfAny } from \"./shape/variant/e-shape-line-of-any\";\r\nimport { EShapeLineOfCircles } from \"./shape/variant/e-shape-line-of-circles\";\r\nimport { toCeilingIndex } from \"./util/to-ceiling-index\";\r\n\r\n/**\r\n * {@link DChartSeriesLineOfAny} options.\r\n */\r\nexport interface DChartSeriesLineOfAnyOptions extends DChartSeriesBaseOptions {\r\n\tpoints?: Array<number | null>;\r\n\tfill?: DChartSeriesFillComputedOptions;\r\n\tstroke?: DChartSeriesStrokeComputedOptions;\r\n\tsize?: DChartSeriesPointComputedOptions;\r\n\toffset?: DChartSeriesPointComputedOptions;\r\n\tpadding?: DChartSeriesPaddingComputedOptions;\r\n}\r\n\r\nexport interface DChartSeriesLineOfAnyRegion {\r\n\txmin: number;\r\n\txmax: number;\r\n\tymin: number;\r\n\tymax: number;\r\n}\r\n\r\n/**\r\n * A series represents a line of anything.\r\n * Data points must be sorted in ascending order on the X axis.\r\n */\r\nexport abstract class DChartSeriesLineOfAny extends DChartSeriesBase {\r\n\tprotected static WORK: Point = new Point();\r\n\tprotected static WORK_REGION?: DChartSeriesLineOfAnyRegion;\r\n\r\n\tprotected _line: EShapeLineOfAny | null;\r\n\tprotected _options?: DChartSeriesLineOfAnyOptions;\r\n\tprotected _points: Array<number | null>;\r\n\tprotected _pointId: number;\r\n\tprotected _pointIdUpdated: number;\r\n\r\n\tprotected _stroke?: DChartSeriesStrokeComputed;\r\n\tprotected _fill?: DChartSeriesFillComputed;\r\n\tprotected _size?: DChartSeriesPointComputed;\r\n\tprotected _offset?: DChartSeriesPointComputed;\r\n\r\n\tconstructor( options?: DChartSeriesLineOfAnyOptions ) {\r\n\t\tsuper( options );\r\n\t\tthis._line = null;\r\n\t\tthis._options = options;\r\n\t\tthis._points = (options && options.points) || [];\r\n\t\tthis._pointId = 0;\r\n\t\tthis._pointIdUpdated = NaN;\r\n\t}\r\n\r\n\tprotected getSizeDefault(): number {\r\n\t\treturn 10;\r\n\t}\r\n\r\n\tprotected getOffsetDefault(): number {\r\n\t\treturn 0;\r\n\t}\r\n\r\n\tbind( container: DChartSeriesContainer, index: number ): void {\r\n\t\tlet line = this._line;\r\n\t\tif( ! line ) {\r\n\t\t\tline = this._line = this.newLineOfAny();\r\n\t\t\tconst options = this._options;\r\n\t\t\tthis.initLine( line, options, container, index );\r\n\t\t}\r\n\t\tline.attach( container.plotArea.container, index );\r\n\t\tthis._pointIdUpdated = NaN;\r\n\t\tsuper.bind( container, index );\r\n\t}\r\n\r\n\tprotected initLine(\r\n\t\tline: EShapeLineOfAny,\r\n\t\toptions: DChartSeriesLineOfAnyOptions | undefined,\r\n\t\tcontainer: DChartSeriesContainer,\r\n\t\tindex: number\r\n\t): void {\r\n\t\tconst fill = container.newFill( index, options && options.fill );\r\n\t\tthis._fill = fill;\r\n\t\tline.fill.copy( fill );\r\n\r\n\t\tconst stroke = container.newStroke( index, options && options.stroke );\r\n\t\tthis._stroke = stroke;\r\n\t\tline.stroke.copy( stroke );\r\n\r\n\t\tconst sizeDefault = this.getSizeDefault();\r\n\t\tconst size = container.newSize( index, options && options.size, sizeDefault, sizeDefault );\r\n\t\tthis._size = size;\r\n\t\tline.points.size.set( size.x, size.y );\r\n\r\n\t\tconst offsetDefault = this.getOffsetDefault();\r\n\t\tconst offset = container.newOffset( index, options && options.offset, offsetDefault, offsetDefault );\r\n\t\tthis._offset = offset;\r\n\t\tline.points.offset.set( offset.x, offset.y );\r\n\t}\r\n\r\n\tprotected abstract newLineOfAny(): EShapeLineOfAny;\r\n\r\n\tunbind(): void {\r\n\t\tconst line = this._line;\r\n\t\tif( line ) {\r\n\t\t\tline.detach();\r\n\t\t}\r\n\t\tsuper.unbind();\r\n\t}\r\n\r\n\tget shape(): EShapeLineOfAny | null {\r\n\t\treturn this._line;\r\n\t}\r\n\r\n\tget points(): Array<number | null> {\r\n\t\treturn this._points;\r\n\t}\r\n\r\n\tset points( points: Array<number | null> ) {\r\n\t\tthis._points = points;\r\n\t\tthis._pointId += 1;\r\n\t}\r\n\r\n\ttoDirty(): void {\r\n\t\tthis._pointId += 1;\r\n\t}\r\n\r\n\tupdate(): void {\r\n\t\tconst line = this._line;\r\n\t\tif( line ) {\r\n\t\t\tconst coordinate = this._coordinate;\r\n\t\t\tconst coordinateX = coordinate.x;\r\n\t\t\tconst coordinateY = coordinate.y;\r\n\t\t\tif( coordinateX && coordinateY ) {\r\n\t\t\t\tconst pointId = this._pointId;\r\n\t\t\t\tconst isPointChanged = ( pointId !== this._pointIdUpdated );\r\n\t\t\t\tconst isCoordinateChanged = coordinate.isDirty( coordinateX, coordinateY );\r\n\t\t\t\tconst isCoordinateTransformChanged = coordinate.isTransformDirty( coordinateX, coordinateY );\r\n\t\t\t\tif( isPointChanged || isCoordinateChanged || isCoordinateTransformChanged ) {\r\n\t\t\t\t\tthis._pointIdUpdated = pointId;\r\n\t\t\t\t\tthis.updateLine(\r\n\t\t\t\t\t\tline,\r\n\t\t\t\t\t\tcoordinateX,\r\n\t\t\t\t\t\tcoordinateY\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprotected updateLine(\r\n\t\tline: EShapeLineOfAny,\r\n\t\txcoordinate: DChartCoordinate,\r\n\t\tycoordinate: DChartCoordinate\r\n\t): void {\r\n\t\tconst values = line.points.values;\r\n\t\tconst valuesLength = values.length;\r\n\t\tlet ivalues = 0;\r\n\t\tconst points = this._points;\r\n\t\tlet xmin = NaN;\r\n\t\tlet xmax = NaN;\r\n\t\tlet ymin = NaN;\r\n\t\tlet ymax = NaN;\r\n\t\tfor( let i = 0, imax = points.length; i < imax; i += 2 ) {\r\n\t\t\tconst x = points[ i ];\r\n\t\t\tconst y = points[ i + 1 ];\r\n\t\t\tif( x != null && y != null ) {\r\n\t\t\t\tif( ivalues < valuesLength ) {\r\n\t\t\t\t\tvalues[ ivalues ] = x;\r\n\t\t\t\t\tvalues[ ivalues + 1 ] = y;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tvalues.push( x, y );\r\n\t\t\t\t}\r\n\t\t\t\tivalues += 2;\r\n\t\t\t\tif( xmin !== xmin ) {\r\n\t\t\t\t\txmin = x;\r\n\t\t\t\t\txmax = x;\r\n\t\t\t\t\tymin = y;\r\n\t\t\t\t\tymax = y;\r\n\t\t\t\t} else {\r\n\t\t\t\t\txmin = Math.min( xmin, x );\r\n\t\t\t\t\txmax = Math.max( xmax, x );\r\n\t\t\t\t\tymin = Math.min( ymin, y );\r\n\t\t\t\t\tymax = Math.max( ymax, y );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif( values.length !== ivalues ) {\r\n\t\t\tvalues.length = ivalues;\r\n\t\t}\r\n\r\n\t\txcoordinate.mapAll( values, 0, ivalues, 2, 0 );\r\n\t\tycoordinate.mapAll( values, 0, ivalues, 2, 1 );\r\n\t\txcoordinate.transform.mapAll( values, 0, ivalues, 2, 0 );\r\n\t\tycoordinate.transform.mapAll( values, 0, ivalues, 2, 1 );\r\n\r\n\t\tif( xmin !== xmin ) {\r\n\t\t\txmin = 0;\r\n\t\t\txmax = 0;\r\n\t\t\tymin = 0;\r\n\t\t\tymax = 0;\r\n\t\t}\r\n\t\tconst region = this.adjustLineRegion(\r\n\t\t\txmin, xmax,\r\n\t\t\tymin, ymax,\r\n\t\t\tDChartSeriesLineOfAny.WORK_REGION || {\r\n\t\t\t\txmin: 0, xmax: 0,\r\n\t\t\t\tymin: 0, ymax: 0\r\n\t\t\t}\r\n\t\t);\r\n\t\txmin = xcoordinate.transform.map( xcoordinate.map( region.xmin ) );\r\n\t\txmax = xcoordinate.transform.map( xcoordinate.map( region.xmax ) );\r\n\t\tymin = ycoordinate.transform.map( ycoordinate.map( region.ymin ) );\r\n\t\tymax = ycoordinate.transform.map( ycoordinate.map( region.ymax ) );\r\n\r\n\t\tconst sx = Math.abs( xmax - xmin );\r\n\t\tconst sy = Math.abs( ymax - ymin );\r\n\t\tconst cx = ( xmin + xmax ) * 0.5;\r\n\t\tconst cy = ( ymin + ymax ) * 0.5;\r\n\t\tfor( let i = 0, imax = values.length; i < imax; i += 2 ) {\r\n\t\t\tvalues[ i + 0 ] -= cx;\r\n\t\t\tvalues[ i + 1 ] -= cy;\r\n\t\t}\r\n\r\n\t\tline.disallowUploadedUpdate();\r\n\t\tthis.applyLine( line, xcoordinate, ycoordinate, sx, sy, cx, cy, values );\r\n\t\tline.allowUploadedUpdate();\r\n\t\tDApplications.update( line );\r\n\t}\r\n\r\n\tprotected adjustLineRegion(\r\n\t\txmin: number, xmax: number,\r\n\t\tymin: number, ymax: number,\r\n\t\tresult: DChartSeriesLineOfAnyRegion\r\n\t): DChartSeriesLineOfAnyRegion {\r\n\t\tresult.xmin = xmin;\r\n\t\tresult.xmax = xmax;\r\n\t\tresult.ymin = ymin;\r\n\t\tresult.ymax = ymax;\r\n\t\treturn result;\r\n\t}\r\n\r\n\tprotected applyLine(\r\n\t\tline: EShapeLineOfAny,\r\n\t\txcoordinate: DChartCoordinate,\r\n\t\tycoordinate: DChartCoordinate,\r\n\t\tsx: number, sy: number,\r\n\t\tcx: number, cy: number,\r\n\t\tvalues: number[]\r\n\t): void {\r\n\t\tline.points.set( values );\r\n\t\tline.size.set( sx, sy );\r\n\t\tline.transform.position.set( cx, cy );\r\n\t}\r\n\r\n\tprotected updateRegion(): void {\r\n\t\tconst pointId = this._pointId;\r\n\t\tif( this._regionPointId !== pointId ) {\r\n\t\t\tthis._regionPointId = pointId;\r\n\t\t\tconst points = this._points;\r\n\t\t\tconst domain = this._domain;\r\n\t\t\tconst range = this._range;\r\n\t\t\tdomain.clear();\r\n\t\t\trange.clear();\r\n\t\t\tthis.calcRegion( points, domain, range );\r\n\t\t}\r\n\t}\r\n\r\n\tprotected calcRegion( points: Array<number | null>, domain: DChartRegion, range: DChartRegion ): void {\r\n\t\tfor( let i = 0, imax = points.length; i < imax; i += 2 ) {\r\n\t\t\tconst xraw = points[ i ];\r\n\t\t\tif( xraw != null ) {\r\n\t\t\t\tdomain.add( xraw, xraw );\r\n\t\t\t}\r\n\t\t\tconst yraw = points[ i + 1 ];\r\n\t\t\tif( yraw != null ) {\r\n\t\t\t\trange.add( yraw, yraw );\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tdestroy(): void {\r\n\t\tconst line = this._line;\r\n\t\tif( line ) {\r\n\t\t\tthis._line = null;\r\n\t\t\tline.detach();\r\n\t\t\tline.destroy();\r\n\t\t}\r\n\r\n\t\tthis._points.length = 0;\r\n\t\tthis._pointId = 0;\r\n\t\tthis._pointIdUpdated = NaN;\r\n\t\tsuper.destroy();\r\n\t}\r\n\r\n\thitTest( global: IPoint ): boolean {\r\n\t\tconst line = this._line;\r\n\t\tif( line ) {\r\n\t\t\tconst work = DChartSeriesLineOfAny.WORK;\r\n\t\t\tconst local = line.toLocal( global, undefined, work );\r\n\t\t\treturn line.contains( local ) != null;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tcalcHitPoint( global: IPoint, result: DChartSeriesHitResult ): boolean {\r\n\t\tconst line = this._line;\r\n\t\tif( line ) {\r\n\t\t\tconst work = DChartSeriesLineOfAny.WORK;\r\n\t\t\tconst local = line.toLocal( global, undefined, work );\r\n\t\t\tresult.shape = line;\r\n\t\t\treturn line.calcHitPoint( local, null, this.calcHitPointTestRange, this.calcHitPointHitTester, result );\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tcalcHitPointTestRange(\r\n\t\tthis: unknown,\r\n\t\tx: number, y: number,\r\n\t\tax: number, ay: number,\r\n\t\tox: number, oy: number,\r\n\t\tthreshold: number,\r\n\t\tvalues: number[],\r\n\t\tresult: [ number, number ]\r\n\t): [ number, number ] {\r\n\t\tconst to = toCeilingIndex( values, x + ax + ox, 2, 0 );\r\n\t\tlet from = 0;\r\n\t\tfor( let i = to - 1, iv = i << 1; 0 <= i; i -= 1, iv -= 2 ) {\r\n\t\t\tif( values[ iv ] <= x - ax ) {\r\n\t\t\t\tfrom = i;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tresult[ 0 ] = from;\r\n\t\tresult[ 1 ] = from !== to ? to : Math.min( values.length << 1, to + 1 );\r\n\t\treturn result;\r\n\t}\r\n\r\n\tcalcHitPointHitTester(\r\n\t\tthis: unknown,\r\n\t\tx: number, y: number,\r\n\t\tax: number, ay: number,\r\n\t\tox: number, oy: number,\r\n\t\tpx: number, py: number,\r\n\t\tindex: number,\r\n\t\tthreshold: number,\r\n\t\tresult: DChartSeriesHitResult\r\n\t): boolean {\r\n\t\tconst shape = result.shape as EShapeLineOfCircles;\r\n\t\tif( shape.containsPointAbs( x, y, ax, ay, ox, oy, px, py ) ) {\r\n\t\t\tconst position = shape.transform.position;\r\n\t\t\tresult.x = result.p0x = result.p1x = position.x + px;\r\n\t\t\tresult.y = result.p0y = result.p1y = position.y + py;\r\n\t\t\tresult.t = threshold;\r\n\t\t\tresult.index = index;\r\n\t\t\tconst dx = x - (px + ox);\r\n\t\t\tconst dy = y - (py + oy);\r\n\t\t\tresult.distance = Math.sqrt( dx * dx + dy * dy );\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n}\r\n"]}