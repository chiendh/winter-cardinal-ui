{"version":3,"file":"d-chart-series-base.js","sourceRoot":"","sources":["../../../src/main/typescript/wcardinal/ui/d-chart-series-base.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (C) 2019 Toshiba Corporation\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { IPoint, utils } from \"pixi.js\";\r\nimport { DApplications } from \"./d-applications\";\r\nimport { DBaseOnOptions } from \"./d-base\";\r\nimport { DBaseState } from \"./d-base-state\";\r\nimport { DChartRegionImmutable } from \"./d-chart-region\";\r\nimport { DChartRegionImpl } from \"./d-chart-region-impl\";\r\nimport { DChartSeries, DChartSeriesHitResult } from \"./d-chart-series\";\r\nimport { DChartSeriesBaseCoordinateContainer } from \"./d-chart-series-base-coordinate-container\";\r\nimport { DChartSeriesContainer } from \"./d-chart-series-container\";\r\nimport { DChartSeriesCoordinateContainer, DChartSeriesCoordinateOptions } from \"./d-chart-series-coordinate\";\r\nimport { EShape } from \"./shape/e-shape\";\r\n\r\n/**\r\n * {@link DChartSeriesBase} options.\r\n */\r\nexport interface DChartSeriesBaseOptions {\r\n\tcoordinate?: DChartSeriesCoordinateOptions;\r\n\ton?: DBaseOnOptions;\r\n}\r\n\r\n/**\r\n * A series represents a polyline.\r\n */\r\nexport abstract class DChartSeriesBase extends utils.EventEmitter implements DChartSeries {\r\n\tprotected _coordinate: DChartSeriesBaseCoordinateContainer;\r\n\r\n\tprotected _container?: DChartSeriesContainer;\r\n\tprotected _index: number;\r\n\r\n\tprotected _domain: DChartRegionImpl;\r\n\tprotected _range: DChartRegionImpl;\r\n\tprotected _regionPointId: number;\r\n\r\n\tprotected _state: DBaseState;\r\n\tprotected _stateLocal: DBaseState;\r\n\r\n\tabstract readonly shape: EShape | null;\r\n\r\n\tconstructor( options?: DChartSeriesBaseOptions ) {\r\n\t\tsuper();\r\n\r\n\t\tthis._coordinate = new DChartSeriesBaseCoordinateContainer( this, options && options.coordinate );\r\n\t\tthis._index = 0;\r\n\t\tthis._domain = new DChartRegionImpl( NaN, NaN );\r\n\t\tthis._range = new DChartRegionImpl( NaN, NaN );\r\n\t\tthis._regionPointId = NaN;\r\n\r\n\t\tthis._state = DBaseState.NONE;\r\n\t\tthis._stateLocal = DBaseState.NONE;\r\n\r\n\t\t// Events\r\n\t\tif( options ) {\r\n\t\t\tconst on = options.on;\r\n\t\t\tif( on != null ) {\r\n\t\t\t\tfor( const name in on ) {\r\n\t\t\t\t\tconst handler = on[ name ];\r\n\t\t\t\t\tif( handler ) {\r\n\t\t\t\t\t\tthis.on( name, handler );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tbind( container: DChartSeriesContainer, index: number ): void {\r\n\t\tthis._container = container;\r\n\t\tthis._coordinate.reset();\r\n\t\tthis._index = index;\r\n\t}\r\n\r\n\tunbind(): void {\r\n\t\tthis._container = undefined;\r\n\t}\r\n\r\n\tabstract toDirty(): void;\r\n\tabstract update(): void;\r\n\r\n\tget domain(): DChartRegionImmutable {\r\n\t\tthis.updateRegion();\r\n\t\treturn this._domain;\r\n\t}\r\n\r\n\tget range(): DChartRegionImmutable {\r\n\t\tthis.updateRegion();\r\n\t\treturn this._range;\r\n\t}\r\n\r\n\tget container(): DChartSeriesContainer | null {\r\n\t\treturn this._container || null;\r\n\t}\r\n\r\n\tget index(): number {\r\n\t\treturn this._index;\r\n\t}\r\n\r\n\tget coordinate(): DChartSeriesCoordinateContainer {\r\n\t\treturn this._coordinate;\r\n\t}\r\n\r\n\tprotected abstract updateRegion(): void;\r\n\r\n\tdestroy(): void {\r\n\t\tthis._container = undefined;\r\n\t\tthis._coordinate.destroy();\r\n\t}\r\n\r\n\thitTest( global: IPoint ): boolean {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tcalcHitPoint( global: IPoint, result: DChartSeriesHitResult ): boolean {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tsetState( state: DBaseState, isOn: boolean ): void {\r\n\t\tconst oldStateLocal = this._stateLocal;\r\n\t\tconst newStateLocal = ( isOn ? (oldStateLocal | state) : (oldStateLocal & ~state) );\r\n\t\tif( oldStateLocal !== newStateLocal ) {\r\n\t\t\tthis._stateLocal = newStateLocal;\r\n\t\t\tthis.updateState();\r\n\t\t}\r\n\t}\r\n\r\n\tprotected updateState(): void {\r\n\t\tconst container = this._container;\r\n\t\tconst chart = container && container.plotArea.chart;\r\n\t\tconst stateLocal = this._stateLocal;\r\n\t\tconst newState = ( chart ?\r\n\t\t\tthis.mergeState( stateLocal, chart.state ) :\r\n\t\t\tstateLocal\r\n\t\t);\r\n\t\tconst oldState = this._state;\r\n\t\tif( oldState !== newState ) {\r\n\t\t\tthis._state = newState;\r\n\t\t\tthis.onStateChange( newState, oldState );\r\n\t\t}\r\n\t}\r\n\r\n\tprotected mergeState( stateLocal: DBaseState, stateParent: DBaseState ): DBaseState {\r\n\t\treturn stateLocal | ( stateParent & DBaseState.DISABLED ) |\r\n\t\t\t( stateParent & (DBaseState.FOCUSED | DBaseState.FOCUSED_IN) ? DBaseState.FOCUSED_IN : DBaseState.NONE ) |\r\n\t\t\t( stateParent & (DBaseState.ACTIVE | DBaseState.ACTIVE_IN) ? DBaseState.ACTIVE_IN : DBaseState.NONE );\r\n\t}\r\n\r\n\tprotected onStateChange( newState: number, oldState: number ) {\r\n\t\tthis.toDirty();\r\n\t\tconst container = this._container;\r\n\t\tconst chart = container && container.plotArea.chart;\r\n\t\tDApplications.update( chart );\r\n\t\tthis.emit( \"statechange\", newState, oldState, this );\r\n\t}\r\n}\r\n"]}