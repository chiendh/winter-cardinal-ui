{"version":3,"file":"d-theme-dark-select-multiple.js","sourceRoot":"","sources":["../../../../../src/main/typescript/wcardinal/ui/theme/dark/d-theme-dark-select-multiple.ts"],"names":[],"mappings":"AAAA;;;GAGG;;AAMH,OAAO,EAAE,QAAQ,EAAE,MAAM,sBAAsB,CAAC;AAChD,OAAO,EAAE,sBAAsB,EAAE,MAAM,8BAA8B,CAAC;AAEtE,IAAM,SAAS,GAAG,UAAE,MAA6B;IAChD,IAAI,MAAM,EAAG;QACZ,IAAI,MAAM,GAAG,EAAE,CAAC;QAChB,IAAI,SAAS,GAAG,EAAE,CAAC;QACnB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,IAAI,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,IAAI,EAAE,EAAE,CAAC,EAAG;YACrD,IAAM,KAAK,GAAG,MAAM,CAAE,CAAC,CAAE,CAAC;YAC1B,IAAM,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC;YACxB,IAAI,QAAQ,CAAE,IAAI,CAAE,EAAG;gBACtB,MAAM,IAAI,SAAS,GAAG,IAAI,CAAC;gBAC3B,SAAS,GAAG,IAAI,CAAC;aACjB;iBAAM,IAAI,IAAI,IAAI,IAAI,EAAG;gBACzB,IAAM,QAAQ,GAAG,IAAI,CAAE,KAAK,CAAC,KAAK,CAAE,CAAC;gBACrC,IAAI,QAAQ,IAAI,IAAI,EAAG;oBACtB,MAAM,IAAI,SAAS,GAAG,QAAQ,CAAC;oBAC/B,SAAS,GAAG,IAAI,CAAC;iBACjB;aACD;SACD;QACD,OAAO,MAAM,CAAC;KACd;IACD,OAAO,EAAE,CAAC;AACX,CAAC,CAAC;AAEF;IAA8C,4CAA6C;IAA3F;;IAcA,CAAC;IAXA,+CAAY,GAAZ;QACC,OAAO,EAAE,CAAC;IACX,CAAC;IAED,+CAAY,GAAZ,UAAc,KAAiB;QAC9B,OAAO,EAAE,CAAC;IACX,CAAC;IAED,mDAAgB,GAAhB;QACC,OAAO,SAAS,CAAC;IAClB,CAAC;IACF,+BAAC;AAAD,CAAC,AAdD,CAA8C,sBAAsB,GAcnE","sourcesContent":["/*\r\n * Copyright (C) 2019 Toshiba Corporation\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { DBaseState } from \"../../d-base-state\";\r\nimport { DMenuItem } from \"../../d-menu-item\";\r\nimport { DThemeSelectMultiple } from \"../../d-select-multiple\";\r\nimport { DStateAwareOrValueMightBe } from \"../../d-state-aware\";\r\nimport { isString } from \"../../util/is-string\";\r\nimport { DThemeDarkDropdownBase } from \"./d-theme-dark-dropdown-base\";\r\n\r\nconst formatter = ( values: Array<DMenuItem<any>> ): string => {\r\n\tif( values ) {\r\n\t\tlet result = \"\";\r\n\t\tlet delimiter = \"\";\r\n\t\tfor( let i = 0, imax = values.length; i < imax; ++i ) {\r\n\t\t\tconst value = values[ i ];\r\n\t\t\tconst text = value.text;\r\n\t\t\tif( isString( text ) ) {\r\n\t\t\t\tresult += delimiter + text;\r\n\t\t\t\tdelimiter = \", \";\r\n\t\t\t} else if( text != null ) {\r\n\t\t\t\tconst computed = text( value.state );\r\n\t\t\t\tif( computed != null ) {\r\n\t\t\t\t\tresult += delimiter + computed;\r\n\t\t\t\t\tdelimiter = \", \";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\treturn \"\";\r\n};\r\n\r\nexport class DThemeDarkSelectMultiple extends DThemeDarkDropdownBase<Array<DMenuItem<any>>>\r\n\timplements DThemeSelectMultiple {\r\n\r\n\tnewTextValue(): DStateAwareOrValueMightBe<Array<DMenuItem<any>>> {\r\n\t\treturn [];\r\n\t}\r\n\r\n\tgetTextValue( state: DBaseState ): Array<DMenuItem<any>> {\r\n\t\treturn [];\r\n\t}\r\n\r\n\tgetTextFormatter(): ( value: any, caller: any ) => string {\r\n\t\treturn formatter;\r\n\t}\r\n}\r\n"]}