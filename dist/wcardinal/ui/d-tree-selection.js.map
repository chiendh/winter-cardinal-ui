{"version":3,"file":"d-tree-selection.js","sourceRoot":"","sources":["../../../src/main/typescript/wcardinal/ui/d-tree-selection.ts"],"names":[],"mappings":"AAEA;;;GAGG;AAEH;IAGC;QACC,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;IACtB,CAAC;IAED;;;;;OAKG;IACI,4BAAG,GAAV,UAAY,IAAsB;QACjC,IAAI,IAAI,CAAC,UAAU,CAAC,OAAO,CAAE,IAAI,CAAE,KAAK,CAAC,CAAC,EAAG;YAC5C,IAAI,CAAC,UAAU,CAAC,IAAI,CAAE,IAAI,CAAE,CAAC;SAC7B;IACF,CAAC;IAED;;;;;OAKG;IACI,+BAAM,GAAb,UAAe,IAAsB;QACpC,IAAM,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,OAAO,CAAE,IAAI,CAAE,CAAC;QAClD,IAAI,SAAS,KAAK,CAAC,CAAC,EAAG;YACtB,IAAI,CAAC,UAAU,CAAC,MAAM,CAAE,SAAS,EAAE,CAAC,CAAE,CAAC;SACvC;IACF,CAAC;IAED;;;;;;OAMG;IACI,+BAAM,GAAb,UAAe,IAAsB;QACpC,IAAM,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,OAAO,CAAE,IAAI,CAAE,CAAC;QAClD,IAAI,SAAS,KAAK,CAAC,CAAC,EAAG;YACtB,IAAI,CAAC,UAAU,CAAC,MAAM,CAAE,SAAS,EAAE,CAAC,CAAE,CAAC;SACvC;aAAM;YACN,IAAI,CAAC,UAAU,CAAC,IAAI,CAAE,IAAI,CAAE,CAAC;SAC7B;IACF,CAAC;IAED;;;OAGG;IACI,8BAAK,GAAZ;QACC,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC;IAC5B,CAAC;IAED;;;;;;OAMG;IACI,4BAAG,GAAV,UAAY,KAAa;QACxB,IAAM,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC;QAClC,IAAI,CAAC,IAAI,KAAK,IAAI,KAAK,GAAG,SAAS,CAAC,MAAM,EAAG;YAC5C,OAAO,SAAS,CAAE,KAAK,CAAE,CAAC;SAC1B;QACD,OAAO,IAAI,CAAC;IACb,CAAC;IAED;;;;;;OAMG;IACI,iCAAQ,GAAf,UAAiB,IAAsB;QACtC,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAE,IAAI,CAAE,KAAK,CAAC,CAAC,CAAC;IAC/C,CAAC;IAED;;;;OAIG;IACI,6BAAI,GAAX;QACC,OAAO,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC;IAC/B,CAAC;IAED;;;;;OAKG;IACI,6BAAI,GAAX,UAAa,QAA+C;QAC3D,KAAmB,UAAe,EAAf,KAAA,IAAI,CAAC,UAAU,EAAf,cAAe,EAAf,IAAe,EAAE;YAA/B,IAAM,IAAI,SAAA;YACd,IAAI,CAAC,QAAQ,CAAE,IAAI,CAAE,EAAG;gBACvB,OAAO;aACP;SACD;IACF,CAAC;IACF,qBAAC;AAAD,CAAC,AAxGD,IAwGC","sourcesContent":["import { DTreeItemRawData } from \"./d-tree\";\r\n\r\n/*\r\n * Copyright (C) 2019 Toshiba Corporation\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nexport class DTreeSelection {\r\n\tprotected _selection!: DTreeItemRawData[];\r\n\r\n\tconstructor() {\r\n\t\tthis._selection = [];\r\n\t}\r\n\r\n\t/**\r\n\t * Select an item.\r\n\t * Add item data to this._selection if it not exist in this._selection.\r\n\t *\r\n\t * @param item Reference data of item want to remove in “value” array.\r\n\t */\r\n\tpublic add( item: DTreeItemRawData ) {\r\n\t\tif( this._selection.indexOf( item ) === -1 ) {\r\n\t\t\tthis._selection.push( item );\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Un-select an item.\r\n\t * remove item data to this._selection if it exist in this._selection.\r\n\t *\r\n\t * @param item Reference data of item want to remove in “value” array.\r\n\t */\r\n\tpublic remove( item: DTreeItemRawData ) {\r\n\t\tconst itemIndex = this._selection.indexOf( item );\r\n\t\tif( itemIndex !== -1 ) {\r\n\t\t\tthis._selection.splice( itemIndex, 1 );\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Select/un-select an item.\r\n\t * If item data not exist in this._selection, add it to this._selection.\r\n\t * If item data exist in this._selection, remove it to this._selection.\r\n\t *\r\n\t * @param item Reference data of item want to remove in “value” array.\r\n\t */\r\n\tpublic toggle( item: DTreeItemRawData ) {\r\n\t\tconst itemIndex = this._selection.indexOf( item );\r\n\t\tif( itemIndex !== -1 ) {\r\n\t\t\tthis._selection.splice( itemIndex, 1 );\r\n\t\t} else {\r\n\t\t\tthis._selection.push( item );\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Un-select all item.\r\n\t *\r\n\t */\r\n\tpublic clear() {\r\n\t\tthis._selection.length = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Get selected item by index.\r\n\t *\r\n\t * @param index index of item in this._selection\r\n\t *\r\n\t * @returns  Reference data of selected item in “value” array.\r\n\t */\r\n\tpublic get( index: number ): DTreeItemRawData | null {\r\n\t\tconst selection = this._selection;\r\n\t\tif( 0 <= index && index < selection.length ) {\r\n\t\t\treturn selection[ index ];\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\t/**\r\n\t * Check item is selected or not.\r\n\t *\r\n\t * @param item Reference data of item want to remove in “value” array.\r\n\t *\r\n\t * @returns selected state of checked item.\r\n\t */\r\n\tpublic contains( item: DTreeItemRawData ) {\r\n\t\treturn this._selection.indexOf( item ) !== -1;\r\n\t}\r\n\r\n\t/**\r\n\t * Get number of selected .\r\n\t *\r\n\t * @returns number of selected.\r\n\t */\r\n\tpublic size() {\r\n\t\treturn this._selection.length;\r\n\t}\r\n\r\n\t/**\r\n\t * Iterate over selected items.\r\n\t *\r\n\t * @param iteratee  boolean function. If the iteratee explicitly returns false, an iteration stops.\r\n\t * @param item data of browsed item.\r\n\t */\r\n\tpublic each( iteratee: ( item: DTreeItemRawData ) => boolean ) {\r\n\t\tfor (const item of this._selection) {\r\n\t\t\tif( !iteratee( item ) ) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n"]}