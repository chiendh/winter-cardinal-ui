{"version":3,"file":"d-dialog-confirm.js","sourceRoot":"","sources":["../../../src/main/typescript/wcardinal/ui/d-dialog-confirm.ts"],"names":[],"mappings":"AAAA;;;GAGG;;AAEH,OAAO,EAAE,KAAK,EAAE,MAAM,UAAU,CAAC;AACjC,OAAO,EAAE,cAAc,EAA8C,MAAM,oBAAoB,CAAC;AAChG,OAAO,EAAE,qBAAqB,EAAgC,MAAM,4BAA4B,CAAC;AAGjG,OAAO,EAAE,UAAU,EAAE,MAAM,oBAAoB,CAAC;AAChD,OAAO,EAAE,QAAQ,EAAE,MAAM,kBAAkB,CAAC;AAY5C;IAGU,kCAA8B;IAHxC;;IAiEA,CAAC;IA3DU,+BAAM,GAAhB,UAAkB,MAAuB,EAAE,OAAiB;QAC3D,iBAAM,MAAM,YAAE,MAAM,EAAE,OAAO,CAAE,CAAC;QAChC,IAAM,OAAO,GAAG,IAAI,CAAC,SAAS,CAAE,IAAI,CAAC,KAAK,EAAE,OAAO,CAAE,CAAC;QACtD,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QACxB,MAAM,CAAC,QAAQ,CAAE,OAAO,CAAE,CAAC;IAC5B,CAAC;IAES,kCAAS,GAAnB,UAAqB,KAA0B,EAAE,OAA+B;QAC/E,IAAI,OAAO,IAAI,OAAO,CAAC,OAAO,IAAI,IAAI,EAAG;YACxC,IAAM,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;YAChC,IAAI,QAAQ,CAAE,OAAO,CAAE,IAAI,UAAU,CAAE,OAAO,CAAE,EAAG;gBAClD,OAAO,IAAI,CAAC,UAAU,CACrB,IAAI,CAAC,gBAAgB,CAAE,OAAO,CAAE,CAChC,CAAC;aACF;iBAAM,IAAI,OAAO,YAAY,KAAK,EAAG;gBACrC,OAAO,OAAO,CAAC;aACf;iBAAM;gBACN,OAAO,IAAI,CAAC,UAAU,CACrB,IAAI,CAAC,sBAAsB,CAAE,OAAO,EAAE,KAAK,CAAC,UAAU,EAAE,CAAE,CAC1D,CAAC;aACF;SACD;QACD,OAAO,IAAI,CAAC,UAAU,CACrB,IAAI,CAAC,gBAAgB,CAAE,KAAK,CAAC,UAAU,EAAE,CAAE,CAC3C,CAAC;IACH,CAAC;IAES,+CAAsB,GAAhC,UACC,OAAqC,EACrC,OAAmC;QAEnC,IAAI,OAAO,CAAC,IAAI,IAAI,IAAI,EAAG;YAC1B,OAAO,CAAC,IAAI,GAAG,EAAE,CAAC;SAClB;QACD,IAAI,OAAO,CAAC,IAAI,CAAC,KAAK,KAAK,SAAS,EAAG;YACtC,OAAO,CAAC,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC;SAC7B;QACD,OAAO,OAAO,CAAC;IAChB,CAAC;IAES,yCAAgB,GAA1B,UAA4B,OAAmC;QAC9D,OAAO;YACN,IAAI,EAAE;gBACL,KAAK,EAAE,OAAO;aACd;SACD,CAAC;IACH,CAAC;IAES,mCAAU,GAApB,UAAsB,OAAqC;QAC1D,OAAO,IAAI,qBAAqB,CAAE,OAAO,CAAE,CAAC;IAC7C,CAAC;IAED,sBAAI,mCAAO;aAAX;YACC,OAAO,IAAI,CAAC,QAAQ,CAAC;QACtB,CAAC;;;OAAA;IAES,gCAAO,GAAjB;QACC,OAAO,gBAAgB,CAAC;IACzB,CAAC;IACF,qBAAC;AAAD,CAAC,AAjED,CAGU,cAAc,GA8DvB","sourcesContent":["/*\r\n * Copyright (C) 2019 Toshiba Corporation\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { DBase } from \"./d-base\";\r\nimport { DDialogCommand, DDialogCommandOptions, DThemeDialogCommand } from \"./d-dialog-command\";\r\nimport { DDialogConfirmMessage, DDialogConfirmMessageOptions } from \"./d-dialog-confirm-message\";\r\nimport { DLayoutVertical } from \"./d-layout-vertical\";\r\nimport { DStateAwareOrValue } from \"./d-state-aware\";\r\nimport { isFunction } from \"./util/is-function\";\r\nimport { isString } from \"./util/is-string\";\r\n\r\nexport interface DDialogConfirmOptions<\r\n\tTHEME extends DThemeDialogConfirm = DThemeDialogConfirm\r\n> extends DDialogCommandOptions<THEME> {\r\n\tmessage?: DStateAwareOrValue<string> | DDialogConfirmMessageOptions | DDialogConfirmMessage;\r\n}\r\n\r\nexport interface DThemeDialogConfirm extends DThemeDialogCommand {\r\n\tgetMessage(): DStateAwareOrValue<string>;\r\n}\r\n\r\nexport class DDialogConfirm<\r\n\tTHEME extends DThemeDialogConfirm = DThemeDialogConfirm,\r\n\tOPTIONS extends DDialogConfirmOptions<THEME> = DDialogConfirmOptions<THEME>\r\n> extends DDialogCommand<THEME, OPTIONS> {\r\n\tprotected _message!: DDialogConfirmMessage;\r\n\r\n\tprotected onInit( layout: DLayoutVertical, options?: OPTIONS ) {\r\n\t\tsuper.onInit( layout, options );\r\n\t\tconst message = this.toMessage( this.theme, options );\r\n\t\tthis._message = message;\r\n\t\tlayout.addChild( message );\r\n\t}\r\n\r\n\tprotected toMessage( theme: DThemeDialogConfirm, options?: DDialogConfirmOptions ): DDialogConfirmMessage {\r\n\t\tif( options && options.message != null ) {\r\n\t\t\tconst message = options.message;\r\n\t\t\tif( isString( message ) || isFunction( message ) ) {\r\n\t\t\t\treturn this.newMessage(\r\n\t\t\t\t\tthis.toMessageOptions( message )\r\n\t\t\t\t);\r\n\t\t\t} else if( message instanceof DBase ) {\r\n\t\t\t\treturn message;\r\n\t\t\t} else {\r\n\t\t\t\treturn this.newMessage(\r\n\t\t\t\t\tthis.toMessageOptionsMerged( message, theme.getMessage() )\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this.newMessage(\r\n\t\t\tthis.toMessageOptions( theme.getMessage() )\r\n\t\t);\r\n\t}\r\n\r\n\tprotected toMessageOptionsMerged(\r\n\t\toptions: DDialogConfirmMessageOptions,\r\n\t\tmessage: DStateAwareOrValue<string>\r\n\t): DDialogConfirmMessageOptions {\r\n\t\tif( options.text == null ) {\r\n\t\t\toptions.text =ã€€{};\r\n\t\t}\r\n\t\tif( options.text.value === undefined ) {\r\n\t\t\toptions.text.value = message;\r\n\t\t}\r\n\t\treturn options;\r\n\t}\r\n\r\n\tprotected toMessageOptions( message: DStateAwareOrValue<string> ): DDialogConfirmMessageOptions {\r\n\t\treturn {\r\n\t\t\ttext: {\r\n\t\t\t\tvalue: message\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\r\n\tprotected newMessage( options: DDialogConfirmMessageOptions ): DDialogConfirmMessage {\r\n\t\treturn new DDialogConfirmMessage( options );\r\n\t}\r\n\r\n\tget message(): DDialogConfirmMessage {\r\n\t\treturn this._message;\r\n\t}\r\n\r\n\tprotected getType(): string {\r\n\t\treturn \"DDialogConfirm\";\r\n\t}\r\n}\r\n"]}