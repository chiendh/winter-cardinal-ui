{"version":3,"file":"d-text-base.js","sourceRoot":"","sources":["../../../src/main/typescript/wcardinal/ui/d-text-base.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (C) 2019 Toshiba Corporation\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { Graphics, Text } from \"pixi.js\";\r\nimport { DAlignHorizontal } from \"./d-align-horizontal\";\r\nimport { DAlignVertical } from \"./d-align-vertical\";\r\nimport { DApplications } from \"./d-applications\";\r\nimport { DBase, DBaseOnOptions, DBaseOptions, DRefitable, DThemeBase } from \"./d-base\";\r\nimport { DBaseOverflowMaskSimple } from \"./d-base-overflow-mask-simple\";\r\nimport { DBaseState } from \"./d-base-state\";\r\nimport { DDynamicText } from \"./d-dynamic-text\";\r\nimport { DDynamicTextStyleOptions } from \"./d-dynamic-text-style\";\r\nimport { DStateAwareOrValueMightBe } from \"./d-state-aware\";\r\nimport { isFunction } from \"./util/is-function\";\r\nimport { isString } from \"./util/is-string\";\r\n\r\nexport interface DTextBaseTextAlignOptions {\r\n\tvertical?: (keyof typeof DAlignVertical) | DAlignVertical;\r\n\thorizontal?: (keyof typeof DAlignHorizontal) | DAlignHorizontal;\r\n}\r\n\r\nexport interface DTextBaseTextOptions<VALUE = unknown> {\r\n\tvalue?: DStateAwareOrValueMightBe<VALUE>;\r\n\tcolor?: DStateAwareOrValueMightBe<number>;\r\n\talpha?: DStateAwareOrValueMightBe<number>;\r\n\tstyle?: DDynamicTextStyleOptions;\r\n\talign?: DTextBaseTextAlignOptions;\r\n\tformatter?: ( value: VALUE, caller: any ) => string;\r\n\tdynamic?: boolean;\r\n}\r\n\r\nexport interface DTextBaseOnOptions<VALUE> extends DBaseOnOptions {\r\n\r\n}\r\n\r\nexport interface DTextBaseOptions<\r\n\tVALUE = unknown,\r\n\tTHEME extends DThemeTextBase = DThemeTextBase\r\n> extends DBaseOptions<THEME> {\r\n\ttext?: DTextBaseTextOptions<VALUE>;\r\n\tmask?: boolean;\r\n\ton?: DTextBaseOnOptions<VALUE>;\r\n}\r\n\r\nexport interface DThemeTextBase extends DThemeBase {\r\n\tgetTextFormatter(): ( value: any, caller: any ) => string;\r\n\tnewTextValue(): any;\r\n\tgetTextValue( state: DBaseState ): any;\r\n\tgetTextAlignVertical(): DAlignVertical;\r\n\tgetTextAlignHorizontal(): DAlignHorizontal;\r\n\tgetTextStyleClipping(): boolean;\r\n\tisOverflowMaskEnabled(): boolean;\r\n\tisTextDynamic(): boolean;\r\n}\r\n\r\n// Option parser\r\nconst isOverflowMaskEnabled = <VALUE, THEME extends DThemeTextBase>(\r\n\ttheme: DThemeTextBase, options?: DTextBaseOptions<VALUE, THEME>\r\n) => {\r\n\tif( options && options.mask != null ) {\r\n\t\treturn options.mask;\r\n\t}\r\n\treturn theme.isOverflowMaskEnabled();\r\n};\r\n\r\nconst toTextValue = <VALUE, THEME extends DThemeTextBase>(\r\n\ttheme: DThemeTextBase,\r\n\toptions: DTextBaseOptions<VALUE, THEME> | undefined\r\n): DStateAwareOrValueMightBe<VALUE> => {\r\n\tif( options && options.text && options.text.value !== undefined ) {\r\n\t\treturn options.text.value;\r\n\t}\r\n\treturn theme.newTextValue();\r\n};\r\n\r\nconst toTextStyle = <VALUE, THEME extends DThemeTextBase>(\r\n\ttheme: DThemeTextBase, options: DTextBaseOptions<VALUE, THEME> | undefined, state: DBaseState\r\n): DDynamicTextStyleOptions => {\r\n\tif( options && options.text && options.text.style != null ) {\r\n\t\tconst style = options.text.style;\r\n\t\tconst fill = style.fill != null ? style.fill : theme.getColor( state );\r\n\t\tconst fontSize = style.fontSize != null ? style.fontSize : theme.getFontSize();\r\n\t\tconst fontFamily = style.fontFamily != null ? style.fontFamily : theme.getFontFamilly();\r\n\t\tconst fontWeight = style.fontWeight != null ? style.fontWeight : theme.getFontWeight();\r\n\t\tconst fontStyle = style.fontStyle != null ? style.fontStyle : theme.getFontStyle();\r\n\t\tconst fontVariant = style.fontVariant != null ? style.fontVariant : theme.getFontVariant();\r\n\t\tconst clipping = style.clipping != null ? style.clipping : theme.getTextStyleClipping();\r\n\t\treturn {\r\n\t\t\tfill,\r\n\t\t\tfontSize,\r\n\t\t\tfontFamily,\r\n\t\t\tfontWeight,\r\n\t\t\tfontStyle,\r\n\t\t\tfontVariant,\r\n\t\t\tclipping\r\n\t\t};\r\n\t}\r\n\r\n\treturn {\r\n\t\tfill: theme.getColor( state ),\r\n\t\tfontSize: theme.getFontSize(),\r\n\t\tfontFamily: theme.getFontFamilly(),\r\n\t\tfontWeight: theme.getFontWeight(),\r\n\t\tfontStyle: theme.getFontStyle(),\r\n\t\tfontVariant: theme.getFontVariant(),\r\n\t\tclipping: theme.getTextStyleClipping()\r\n\t};\r\n};\r\n\r\nconst toTextAlign = <VALUE, THEME extends DThemeTextBase>(\r\n\ttheme: DThemeTextBase, options?: DTextBaseOptions<VALUE, THEME>\r\n): { vertical: DAlignVertical, horizontal: DAlignHorizontal } => {\r\n\tif( options && options.text && options.text.align ) {\r\n\t\tconst align = options.text.align;\r\n\t\tconst vertical = ( align.vertical != null ?\r\n\t\t\t( isString( align.vertical ) ? DAlignVertical[ align.vertical ] : align.vertical ) :\r\n\t\t\ttheme.getTextAlignVertical()\r\n\t\t);\r\n\t\tconst horizontal = ( align.horizontal != null ?\r\n\t\t\t( isString( align.horizontal ) ? DAlignHorizontal[ align.horizontal ] : align.horizontal ) :\r\n\t\t\ttheme.getTextAlignHorizontal()\r\n\t\t);\r\n\t\treturn {\r\n\t\t\tvertical,\r\n\t\t\thorizontal\r\n\t\t};\r\n\t}\r\n\treturn {\r\n\t\tvertical: theme.getTextAlignVertical(),\r\n\t\thorizontal: theme.getTextAlignHorizontal()\r\n\t};\r\n};\r\n\r\nconst toTextFormatter = <VALUE, THEME extends DThemeTextBase>(\r\n\ttheme: DThemeTextBase,\r\n\toptions: DTextBaseOptions<VALUE, THEME> | undefined\r\n): ( value: VALUE, caller: any ) => string => {\r\n\tif( options && options.text && options.text.formatter ) {\r\n\t\treturn options.text.formatter;\r\n\t}\r\n\treturn theme.getTextFormatter();\r\n};\r\n\r\nconst toTextDynamic = <VALUE, THEME extends DThemeTextBase>(\r\n\ttheme: DThemeTextBase, options?: DTextBaseOptions<VALUE, THEME>\r\n): boolean => {\r\n\tif( options && options.text && options.text.dynamic != null ) {\r\n\t\treturn options.text.dynamic;\r\n\t}\r\n\treturn theme.isTextDynamic();\r\n};\r\n\r\nexport class DTextBase<\r\n\tVALUE = unknown,\r\n\tTHEME extends DThemeTextBase = DThemeTextBase,\r\n\tOPTIONS extends DTextBaseOptions<VALUE, THEME> = DTextBaseOptions<VALUE, THEME>\r\n> extends DBase<THEME, OPTIONS> {\r\n\tprotected _text!: DDynamicText | Text | null;\r\n\tprotected _textValue!: DStateAwareOrValueMightBe<VALUE>;\r\n\tprotected _textValueComputed!: VALUE;\r\n\tprotected _textColor!: DStateAwareOrValueMightBe<number>;\r\n\tprotected _textAlpha!: DStateAwareOrValueMightBe<number>;\r\n\tprotected _textStyle!: DDynamicTextStyleOptions;\r\n\tprotected _textAlign!: {\r\n\t\tvertical: DAlignVertical,\r\n\t\thorizontal: DAlignHorizontal\r\n\t};\r\n\tprotected _textFormatter!: ( value: VALUE, caller: any ) => string;\r\n\tprotected _isOverflowMaskEnabled!: boolean;\r\n\tprotected _overflowMask!: DBaseOverflowMaskSimple | null;\r\n\tprotected _textDynamic!: boolean;\r\n\r\n\tprotected init( options?: OPTIONS ): void {\r\n\t\tsuper.init( options );\r\n\r\n\t\tthis._text = null;\r\n\t\tconst theme = this.theme;\r\n\t\tthis._textValue = toTextValue( theme, options );\r\n\t\tthis._textValueComputed = this.computeTextValue();\r\n\t\tthis._textColor = ( options && options.text && options.text.color );\r\n\t\tthis._textAlpha = ( options && options.text && options.text.alpha );\r\n\t\tthis._textStyle = toTextStyle( theme, options, this.state );\r\n\t\tthis._textAlign = toTextAlign( theme, options );\r\n\t\tthis._textFormatter = toTextFormatter( theme, options );\r\n\t\tthis._textDynamic = toTextDynamic( theme, options );\r\n\t\tthis._isOverflowMaskEnabled = isOverflowMaskEnabled( theme, options );\r\n\t\tthis._overflowMask = null;\r\n\t\tthis.onTextChange();\r\n\t\tthis.createOrUpdateText();\r\n\t}\r\n\r\n\tset text( text: DStateAwareOrValueMightBe<VALUE> ) {\r\n\t\tif( this._textValue !== text ) {\r\n\t\t\tthis._textValue = text;\r\n\t\t\tthis.updateTextValue();\r\n\t\t}\r\n\t}\r\n\r\n\tget text(): DStateAwareOrValueMightBe<VALUE> {\r\n\t\treturn this._textValue;\r\n\t}\r\n\r\n\tprotected onTextChange() {\r\n\t\t// DO NOTHING\r\n\t}\r\n\r\n\tprotected computeTextValue(): VALUE {\r\n\t\tconst textValue = this._textValue;\r\n\t\tif( textValue !== undefined ) {\r\n\t\t\tif( isFunction( textValue ) ) {\r\n\t\t\t\tconst result = textValue( this.state );\r\n\t\t\t\tif( result !== undefined ) {\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\treturn textValue;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this.theme.getTextValue( this.state ) as VALUE;\r\n\t}\r\n\r\n\tprotected createOrUpdateText(): void {\r\n\t\tconst formatted = this._textFormatter( this._textValueComputed, this );\r\n\t\tif( this._text == null ) {\r\n\t\t\tif( 0 < formatted.length ) {\r\n\t\t\t\tconst text = this.createText( formatted );\r\n\t\t\t\tthis._text = text;\r\n\t\t\t\tthis.addChild( text );\r\n\t\t\t\tthis.updateTextPosition( text );\r\n\t\t\t\tif( this._isOverflowMaskEnabled ) {\r\n\t\t\t\t\ttext.mask = this.getOrCreateOverflowMask();\r\n\t\t\t\t}\r\n\t\t\t\tthis.toDirty();\r\n\t\t\t\tDApplications.update( this );\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthis._text.text = formatted;\r\n\t\t\tthis.toDirty();\r\n\t\t\tDApplications.update( this );\r\n\t\t}\r\n\t}\r\n\r\n\tprotected createText( formatted: string ): Text | DDynamicText {\r\n\t\treturn ( this._textDynamic ?\r\n\t\t\tnew DDynamicText( formatted, this._textStyle ) :\r\n\t\t\tnew Text( formatted, this._textStyle )\r\n\t\t);\r\n\t}\r\n\r\n\tprotected getOrCreateOverflowMask(): Graphics {\r\n\t\tif( this._overflowMask == null ) {\r\n\t\t\tthis._overflowMask = new DBaseOverflowMaskSimple( this );\r\n\t\t\tthis.addReflowable( this._overflowMask );\r\n\t\t\tthis.toDirty();\r\n\t\t}\r\n\t\treturn this._overflowMask;\r\n\t}\r\n\r\n\tprotected updateTextPosition( text: DDynamicText | Text ): void {\r\n\t\tconst align = this._textAlign;\r\n\t\tconst padding = this._padding;\r\n\t\tconst toRounded = this.toRounded;\r\n\r\n\t\tswitch( align.horizontal ) {\r\n\t\tcase DAlignHorizontal.LEFT:\r\n\t\t\ttext.x = toRounded( padding.getLeft() );\r\n\t\t\tbreak;\r\n\t\tcase DAlignHorizontal.CENTER:\r\n\t\t\ttext.x = toRounded( ( this.width - text.width ) * 0.5 );\r\n\t\t\tbreak;\r\n\t\tcase DAlignHorizontal.RIGHT:\r\n\t\t\ttext.x = toRounded( this.width - text.width - padding.getRight() );\r\n\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tswitch( align.vertical ) {\r\n\t\tcase DAlignVertical.TOP:\r\n\t\t\ttext.y = toRounded( padding.getTop() );\r\n\t\t\tbreak;\r\n\t\tcase DAlignVertical.MIDDLE:\r\n\t\t\ttext.y = toRounded( ( this.height - text.height ) * 0.5 );\r\n\t\t\tbreak;\r\n\t\tcase DAlignVertical.BOTTOM:\r\n\t\t\ttext.y = toRounded( this.height - text.height - padding.getBottom() );\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected toRounded( this: unknown, value: number ): number {\r\n\t\treturn Math.round( value );\r\n\t}\r\n\r\n\tprotected getTextColor( theme: THEME, state: DBaseState ): number {\r\n\t\tconst color = this._textColor;\r\n\t\tif( color !== undefined ) {\r\n\t\t\tif( isFunction( color ) ) {\r\n\t\t\t\tconst result = color( state );\r\n\t\t\t\tif( result !== undefined ) {\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\treturn color;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn theme.getColor( state );\r\n\t}\r\n\r\n\tprotected getTextAlpha( theme: THEME, state: DBaseState ): number {\r\n\t\tconst alpha = this._textAlpha;\r\n\t\tif( alpha !== undefined ) {\r\n\t\t\tif( isFunction( alpha ) ) {\r\n\t\t\t\tconst result = alpha( state );\r\n\t\t\t\tif( result !== undefined ) {\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\treturn alpha;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn theme.getAlpha( state );\r\n\t}\r\n\r\n\tprotected updateTextColor( text: DDynamicText | Text ): void {\r\n\t\tconst theme = this.theme;\r\n\t\tconst state = this.state;\r\n\t\ttext.style.fill = this.getTextColor( theme, state );\r\n\t\ttext.alpha = this.getTextAlpha( theme, state );\r\n\t}\r\n\r\n\tprotected updateTextValue(): void {\r\n\t\tconst newTextValueComputed = this.computeTextValue();\r\n\t\tif( this._textValueComputed !== newTextValueComputed ) {\r\n\t\t\tthis._textValueComputed = newTextValueComputed;\r\n\t\t\tthis.onTextChange();\r\n\t\t\tthis.createOrUpdateText();\r\n\t\t}\r\n\t}\r\n\r\n\tprotected updateText(): void {\r\n\t\tconst text = this._text;\r\n\t\tif( text != null ) {\r\n\t\t\tthis.updateTextValue();\r\n\t\t\tthis.updateTextPosition( text );\r\n\t\t\tthis.updateTextColor( text );\r\n\t\t}\r\n\t}\r\n\r\n\tprotected onReflow(): void {\r\n\t\tsuper.onReflow();\r\n\t\tthis.updateText();\r\n\t}\r\n\r\n\tprotected isRefitable( target: any ): target is DRefitable {\r\n\t\treturn super.isRefitable( target ) ||\r\n\t\t\t(target != null && target === this._text);\r\n\t}\r\n\r\n\tprotected applyTitle(): void {\r\n\t\tconst text = this._text;\r\n\t\tif( this._title.length <= 0 && text && (\"clipped\" in text) && text.clipped ) {\r\n\t\t\tconst layer = DApplications.getLayer( this );\r\n\t\t\tif( layer ) {\r\n\t\t\t\tlayer.view.title = text.text;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tsuper.applyTitle();\r\n\t\t}\r\n\t}\r\n\r\n\tprotected getType(): string {\r\n\t\treturn \"DTextBase\";\r\n\t}\r\n\r\n\tdestroy(): void {\r\n\t\t// Text\r\n\t\tconst text = this._text;\r\n\t\tif( text != null ) {\r\n\t\t\tthis._text = null;\r\n\t\t\ttext.destroy();\r\n\t\t}\r\n\r\n\t\t// Overflow mask\r\n\t\tconst overflowMask = this._overflowMask;\r\n\t\tif( overflowMask != null ) {\r\n\t\t\tthis._overflowMask = null;\r\n\t\t\toverflowMask.destroy();\r\n\t\t}\r\n\r\n\t\tsuper.destroy();\r\n\t}\r\n}\r\n"]}