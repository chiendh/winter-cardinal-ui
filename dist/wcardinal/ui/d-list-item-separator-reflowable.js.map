{"version":3,"file":"d-list-item-separator-reflowable.js","sourceRoot":"","sources":["../../../src/main/typescript/wcardinal/ui/d-list-item-separator-reflowable.ts"],"names":[],"mappings":"AAAA;;;GAGG;;AAEH,OAAO,EAAE,QAAQ,EAAE,MAAM,SAAS,CAAC;AAGnC;IAAkD,gDAAQ;IACzD,sCAAa,IAAW;QAAxB,YACC,iBAAO,SAGP;QAFA,IAAI,CAAC,gBAAgB,CAAE,KAAI,EAAE,IAAI,CAAE,CAAC;QACpC,IAAI,CAAC,aAAa,CAAE,KAAI,CAAE,CAAC;;IAC5B,CAAC;IAED,+CAAQ,GAAR,UAAU,IAAW,EAAE,KAAa,EAAE,MAAc;QACnD,IAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QACzB,IAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;QAC3B,IAAM,WAAW,GAAG,MAAM,CAAC,QAAQ,CAAE,KAAK,CAAE,CAAC;QAC7C,IAAM,WAAW,GAAG,MAAM,CAAC,QAAQ,CAAE,KAAK,CAAE,CAAC;QAC7C,IAAI,WAAW,IAAI,IAAI,EAAG;YACzB,IAAM,WAAW,GAAG,MAAM,CAAC,QAAQ,CAAE,KAAK,CAAE,CAAC;YAC7C,IAAM,WAAW,GAAG,MAAM,CAAC,QAAQ,CAAE,KAAK,CAAE,CAAC;YAC7C,IAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;YAC7B,IAAM,MAAM,GAAG,MAAM,GAAG,GAAG,CAAC;YAC5B,IAAI,CAAC,KAAK,EAAE,CAAC;YACb,IAAI,CAAC,SAAS,CAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,CAAE,CAAC;YACrE,IAAI,CAAC,MAAM,CAAE,OAAO,CAAC,OAAO,EAAE,EAAE,MAAM,CAAE,CAAC;YACzC,IAAI,CAAC,MAAM,CAAE,KAAK,GAAG,OAAO,CAAC,QAAQ,EAAE,EAAE,MAAM,CAAE,CAAC;YAClD,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;SACpB;aAAM;YACN,IAAI,CAAC,KAAK,EAAE,CAAC;YACb,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;SACrB;IACF,CAAC;IACF,mCAAC;AAAD,CAAC,AA3BD,CAAkD,QAAQ,GA2BzD","sourcesContent":["/*\r\n * Copyright (C) 2019 Toshiba Corporation\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { Graphics } from \"pixi.js\";\r\nimport { DBase, DReflowable } from \"./d-base\";\r\n\r\nexport class DListItemSeparatorReflowable extends Graphics implements DReflowable {\r\n\tconstructor( base: DBase ) {\r\n\t\tsuper();\r\n\t\tbase.appendRenderable( this, true );\r\n\t\tbase.addReflowable( this );\r\n\t}\r\n\r\n\tonReflow( base: DBase, width: number, height: number ): void {\r\n\t\tconst state = base.state;\r\n\t\tconst border = base.border;\r\n\t\tconst borderWidth = border.getWidth( state );\r\n\t\tconst borderColor = border.getColor( state );\r\n\t\tif( borderColor != null ) {\r\n\t\t\tconst borderAlpha = border.getAlpha( state );\r\n\t\t\tconst borderAlign = border.getAlign( state );\r\n\t\t\tconst padding = base.padding;\r\n\t\t\tconst middle = height * 0.5;\r\n\t\t\tthis.clear();\r\n\t\t\tthis.lineStyle( borderWidth, borderColor, borderAlpha, borderAlign );\r\n\t\t\tthis.moveTo( padding.getLeft(), middle );\r\n\t\t\tthis.lineTo( width - padding.getRight(), middle );\r\n\t\t\tthis.visible = true;\r\n\t\t} else {\r\n\t\t\tthis.clear();\r\n\t\t\tthis.visible = false;\r\n\t\t}\r\n\t}\r\n}\r\n"]}