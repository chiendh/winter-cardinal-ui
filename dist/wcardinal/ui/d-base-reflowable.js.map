{"version":3,"file":"d-base-reflowable.js","sourceRoot":"","sources":["../../../src/main/typescript/wcardinal/ui/d-base-reflowable.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (C) 2019 Toshiba Corporation\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { DBase, DReflowable } from \"./d-base\";\r\nimport { DBaseBackgroundMesh } from \"./d-base-background-mesh\";\r\nimport { DBaseBorderMesh } from \"./d-base-border-mesh\";\r\nimport { DBaseOutlineMesh } from \"./d-base-outline-mesh\";\r\n\r\nexport class DBaseReflowable implements DReflowable {\r\n\tprotected _lastBackgroundCornerRadius: number;\r\n\tprotected _lastBorderCornerRadius: number;\r\n\tprotected _lastBorderWidth: number;\r\n\tprotected _lastOutlineCornerRadius: number;\r\n\tprotected _lastOutlineWidth: number;\r\n\tprotected _backgroundPlane: DBaseBackgroundMesh;\r\n\tprotected _borderPlane: DBaseBorderMesh;\r\n\tprotected _outlinePlane: DBaseOutlineMesh;\r\n\r\n\tconstructor( base: DBase ) {\r\n\t\tconst theme = base.theme;\r\n\t\tconst corner = base.corner;\r\n\t\tconst cornerRadius = corner.getRadius();\r\n\t\tconst cornerHeight = cornerRadius + 1;\r\n\t\tconst cornerMask = corner.getMask();\r\n\t\tconst backgroundPlane = this._backgroundPlane = new DBaseBackgroundMesh(\r\n\t\t\ttheme.getBackgroundTexture( cornerRadius ),\r\n\t\t\tcornerHeight, cornerMask\r\n\t\t);\r\n\t\tbase.appendRenderable( backgroundPlane, true );\r\n\r\n\t\tconst state = base.state;\r\n\r\n\t\tconst border = base.border;\r\n\t\tconst borderWidth = border.getWidth( state );\r\n\t\tconst borderMask = border.getMask( state );\r\n\t\tconst borderPlane = this._borderPlane = new DBaseBorderMesh(\r\n\t\t\ttheme.getBorderTexture( cornerRadius, borderWidth ),\r\n\t\t\tcornerHeight,\r\n\t\t\tborderMask,\r\n\t\t\tcornerMask\r\n\t\t);\r\n\t\tbase.appendRenderable( borderPlane, false );\r\n\r\n\t\tconst outline = base.outline;\r\n\t\tconst outlineWidth = outline.getWidth( state );\r\n\t\tconst outlineMask = outline.getMask( state );\r\n\t\tconst outlinePlane = this._outlinePlane = new DBaseOutlineMesh(\r\n\t\t\ttheme.getBorderTexture( cornerRadius, outlineWidth ),\r\n\t\t\tcornerHeight,\r\n\t\t\toutlineMask,\r\n\t\t\tcornerMask\r\n\t\t);\r\n\t\tbase.appendRenderable( outlinePlane, false );\r\n\r\n\t\tthis._lastBackgroundCornerRadius = cornerRadius;\r\n\t\tthis._lastBorderCornerRadius = cornerRadius;\r\n\t\tthis._lastBorderWidth = borderWidth;\r\n\t\tthis._lastOutlineCornerRadius = cornerRadius;\r\n\t\tthis._lastOutlineWidth = outlineWidth;\r\n\r\n\t\tbase.addReflowable( this );\r\n\t}\r\n\r\n\tonReflow( base: DBase, width: number, height: number ): void {\r\n\t\tconst theme = base.theme;\r\n\t\tconst state = base.state;\r\n\t\tconst corner = base.corner;\r\n\t\tconst cornerRadius = corner.getRadius();\r\n\t\tconst cornerHeight = cornerRadius + 1;\r\n\t\tconst cornerMask = corner.getMask();\r\n\r\n\t\t// Background\r\n\t\tconst background = base.background;\r\n\t\tconst backgroundPlane = this._backgroundPlane;\r\n\t\tconst backgroundColor = background.getColor( state );\r\n\t\tif( backgroundColor != null ) {\r\n\t\t\tconst backgroundAlpha = background.getAlpha( state );\r\n\t\t\tif( 0 < backgroundAlpha ) {\r\n\t\t\t\tif( this._lastBackgroundCornerRadius !== cornerRadius ) {\r\n\t\t\t\t\tthis._lastBackgroundCornerRadius = cornerRadius;\r\n\t\t\t\t\tbackgroundPlane.texture = theme.getBackgroundTexture( cornerRadius );\r\n\t\t\t\t\tbackgroundPlane.borderSize = cornerHeight;\r\n\t\t\t\t}\r\n\t\t\t\tbackgroundPlane.tint = backgroundColor;\r\n\t\t\t\tbackgroundPlane.alpha = backgroundAlpha;\r\n\t\t\t\tbackgroundPlane.width = width;\r\n\t\t\t\tbackgroundPlane.height = height;\r\n\t\t\t\tbackgroundPlane.cornerMask = cornerMask;\r\n\t\t\t\tbackgroundPlane.visible = true;\r\n\t\t\t} else {\r\n\t\t\t\tbackgroundPlane.visible = false;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tbackgroundPlane.visible = false;\r\n\t\t}\r\n\r\n\t\t// Border\r\n\t\tconst border = base.border;\r\n\t\tconst borderPlane = this._borderPlane;\r\n\t\tconst borderColor = border.getColor( state );\r\n\t\tif( borderColor != null ) {\r\n\t\t\tconst borderAlpha = border.getAlpha( state );\r\n\t\t\tif( 0 < borderAlpha ) {\r\n\t\t\t\tconst borderWidth = border.getWidth( state );\r\n\t\t\t\tif( this._lastBorderCornerRadius !== cornerRadius || this._lastBorderWidth !== borderWidth ) {\r\n\t\t\t\t\tthis._lastBorderCornerRadius = cornerRadius;\r\n\t\t\t\t\tthis._lastBorderWidth = borderWidth;\r\n\t\t\t\t\tborderPlane.texture = theme.getBorderTexture( cornerRadius, borderWidth );\r\n\t\t\t\t\tborderPlane.borderSize = cornerHeight;\r\n\t\t\t\t}\r\n\t\t\t\tconst borderAlign = border.getAlign( state );\r\n\t\t\t\tconst borderMask = border.getMask( state );\r\n\t\t\t\tborderPlane.tint = borderColor;\r\n\t\t\t\tborderPlane.alpha = borderAlpha;\r\n\t\t\t\tconst borderOffset = borderAlign * borderWidth;\r\n\t\t\t\tborderPlane.x = -borderOffset;\r\n\t\t\t\tborderPlane.y = -borderOffset;\r\n\t\t\t\tborderPlane.width = width + borderOffset * 2;\r\n\t\t\t\tborderPlane.height = height + borderOffset * 2;\r\n\t\t\t\tborderPlane.borderMask = borderMask;\r\n\t\t\t\tborderPlane.cornerMask = cornerMask;\r\n\t\t\t\tborderPlane.visible = true;\r\n\t\t\t} else {\r\n\t\t\t\tborderPlane.visible = false;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tborderPlane.visible = false;\r\n\t\t}\r\n\r\n\t\t// Outline\r\n\t\tconst outline = base.outline;\r\n\t\tconst outlinePlane = this._outlinePlane;\r\n\t\tconst outlineColor = outline.getColor( state );\r\n\t\tif( outlineColor != null ) {\r\n\t\t\tconst outlineAlpha = outline.getAlpha( state );\r\n\t\t\tif( 0 < outlineAlpha ) {\r\n\t\t\t\tconst outlineWidth = outline.getWidth( state );\r\n\t\t\t\tif( this._lastOutlineCornerRadius !== cornerRadius || this._lastOutlineWidth !== outlineWidth ) {\r\n\t\t\t\t\tthis._lastOutlineCornerRadius = cornerRadius;\r\n\t\t\t\t\tthis._lastOutlineWidth = outlineWidth;\r\n\t\t\t\t\toutlinePlane.texture = theme.getBorderTexture( cornerRadius, outlineWidth );\r\n\t\t\t\t\toutlinePlane.borderSize = cornerHeight;\r\n\t\t\t\t}\r\n\t\t\t\tconst outlineMask = outline.getMask( state );\r\n\t\t\t\tconst outlineOffset = outline.getOffset( state );\r\n\t\t\t\tconst outlineAlign = outline.getAlign( state );\r\n\t\t\t\toutlinePlane.tint = outlineColor;\r\n\t\t\t\toutlinePlane.alpha = outlineAlpha;\r\n\t\t\t\tconst outlineOffsetAccumulative = outlineOffset + outlineAlign * outlineWidth;\r\n\t\t\t\toutlinePlane.x = -outlineOffsetAccumulative;\r\n\t\t\t\toutlinePlane.y = -outlineOffsetAccumulative;\r\n\t\t\t\toutlinePlane.width = width + outlineOffsetAccumulative * 2;\r\n\t\t\t\toutlinePlane.height = height + outlineOffsetAccumulative * 2;\r\n\t\t\t\toutlinePlane.borderMask = outlineMask;\r\n\t\t\t\toutlinePlane.cornerMask = cornerMask;\r\n\t\t\t\toutlinePlane.visible = true;\r\n\t\t\t} else {\r\n\t\t\t\toutlinePlane.visible = false;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\toutlinePlane.visible = false;\r\n\t\t}\r\n\t}\r\n}\r\n"]}