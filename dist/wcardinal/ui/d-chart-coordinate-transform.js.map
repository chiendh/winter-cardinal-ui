{"version":3,"file":"d-chart-coordinate-transform.js","sourceRoot":"","sources":["../../../src/main/typescript/wcardinal/ui/d-chart-coordinate-transform.ts"],"names":[],"mappings":"","sourcesContent":["import { DChartCoordinateDirection } from \"./d-chart-coordinate\";\r\nimport { DChartCoordinateContainerSub } from \"./d-chart-coordinate-container-sub\";\r\nimport { DChartCoordinateTransformMark } from \"./d-chart-coordinate-transform-mark\";\r\n\r\nexport interface DThemeChartCoordinateTransform {\r\n\t/**\r\n\t * Returns true if the specified value is too close to zero.\r\n\t *\r\n\t * @param value a value to be checked\r\n\t */\r\n\tisZero( value: number ): boolean;\r\n}\r\n\r\nexport interface DChartCoordinateTransform {\r\n\t/**\r\n\t * Monotonic increasing ID for change detection.\r\n\t */\r\n\treadonly id: number;\r\n\r\n\t/**\r\n\t * Translation amount\r\n\t */\r\n\ttranslate: number;\r\n\r\n\t/**\r\n\t * Scale\r\n\t */\r\n\tscale: number;\r\n\r\n\tset( translate?: number, scale?: number ): void;\r\n\r\n\tblend( ratio: number, target: DChartCoordinateTransformMark ): void;\r\n\r\n\tbind( container: DChartCoordinateContainerSub, direction: DChartCoordinateDirection ): void;\r\n\tunbind(): void;\r\n\r\n\t/**\r\n\t * Transforms the given untransformed value to a transformed value.\r\n\t *\r\n\t * @param value an untransformed value\r\n\t */\r\n\tmap( value: number ): number;\r\n\r\n\t/**\r\n\t * Transforms the given untransformed values to transformed values.\r\n\t * Numbers whose indices are ifrom + i * stride + offset and less than iend will be transformed.\r\n\t * Here, i is a non-negative integer.\r\n\t *\r\n\t * @param values untransformed values to be transformed\r\n\t * @param ifrom an index on raw values at which to begin a transformation\r\n\t * @param iend an index on raw values before which to end a transformation\r\n\t * @param stride a stride of indices\r\n\t * @param offset an offset of indices\r\n\t */\r\n\tmapAll( values: number[], ifrom: number, iend: number, stride: number, offset: number ): void;\r\n\r\n\t/**\r\n\t * Transforms the given transformed value to an untransformed value.\r\n\t *\r\n\t * @param value a transformed value\r\n\t */\r\n\tunmap( value: number ): number;\r\n\r\n\t/**\r\n\t * Transformed the given transformed values to untransformed values.\r\n\t * Numbers whose indices are ifrom + i * stride + offset and less than iend will be transformed.\r\n\t * Here, i is a non-negative integer.\r\n\t *\r\n\t * @param values transformed values to be transformed.\r\n\t * @param ifrom an index on raw values at which to begin a transformation\r\n\t * @param iend an index on raw values before which to end a transformation\r\n\t * @param stride a stride of indices\r\n\t * @param offset an offset of indices\r\n\t */\r\n\tunmapAll( values: number[], ifrom: number, iend: number, stride: number, offset: number ): void;\r\n}\r\n"]}