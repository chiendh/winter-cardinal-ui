{"version":3,"file":"d-button-color.js","sourceRoot":"","sources":["../../../src/main/typescript/wcardinal/ui/d-button-color.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (C) 2019 Toshiba Corporation\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { DApplications } from \"./d-applications\";\r\nimport { DBaseState } from \"./d-base-state\";\r\nimport { DButton, DButtonOnOptions, DButtonOptions, DThemeButton } from \"./d-button\";\r\nimport { DColorAndAlpha } from \"./d-color\";\r\nimport { DDialogColor, DDialogColorOptions } from \"./d-dialog-color\";\r\nimport { DImagePieceOptions, DImagePieceTintOptions } from \"./d-image-piece\";\r\nimport { DPickerColorAndAlpha } from \"./d-picker-color-and-alpha\";\r\n\r\n/**\r\n * Mappings of event names and handlers.\r\n */\r\nexport interface DButtonColorOnOptions extends DButtonOnOptions<DColorAndAlpha> {\r\n\t/**\r\n\t * Triggered when a selection is changed.\r\n\t *\r\n\t * @param newValue a newly selected value\r\n\t * @param oldValue a previously selected value\r\n\t * @param self a button\r\n\t */\r\n\tchange?: ( newValue: DColorAndAlpha, oldValue: DColorAndAlpha, self: any ) => void;\r\n}\r\n\r\nexport interface DButtonColorOptions<\r\n\tTHEME extends DThemeButtonColor = DThemeButtonColor\r\n> extends DButtonOptions<DColorAndAlpha, THEME> {\r\n\t/**\r\n\t * A dialog to pick a color.\r\n\t */\r\n\tdialog?: DDialogColorOptions;\r\n\r\n\ton?: DButtonColorOnOptions;\r\n}\r\n\r\nexport interface DThemeButtonColor extends DThemeButton {\r\n\tgetTextFormatter(): ( value: DColorAndAlpha, caller: DButtonColor ) => string;\r\n\tgetTextValue( state: DBaseState ): DColorAndAlpha;\r\n\tnewTextValue(): DColorAndAlpha;\r\n}\r\n\r\nexport class DButtonColor<\r\n\tTHEME extends DThemeButtonColor = DThemeButtonColor,\r\n\tOPTIONS extends DButtonColorOptions<THEME> = DButtonColorOptions<THEME>\r\n> extends DButton<DColorAndAlpha, THEME, OPTIONS> {\r\n\tprotected static DIALOG?: DDialogColor;\r\n\tprotected _dialog?: DDialogColor;\r\n\tprotected _value!: DPickerColorAndAlpha;\r\n\r\n\tprotected init( options?: OPTIONS ) {\r\n\t\tsuper.init( options );\r\n\r\n\t\tconst colorAndAlpha = this._textValueComputed;\r\n\t\tthis._value = new DPickerColorAndAlpha( colorAndAlpha, ( color: number ): void => {\r\n\t\t\tcolorAndAlpha.color = color;\r\n\t\t\tthis.onColorChange();\r\n\t\t}, ( alpha: number ): void => {\r\n\t\t\tcolorAndAlpha.alpha = alpha;\r\n\t\t\tthis.updateTextForcibly();\r\n\t\t});\r\n\r\n\t\tthis.on( \"active\", (): void => {\r\n\t\t\tconst dialog = this.dialog;\r\n\t\t\tdialog.current.color = colorAndAlpha.color;\r\n\t\t\tdialog.current.alpha = colorAndAlpha.alpha;\r\n\t\t\tdialog.new.color = colorAndAlpha.color;\r\n\t\t\tdialog.new.alpha = colorAndAlpha.alpha;\r\n\t\t\tdialog.open().then((): void => {\r\n\t\t\t\tconst dialogNew = dialog.new;\r\n\t\t\t\tconst dialogCurrent = dialog.current;\r\n\t\t\t\tcolorAndAlpha.color = dialogNew.color;\r\n\t\t\t\tcolorAndAlpha.alpha = dialogNew.alpha;\r\n\t\t\t\tthis.onColorChange();\r\n\t\t\t\tthis.emit( \"change\", dialogNew, dialogCurrent, this );\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\tprotected toImageTintOptions( tint?: DImagePieceTintOptions ): DImagePieceTintOptions {\r\n\t\tconst color = () => this._textValueComputed.color;\r\n\t\tif( tint ) {\r\n\t\t\treturn {\r\n\t\t\t\tcolor: tint.color || color,\r\n\t\t\t\talpha: tint.alpha\r\n\t\t\t};\r\n\t\t}\r\n\t\treturn {\r\n\t\t\tcolor\r\n\t\t};\r\n\t}\r\n\r\n\tprotected toImageOptions( theme: THEME, options?: DImagePieceOptions ): DImagePieceOptions | undefined {\r\n\t\tif( options ) {\r\n\t\t\treturn {\r\n\t\t\t\tsource: options.source,\r\n\t\t\t\ttint: this.toImageTintOptions( options.tint ),\r\n\t\t\t\talign: options.align,\r\n\t\t\t\tmargin: options.margin\r\n\t\t\t};\r\n\t\t}\r\n\t\treturn {\r\n\t\t\ttint: this.toImageTintOptions()\r\n\t\t};\r\n\t}\r\n\r\n\tprotected onColorChange(): void {\r\n\t\tif( this._images[ 0 ].updateTint() ) {\r\n\t\t\tDApplications.update( this );\r\n\t\t}\r\n\t\tthis.updateTextForcibly();\r\n\t}\r\n\r\n\tprotected updateTextForcibly(): void {\r\n\t\tthis.onTextChange();\r\n\t\tthis.createOrUpdateText();\r\n\t}\r\n\r\n\tget dialog(): DDialogColor {\r\n\t\tlet dialog = this._dialog;\r\n\t\tif( dialog == null ) {\r\n\t\t\tconst options = this._options;\r\n\t\t\tconst dialogOptions = options && options.dialog;\r\n\t\t\tif( dialogOptions != null ) {\r\n\t\t\t\tdialog = new DDialogColor( dialogOptions );\r\n\t\t\t} else {\r\n\t\t\t\tif( DButtonColor.DIALOG == null ) {\r\n\t\t\t\t\tDButtonColor.DIALOG = new DDialogColor();\r\n\t\t\t\t}\r\n\t\t\t\tdialog = DButtonColor.DIALOG;\r\n\t\t\t}\r\n\t\t\tthis._dialog = dialog;\r\n\t\t}\r\n\t\treturn dialog;\r\n\t}\r\n\r\n\tget value(): DColorAndAlpha {\r\n\t\treturn this._value;\r\n\t}\r\n\r\n\tprotected getType(): string {\r\n\t\treturn \"DButtonColor\";\r\n\t}\r\n}\r\n"]}