{"version":3,"file":"d-table-data-sorter-tree.js","sourceRoot":"","sources":["../../../src/main/typescript/wcardinal/ui/d-table-data-sorter-tree.ts"],"names":[],"mappings":"AAAA;;;GAGG;;AAEH,OAAO,EAAE,KAAK,EAAE,MAAM,SAAS,CAAC;AAChC,OAAO,EAEN,eAAe,EACf,MAAM,uBAAuB,CAAC;AAE/B;IAAgD,wCAAkB;IACjE;eACC,iBAAO;IACR,CAAC;IAED,sBAAI,oCAAE;aAAN;YACC,OAAO,CAAC,CAAC;QACV,CAAC;;;OAAA;IAED,sBAAI,uCAAK;aAAT;YACC,OAAO,eAAe,CAAC,SAAS,CAAC;QAClC,CAAC;aAED,UAAW,KAAsB;YAChC,aAAa;QACd,CAAC;;;OAJA;IAMD,oCAAK,GAAL;QACC,aAAa;IACd,CAAC;IAED,sCAAO,GAAP;QACC,aAAa;IACd,CAAC;IAED,wCAAS,GAAT;QACC,OAAO,KAAK,CAAC;IACd,CAAC;IAED,kCAAG,GAAH;QACC,OAAO,IAAI,CAAC;IACb,CAAC;IAED,kCAAG,GAAH,UAAK,UAAwF;QAC5F,aAAa;IACd,CAAC;IAED,sCAAO,GAAP;QACC,aAAa;IACd,CAAC;IAED,qCAAM,GAAN;QACC,aAAa;IACd,CAAC;IAED,sBAAI,yCAAO;aAAX;YACC,OAAO,IAAI,CAAC;QACb,CAAC;;;OAAA;IAED,kCAAG,GAAH,UAAK,aAAqB;QACzB,OAAO,aAAa,CAAC;IACtB,CAAC;IAED,oCAAK,GAAL,UAAO,KAAa;QACnB,OAAO,KAAK,CAAC;IACd,CAAC;IACF,2BAAC;AAAD,CAAC,AAxDD,CAAgD,KAAK,CAAC,YAAY,GAwDjE","sourcesContent":["/*\r\n * Copyright (C) 2019 Toshiba Corporation\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { utils } from \"pixi.js\";\r\nimport {\r\n\tDTableDataComparatorFunction, DTableDataComparatorObject,\r\n\tDTableDataOrder, DTableDataSorter\r\n} from \"./d-table-data-sorter\";\r\n\r\nexport class DTableDataSorterTree<NODE> extends utils.EventEmitter implements DTableDataSorter<NODE> {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t}\r\n\r\n\tget id(): number {\r\n\t\treturn 0;\r\n\t}\r\n\r\n\tget order(): DTableDataOrder {\r\n\t\treturn DTableDataOrder.ASCENDING;\r\n\t}\r\n\r\n\tset order( order: DTableDataOrder ) {\r\n\t\t// DO NOTHING\r\n\t}\r\n\r\n\tapply(): void {\r\n\t\t// DO NOTHING\r\n\t}\r\n\r\n\tunapply(): void {\r\n\t\t// DO NOTHING\r\n\t}\r\n\r\n\tisApplied(): boolean {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tget(): DTableDataComparatorFunction<NODE> | DTableDataComparatorObject<NODE> | null {\r\n\t\treturn null;\r\n\t}\r\n\r\n\tset( comparator: DTableDataComparatorFunction<NODE> | DTableDataComparatorObject<NODE> | null ): void {\r\n\t\t// DO NOTHING\r\n\t}\r\n\r\n\ttoDirty(): void {\r\n\t\t// DO NOTHING\r\n\t}\r\n\r\n\tupdate(): void {\r\n\t\t// DO NOTHING\r\n\t}\r\n\r\n\tget indices(): number[] | null {\r\n\t\treturn null;\r\n\t}\r\n\r\n\tmap( unmappedIndex: number ): number | null {\r\n\t\treturn unmappedIndex;\r\n\t}\r\n\r\n\tunmap( index: number ): number {\r\n\t\treturn index;\r\n\t}\r\n}\r\n"]}