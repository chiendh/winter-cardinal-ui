{"version":3,"file":"d-dynamic-text-geometry.js","sourceRoot":"","sources":["../../../src/main/typescript/wcardinal/ui/d-dynamic-text-geometry.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (C) 2019 Toshiba Corporation\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { MeshGeometry } from \"pixi.js\";\r\nimport { DDynamicTextMeasure } from \"./d-dynamic-text-measure\";\r\nimport { DynamicFontAtlas } from \"./util/dynamic-font-atlas\";\r\nimport { DynamicFontAtlasCharacter } from \"./util/dynamic-font-atlas-character\";\r\n\r\nexport class DDynamicTextGeometry extends MeshGeometry {\r\n\twidth: number;\r\n\theight: number;\r\n\tclipped: boolean;\r\n\r\n\tconstructor() {\r\n\t\tsuper( new Float32Array( 64 ), new Float32Array( 64 ), new Uint16Array( 48 ) );\r\n\t\tthis.width = 0;\r\n\t\tthis.height = 0;\r\n\t\tthis.clipped = false;\r\n\t}\r\n\r\n\tupdate( text: string, atlas: DynamicFontAtlas | null, clippingWidth: number | undefined ): void {\r\n\t\tconst vertexBuffer = this.getBuffer( \"aVertexPosition\" );\r\n\t\tconst uvBuffer = this.getBuffer( \"aTextureCoord\" );\r\n\t\tconst indexBuffer = this.getIndex();\r\n\r\n\t\tconst result = DDynamicTextMeasure.measure( text, atlas, clippingWidth );\r\n\t\tconst requiredTextSize = Math.ceil( result.count / 8 ) << 3;\r\n\t\tconst requiredVertexSize = requiredTextSize << 3;\r\n\t\tif( (vertexBuffer.data as Float32Array).length < requiredVertexSize ) {\r\n\t\t\tvertexBuffer.data = new Float32Array( requiredVertexSize );\r\n\t\t\tuvBuffer.data = new Float32Array( requiredVertexSize );\r\n\t\t}\r\n\t\tconst requiredIndexSize = requiredTextSize * 6;\r\n\t\tif( (indexBuffer.data as Uint16Array).length < requiredIndexSize ) {\r\n\t\t\tindexBuffer.data = new Uint16Array( requiredIndexSize );\r\n\t\t}\r\n\r\n\t\tconst vertices = vertexBuffer.data as Float32Array;\r\n\t\tconst uvs = uvBuffer.data as Float32Array;\r\n\t\tconst indices = indexBuffer.data as Uint16Array;\r\n\r\n\t\tif( atlas != null ) {\r\n\t\t\tconst count = result.count;\r\n\t\t\tconst characters = result.characters;\r\n\t\t\tfor( let i = 0; i < count; ++i ) {\r\n\t\t\t\tconst character = characters[ i ];\r\n\t\t\t\tthis.writeCharacter(\r\n\t\t\t\t\tvertices, uvs, indices,\r\n\t\t\t\t\ti, character.x, character.y,\r\n\t\t\t\t\tcharacter.character, atlas.width, atlas.height\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\tfor( let i = count, imax = vertices.length >> 3; i < imax; ++i ) {\r\n\t\t\t\tthis.writeCharacterEmpty( vertices, uvs, indices, i );\r\n\t\t\t}\r\n\t\t\tthis.width = result.width;\r\n\t\t\tthis.height = result.height;\r\n\t\t\tthis.clipped = result.clipped;\r\n\t\t} else {\r\n\t\t\tfor( let i = 0, imax = vertices.length >> 3; i < imax; ++i ) {\r\n\t\t\t\tthis.writeCharacterEmpty( vertices, uvs, indices, i );\r\n\t\t\t}\r\n\t\t\tthis.width = 0;\r\n\t\t\tthis.height = 0;\r\n\t\t\tthis.clipped = false;\r\n\t\t}\r\n\r\n\t\tvertexBuffer.update();\r\n\t\tuvBuffer.update();\r\n\t\tindexBuffer.update();\r\n\t}\r\n\r\n\tprotected writeCharacter(\r\n\t\tvertices: Float32Array, uvs: Float32Array, indices: Uint16Array,\r\n\t\tindex: number, x: number, y: number,\r\n\t\tcharacter: DynamicFontAtlasCharacter,\r\n\t\twidth: number, height: number\r\n\t): void {\r\n\t\tconst offsetX = character.x - character.origin.x;\r\n\t\tconst offsetY = 0;\r\n\r\n\t\tconst iv = index << 3;\r\n\t\tvertices[ iv + 0 ] = x + offsetX;\r\n\t\tvertices[ iv + 1 ] = y + offsetY;\r\n\t\tvertices[ iv + 2 ] = x + offsetX + character.width;\r\n\t\tvertices[ iv + 3 ] = y + offsetY;\r\n\t\tvertices[ iv + 4 ] = x + offsetX + character.width;\r\n\t\tvertices[ iv + 5 ] = y + offsetY + character.height;\r\n\t\tvertices[ iv + 6 ] = x + offsetX;\r\n\t\tvertices[ iv + 7 ] = y + offsetY + character.height;\r\n\r\n\t\tconst x0 = character.x / width;\r\n\t\tconst y0 = character.y / height;\r\n\t\tconst x1 = ( character.x + character.width ) / width;\r\n\t\tconst y1 = ( character.y + character.height ) / height;\r\n\t\tuvs[ iv + 0 ] = x0;\r\n\t\tuvs[ iv + 1 ] = y0;\r\n\t\tuvs[ iv + 2 ] = x1;\r\n\t\tuvs[ iv + 3 ] = y0;\r\n\t\tuvs[ iv + 4 ] = x1;\r\n\t\tuvs[ iv + 5 ] = y1;\r\n\t\tuvs[ iv + 6 ] = x0;\r\n\t\tuvs[ iv + 7 ] = y1;\r\n\r\n\t\tconst ii = index * 6;\r\n\t\tconst vo = index << 2;\r\n\t\tindices[ ii + 0 ] = vo + 0;\r\n\t\tindices[ ii + 1 ] = vo + 1;\r\n\t\tindices[ ii + 2 ] = vo + 3;\r\n\t\tindices[ ii + 3 ] = vo + 1;\r\n\t\tindices[ ii + 4 ] = vo + 2;\r\n\t\tindices[ ii + 5 ] = vo + 3;\r\n\t}\r\n\r\n\tprotected writeCharacterEmpty(\r\n\t\tvertices: Float32Array, uvs: Float32Array, indices: Uint16Array,\r\n\t\tindex: number\r\n\t): void {\r\n\t\tconst iv = index << 3;\r\n\t\tvertices[ iv + 0 ] = 0;\r\n\t\tvertices[ iv + 1 ] = 0;\r\n\t\tvertices[ iv + 2 ] = 0;\r\n\t\tvertices[ iv + 3 ] = 0;\r\n\t\tvertices[ iv + 4 ] = 0;\r\n\t\tvertices[ iv + 5 ] = 0;\r\n\t\tvertices[ iv + 6 ] = 0;\r\n\t\tvertices[ iv + 7 ] = 0;\r\n\r\n\t\tuvs[ iv + 0 ] = 0;\r\n\t\tuvs[ iv + 1 ] = 0;\r\n\t\tuvs[ iv + 2 ] = 0;\r\n\t\tuvs[ iv + 3 ] = 0;\r\n\t\tuvs[ iv + 4 ] = 0;\r\n\t\tuvs[ iv + 5 ] = 0;\r\n\t\tuvs[ iv + 6 ] = 0;\r\n\t\tuvs[ iv + 7 ] = 0;\r\n\r\n\t\tconst ii = index * 6;\r\n\t\tconst vo = index << 2;\r\n\t\tindices[ ii + 0 ] = vo + 0;\r\n\t\tindices[ ii + 1 ] = vo + 1;\r\n\t\tindices[ ii + 2 ] = vo + 3;\r\n\t\tindices[ ii + 3 ] = vo + 1;\r\n\t\tindices[ ii + 4 ] = vo + 2;\r\n\t\tindices[ ii + 5 ] = vo + 3;\r\n\t}\r\n}\r\n"]}