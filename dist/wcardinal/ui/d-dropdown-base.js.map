{"version":3,"file":"d-dropdown-base.js","sourceRoot":"","sources":["../../../src/main/typescript/wcardinal/ui/d-dropdown-base.ts"],"names":[],"mappings":"AAAA;;;GAGG;;AAGH,OAAO,EAAE,WAAW,EAA8D,MAAM,iBAAiB,CAAC;AAC1G,OAAO,EAAE,KAAK,EAA4B,MAAM,UAAU,CAAC;AAG3D,OAAO,EAAE,QAAQ,EAAE,MAAM,kBAAkB,CAAC;AA+B5C;IAKU,iCAAuC;IAGhD,uBAAa,OAAiB;QAA9B,YACC,kBAAO,OAAO,CAAE,SAKhB;QAHA,KAAI,CAAC,EAAE,CAAE,QAAQ,EAAE;YAClB,KAAI,CAAC,KAAK,EAAE,CAAC;QACd,CAAC,CAAC,CAAC;;IACJ,CAAC;IAES,kCAAU,GAApB,UAAsB,IAA6B;QAClD,IAAI,IAAI,EAAG;YACV,IAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;YACvB,IAAI,QAAQ,CAAE,IAAI,CAAE,EAAG;gBACtB,OAAO,IAAI,CAAC;aACZ;iBAAM,IAAI,IAAI,IAAI,IAAI,EAAG;gBACzB,IAAM,QAAQ,GAAG,IAAI,CAAE,IAAI,CAAC,KAAK,CAAE,CAAC;gBACpC,IAAI,QAAQ,IAAI,IAAI,EAAG;oBACtB,OAAO,QAAQ,CAAC;iBAChB;aACD;SACD;QACD,OAAO,IAAI,CAAC;IACb,CAAC;IAES,8BAAM,GAAhB,UAAkB,KAAY,EAAE,OAAiB;QAChD,IAAM,IAAI,GAAG,OAAO,IAAI,OAAO,CAAC,IAAI,CAAC;QACrC,OAAO,CAAE,IAAI,YAAY,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;YACtC,IAAI,KAAK,CAAS,IAAI,CAAC,aAAa,CAAE,KAAK,EAAE,IAAI,CAAE,CAAE,CACrD,CAAC;IACH,CAAC;IAES,qCAAa,GAAvB,UAAyB,KAAY,EAAE,OAA6B;QACnE,OAAO,GAAG,OAAO,IAAI,EAAE,CAAC;QACxB,IAAI,OAAO,CAAC,GAAG,IAAI,IAAI,EAAG;YACzB,OAAO,CAAC,GAAG,GAAG,IAAI,CAAC;SACnB;QACD,OAAO,OAAO,CAAC;IAChB,CAAC;IAED,sBAAI,+BAAI;aAAR;YACC,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC;YACtB,IAAI,IAAI,IAAI,IAAI,EAAG;gBAClB,IAAI,GAAG,IAAI,CAAC,MAAM,CAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAE,CAAC;gBAChD,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;aAClB;YACD,OAAO,IAAI,CAAC;QACb,CAAC;;;OAAA;IAES,+BAAO,GAAjB;QACC,OAAO,eAAe,CAAC;IACxB,CAAC;IAED,6BAAK,GAAL;QACC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAE,IAAI,CAAE,CAAC;IACxB,CAAC;IAED,6BAAK,GAAL;QACC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC;IACnB,CAAC;IACF,oBAAC;AAAD,CAAC,AAlED,CAKU,WAAW,GA6DpB","sourcesContent":["/*\r\n * Copyright (C) 2019 Toshiba Corporation\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { DBaseState } from \"./d-base-state\";\r\nimport { DButtonBase, DButtonBaseOnOptions, DButtonBaseOptions, DThemeButtonBase } from \"./d-button-base\";\r\nimport { DMenu, DMenuOptions, DThemeMenu } from \"./d-menu\";\r\nimport { DMenuItem } from \"./d-menu-item\";\r\nimport { DStateAwareOrValueMightBe } from \"./d-state-aware\";\r\nimport { isString } from \"./util/is-string\";\r\n\r\nexport interface DDropdownBaseOnOptions<VALUE, TEXT_VALUE> extends DButtonBaseOnOptions<VALUE> {\r\n\r\n}\r\n\r\n/**\r\n * Dropdown base options.\r\n */\r\nexport interface DDropdownBaseOptions<\r\n\tVALUE = unknown,\r\n\tTEXT_VALUE = string,\r\n\tTHEME extends DThemeDropdownBase<TEXT_VALUE> = DThemeDropdownBase<TEXT_VALUE>\r\n> extends DButtonBaseOptions<TEXT_VALUE, THEME> {\r\n\t/**\r\n\t * Menu options.\r\n\t */\r\n\tmenu?: DMenuOptions<VALUE> | DMenu<VALUE>;\r\n\r\n\ton?: DDropdownBaseOnOptions<VALUE, TEXT_VALUE>;\r\n}\r\n\r\n/**\r\n * A Dropdown base theme.\r\n */\r\nexport interface DThemeDropdownBase<TEXT_VALUE> extends DThemeButtonBase {\r\n\tgetTextFormatter(): ( value: TEXT_VALUE, caller: DDropdownBase ) => string;\r\n\tgetTextValue( state: DBaseState ): TEXT_VALUE;\r\n\tnewTextValue(): DStateAwareOrValueMightBe<TEXT_VALUE>;\r\n}\r\n\r\nexport class DDropdownBase<\r\n\tVALUE = unknown,\r\n\tTEXT_VALUE = string,\r\n\tTHEME extends DThemeDropdownBase<TEXT_VALUE> = DThemeDropdownBase<TEXT_VALUE>,\r\n\tOPTIONS extends DDropdownBaseOptions<VALUE, TEXT_VALUE, THEME> = DDropdownBaseOptions<VALUE, TEXT_VALUE, THEME>\r\n> extends DButtonBase<TEXT_VALUE, THEME, OPTIONS> {\r\n\tprotected _menu?: DMenu<VALUE>;\r\n\r\n\tconstructor( options?: OPTIONS ) {\r\n\t\tsuper( options );\r\n\r\n\t\tthis.on( \"active\", (): void => {\r\n\t\t\tthis.start();\r\n\t\t});\r\n\t}\r\n\r\n\tprotected toItemText( item: DMenuItem<VALUE> | null ): string | null {\r\n\t\tif( item ) {\r\n\t\t\tconst text = item.text;\r\n\t\t\tif( isString( text ) ) {\r\n\t\t\t\treturn text;\r\n\t\t\t} else if( text != null ) {\r\n\t\t\t\tconst computed = text( item.state );\r\n\t\t\t\tif( computed != null ) {\r\n\t\t\t\t\treturn computed;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tprotected toMenu( theme: THEME, options?: OPTIONS ): DMenu<VALUE> {\r\n\t\tconst menu = options && options.menu;\r\n\t\treturn ( menu instanceof DMenu ? menu :\r\n\t\t\tnew DMenu<VALUE>( this.toMenuOptions( theme, menu ) )\r\n\t\t);\r\n\t}\r\n\r\n\tprotected toMenuOptions( theme: THEME, options?: DMenuOptions<VALUE> ): DMenuOptions<VALUE, DThemeMenu> {\r\n\t\toptions = options || {};\r\n\t\tif( options.fit == null ) {\r\n\t\t\toptions.fit = true;\r\n\t\t}\r\n\t\treturn options;\r\n\t}\r\n\r\n\tget menu(): DMenu<VALUE> {\r\n\t\tlet menu = this._menu;\r\n\t\tif( menu == null ) {\r\n\t\t\tmenu = this.toMenu( this.theme, this._options );\r\n\t\t\tthis._menu = menu;\r\n\t\t}\r\n\t\treturn menu;\r\n\t}\r\n\r\n\tprotected getType(): string {\r\n\t\treturn \"DDropdownBase\";\r\n\t}\r\n\r\n\tstart(): void {\r\n\t\tthis.menu.open( this );\r\n\t}\r\n\r\n\tclose(): void {\r\n\t\tthis.menu.close();\r\n\t}\r\n}\r\n"]}