{"version":3,"file":"d-diagram-layer-container.js","sourceRoot":"","sources":["../../../src/main/typescript/wcardinal/ui/d-diagram-layer-container.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (C) 2019 Toshiba Corporation\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { Container } from \"pixi.js\";\r\nimport { DApplications } from \"./d-applications\";\r\nimport { DDiagramLayer } from \"./d-diagram-layer\";\r\nimport { DDiagramSerializedItem, DDiagramSerializedLayer } from \"./d-diagram-serialized\";\r\nimport { EShapeResourceManagerSerialization } from \"./shape/e-shape-resource-manager-serialization\";\r\n\r\nexport class DDiagramLayerContainer extends Container {\r\n\tpublic children!: DDiagramLayer[];\r\n\tprotected _active: DDiagramLayer | null;\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis._active = null;\r\n\t\tthis.interactive = false;\r\n\t\tthis.interactiveChildren = false;\r\n\t}\r\n\r\n\tget active(): DDiagramLayer | null {\r\n\t\treturn this._active;\r\n\t}\r\n\r\n\tset active( layer: DDiagramLayer | null ) {\r\n\t\tif( this._active !== layer && (layer == null || 0 <= this.children.indexOf( layer )) ) {\r\n\t\t\tthis._active = layer;\r\n\t\t\tthis.emit( \"change\", this );\r\n\t\t}\r\n\t}\r\n\r\n\tcreate( name: string, activate?: boolean ): DDiagramLayer {\r\n\t\tconst result = new DDiagramLayer( name );\r\n\t\tthis.attach( result, activate );\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/**\r\n\t * Adds the specified layer and activates it if the `activate` is true.\r\n\t *\r\n\t * @param layer\r\n\t * @param activate\r\n\t */\r\n\tattach( layer: DDiagramLayer, activate?: boolean ): void {\r\n\t\tthis.addChild( layer );\r\n\t\tif( activate === true ) {\r\n\t\t\tthis._active = layer;\r\n\t\t}\r\n\t\tthis.emit( \"change\", this );\r\n\t\tDApplications.update( this );\r\n\t}\r\n\r\n\tattachAt( layer: DDiagramLayer, index: number, activate?: boolean ): void {\r\n\t\tthis.addChildAt( layer, index );\r\n\t\tif( activate === true ) {\r\n\t\t\tthis._active = layer;\r\n\t\t}\r\n\t\tthis.emit( \"change\", this );\r\n\t\tDApplications.update( this );\r\n\t}\r\n\r\n\t/**\r\n\t * Removes the specified layer from this container and activates the specified layer.\r\n\t * This method does not destroy the secified layer.\r\n\t *\r\n\t * @param layer\r\n\t */\r\n\tdetach( layer: DDiagramLayer, active: DDiagramLayer | null ): void {\r\n\t\tconst children = this.children;\r\n\t\tconst index = children.indexOf( layer );\r\n\t\tif( 0 <= index ) {\r\n\t\t\tthis._active = active;\r\n\r\n\t\t\tchildren.splice( index, 1 );\r\n\t\t\t(layer as any).parent = undefined;\r\n\r\n\t\t\tthis.emit( \"change\", this );\r\n\t\t\tDApplications.update( this );\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Removes the specified layer and activate the next layer.\r\n\t * This method does not destroy the specified layer.\r\n\t *\r\n\t * @param layer\r\n\t * @param activateNext\r\n\t */\r\n\tdelete( layer: DDiagramLayer, activateNext?: boolean ): number {\r\n\t\tconst children = this.children;\r\n\t\tconst index = children.indexOf( layer );\r\n\t\tif( 0 <= index ) {\r\n\t\t\tchildren.splice( index, 1 );\r\n\t\t\t(layer as any).parent = undefined;\r\n\r\n\t\t\tif( this._active === layer ) {\r\n\t\t\t\tif( activateNext === true ) {\r\n\t\t\t\t\tif( index < children.length ) {\r\n\t\t\t\t\t\tthis._active = children[ index ];\r\n\t\t\t\t\t} else if( 0 < children.length ) {\r\n\t\t\t\t\t\tthis._active = children[ index - 1 ];\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis._active = null;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis._active = null;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.emit( \"change\", this );\r\n\t\t\tDApplications.update( this );\r\n\t\t}\r\n\t\treturn index;\r\n\t}\r\n\r\n\tget( index: number ): DDiagramLayer | null {\r\n\t\tconst child = this.children[ index ];\r\n\t\tif( child != null ) {\r\n\t\t\treturn child;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tclear(): void {\r\n\t\tconst children = this.children;\r\n\t\tif( 0 < children.length ) {\r\n\t\t\tfor( let i = children.length - 1; 0 <= i; --i ) {\r\n\t\t\t\tconst child = children[ i ];\r\n\t\t\t\t(child as any).parent = null;\r\n\t\t\t\tchild.destroy();\r\n\t\t\t}\r\n\t\t\tchildren.length = 0;\r\n\r\n\t\t\tthis.emit( \"change\", this );\r\n\t\t\tDApplications.update( this );\r\n\t\t}\r\n\t}\r\n\r\n\tdestroy() {\r\n\t\tif( ! this._destroyed ) {\r\n\t\t\tthis.clear();\r\n\t\t\tsuper.destroy();\r\n\t\t}\r\n\t}\r\n\r\n\tsize(): number {\r\n\t\treturn this.children.length;\r\n\t}\r\n\r\n\tserialize(\r\n\t\tmanager: EShapeResourceManagerSerialization, items: DDiagramSerializedItem[]\r\n\t): DDiagramSerializedLayer[] {\r\n\t\tconst result: DDiagramSerializedLayer[] = [];\r\n\t\tconst children = this.children;\r\n\t\tfor( let i = 0, imax = children.length; i < imax; ++i ) {\r\n\t\t\tconst child = children[ i ];\r\n\t\t\tresult.push( child.serialize( i, manager, items ) );\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n}\r\n"]}