{"version":3,"file":"d-animation.js","sourceRoot":"","sources":["../../../src/main/typescript/wcardinal/ui/d-animation.ts"],"names":[],"mappings":"AAAA;;;GAGG","sourcesContent":["/*\r\n * Copyright (C) 2019 Toshiba Corporation\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { utils } from \"pixi.js\";\r\n\r\n/**\r\n * A function called when an animation starts.\r\n *\r\n * @param isReverse true if an animation is playing in reverse\r\n * @param animation an instance\r\n */\r\nexport type DAnimationOnStart<TARGET> = ( isReverse: boolean, animation: DAnimation<TARGET> ) => void;\r\n\r\n/**\r\n * A function called constantly when an animation is on a run.\r\n *\r\n * @param time a timing value in a range [0, 1]\r\n * @param isReverse true if an animation is playing in reverse\r\n * @param elapsedTime an elapsed time since an animation has started\r\n * @param animation an instance\r\n */\r\nexport type DAnimationOnTime<TARGET> = (\r\n\ttime: number, isReverse: boolean, elapsedTime: number, animation: DAnimation<TARGET>\r\n) => void;\r\n\r\n/**\r\n * Triggered when an animation stops.\r\n *\r\n * @param isReverse true if an animation is playing in reverse\r\n * @param animation an instance\r\n */\r\nexport type DAnimationOnEnd<TARGET> = ( isReverse: boolean, animation: DAnimation<TARGET> ) => void;\r\n\r\n/**\r\n * An easing function.\r\n *\r\n * @param time a normalized elapsed time\r\n * @param animation an instance\r\n */\r\nexport type DAnimationTiming<TARGET> = ( time: number, animation: DAnimation<TARGET> ) => number;\r\n\r\n/**\r\n * Mappings of event names and handlers.\r\n */\r\nexport interface DAnimationOnOptions<TARGET> {\r\n\t[name: string]: Function | undefined;\r\n\r\n\t/**\r\n\t * Triggered when an animation starts.\r\n\t *\r\n\t * @param isReverse true if an animation is playing in reverse\r\n\t * @param animation an instance\r\n\t */\r\n\tstart?: ( isReverse: boolean, animation: DAnimation<TARGET> ) => void;\r\n\r\n\t/**\r\n\t * Triggered constantly when an animation is on a run.\r\n\t *\r\n\t * @param time a timing value in a range [0, 1]\r\n\t * @param isReverse true if an animation is playing in reverse\r\n\t * @param elapsedTime an elapsed time since an animation has started\r\n\t * @param animation an instance\r\n\t */\r\n\ttime?: ( time: number, isReverse: boolean, elapsedTime: number, animation: DAnimation<TARGET> ) => void;\r\n\r\n\t/**\r\n\t * Triggered when an animation stops.\r\n\t *\r\n\t * @param isReverse true if an animation is playing in reverse\r\n\t * @param animation an instance\r\n\t */\r\n\tend?: ( isReverse: boolean, animation: DAnimation<TARGET> ) => void;\r\n}\r\n\r\n/**\r\n * An animation options.\r\n */\r\nexport interface DAnimationOptions<TARGET> {\r\n\t/**\r\n\t * An animation target.\r\n\t */\r\n\ttarget?: TARGET | null;\r\n\r\n\t/**\r\n\t * A function called when an animation starts.\r\n\t */\r\n\tonStart?: DAnimationOnStart<TARGET>;\r\n\r\n\t/**\r\n\t * A function called constantly when an animation is on a run.\r\n\t */\r\n\tonTime?: DAnimationOnTime<TARGET>;\r\n\r\n\t/**\r\n\t * Triggered when an animation stops.\r\n\t */\r\n\tonEnd?: DAnimationOnEnd<TARGET>;\r\n\r\n\ttiming?: DAnimationTiming<TARGET>;\r\n\r\n\t/**\r\n\t * An animation duration.\r\n\t */\r\n\tduration?: number;\r\n\r\n\t/**\r\n\t * Event handlers.\r\n\t */\r\n\ton?: DAnimationOnOptions<TARGET>;\r\n}\r\n\r\nexport interface DAnimation<TARGET = unknown> extends utils.EventEmitter {\r\n\t/**\r\n\t * An animation target.\r\n\t */\r\n\ttarget: TARGET | null;\r\n\r\n\t/**\r\n\t * An animation duration.\r\n\t */\r\n\tduration: number;\r\n\r\n\t/**\r\n\t * Starts an animation.\r\n\t *\r\n\t * @param reverse true to play in reverse.\r\n\t */\r\n\tstart( reverse?: boolean ): void;\r\n\r\n\t/**\r\n\t * Returns true if an animation is playing.\r\n\t */\r\n\tisStarted(): boolean;\r\n\r\n\t/**\r\n\t * Returns true if an animation is in a reverse mode.\r\n\t */\r\n\tisReverse(): boolean;\r\n\r\n\t/**\r\n\t * Stops an animation as is.\r\n\t */\r\n\tstop(): void;\r\n\r\n\t/**\r\n\t * Moves an animation frame to the end.\r\n\t */\r\n\tend(): void;\r\n}\r\n"]}