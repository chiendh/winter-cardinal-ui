{"version":3,"file":"util-extractor.js","sourceRoot":"","sources":["../../../../src/main/typescript/wcardinal/ui/util/util-extractor.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH,OAAO,EAAE,OAAO,EAAE,MAAM,EAAY,aAAa,EAAE,WAAW,EAAE,KAAK,EAAE,MAAM,SAAS,CAAC;AACvF,OAAO,EAAE,aAAa,EAAE,MAAM,mBAAmB,CAAC;AAIlD;IAAA;IA+EA,CAAC;IA9EO,uBAAS,GAAhB,UACC,MAAa,EAAE,UAAmB,EAClC,KAAe,EAAE,mBAA6B;QAE9C,IAAM,MAAM,GAAG,aAAa,CAAC,MAAM,CAAC;YACnC,KAAK,EAAE,MAAM,CAAC,KAAK;YACnB,MAAM,EAAE,MAAM,CAAC,MAAM;YACrB,SAAS,EAAE,WAAW,CAAC,MAAM;YAC7B,UAAU,YAAA;SACV,CAAC,CAAC;QACH,IAAM,MAAM,GAAG,IAAI,MAAM,CACxB,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAC1C,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CACtC,CAAC;QACF,IAAM,KAAK,GAAG,aAAa,CAAC,QAAQ,CAAE,MAAM,CAAE,CAAC;QAC/C,IAAI,KAAK,EAAG;YACX,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,mBAAmB,CAAE,CAAC;SAC5E;QACD,OAAO,MAAM,CAAC;IACf,CAAC;IAEM,sBAAQ,GAAf,UAAiB,aAA4B,EAAE,QAAkB;QAChE,IAAM,UAAU,GAAG,aAAa,CAAC,UAAU,CAAC;QAC5C,IAAM,KAAK,GAAG,aAAa,CAAC,KAAK,CAAC;QAClC,IAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAE,KAAK,CAAC,KAAK,GAAG,UAAU,CAAE,CAAC;QACrD,IAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAE,KAAK,CAAC,MAAM,GAAG,UAAU,CAAE,CAAC;QACvD,IAAM,MAAM,GAAG,IAAI,UAAU,CAAE,CAAC,GAAG,KAAK,GAAG,MAAM,CAAE,CAAC;QAEpD,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAE,aAAa,CAAE,CAAC;QAC7C,IAAM,EAAE,GAAG,QAAQ,CAAC,EAAE,CAAC;QACvB,EAAE,CAAC,UAAU,CACZ,KAAK,CAAC,CAAC,GAAG,UAAU,EACpB,KAAK,CAAC,CAAC,GAAG,UAAU,EACpB,KAAK,EACL,MAAM,EACN,EAAE,CAAC,IAAI,EACP,EAAE,CAAC,aAAa,EAChB,MAAM,CACN,CAAC;QAEF,OAAO;YACN,KAAK,OAAA;YACL,MAAM,QAAA;YACN,KAAK,EAAE,MAAM;SACb,CAAC;IACH,CAAC;IAEM,sBAAQ,GAAf,UAAiB,MAA2B,EAAE,KAAc,EAAE,uBAAiC;QAC9F,IAAM,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;QAC3B,IAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;QAC7B,IAAM,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;QAC3B,IAAM,kBAAkB,GAAG,IAAI,KAAK,CAAC,kBAAkB,CAAE,KAAK,EAAE,MAAM,EAAE,CAAC,CAAE,CAAC;QAE5E,IAAM,SAAS,GAAG,kBAAkB,CAAC,OAAO,CAAC,YAAY,CAAE,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,MAAM,CAAE,CAAC;QACjF,IAAI,uBAAuB,EAAG;YAC7B,SAAS,CAAC,IAAI,CAAC,GAAG,CAAE,KAAK,CAAE,CAAC;SAC5B;aAAM;YACL,OAAe,CAAC,eAAe,CAAE,KAAK,EAAE,SAAS,CAAC,IAAI,CAAE,CAAC;SAC1D;QACD,kBAAkB,CAAC,OAAO,CAAC,YAAY,CAAE,SAAS,EAAE,CAAC,EAAE,CAAC,CAAE,CAAC;QAE3D,aAAa;QACb,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK,KAAK,CAAC,EAAG;YAClC,kBAAkB,CAAC,OAAO,CAAC,KAAK,CAAE,KAAK,EAAE,KAAK,CAAE,CAAC;YACjD,kBAAkB,CAAC,OAAO,CAAC,SAAS,CAAE,kBAAkB,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC,CAAE,CAAC;YACxE,IAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAE,KAAK,GAAG,KAAK,CAAE,CAAC;YAChD,IAAM,YAAY,GAAG,IAAI,CAAC,KAAK,CAAE,MAAM,GAAG,KAAK,CAAE,CAAC;YAClD,IAAM,eAAe,GAAG,kBAAkB,CAAC,OAAO,CAAC,YAAY,CAAE,CAAC,EAAE,CAAC,EAAE,WAAW,EAAE,YAAY,CAAE,CAAC;YACnG,kBAAkB,CAAC,MAAM,CAAE,WAAW,EAAE,YAAY,CAAE,CAAC;YACvD,kBAAkB,CAAC,OAAO,CAAC,YAAY,CAAE,eAAe,EAAE,CAAC,EAAE,CAAC,CAAE,CAAC;SACjE;QAED,OAAO,kBAAkB,CAAC,MAAM,CAAC;IAClC,CAAC;IAEM,sBAAQ,GAAf,UAAiB,MAAyB,EAAE,MAAe,EAAE,OAAgB;QAC5E,OAAO,MAAM,CAAC,SAAS,CAAE,MAAM,EAAE,OAAO,CAAE,CAAC;IAC5C,CAAC;IACF,oBAAC;AAAD,CAAC,AA/ED,IA+EC","sourcesContent":["/*\r\n * Copyright (C) 2019 Toshiba Corporation\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { Extract, Matrix, Renderer, RenderTexture, SCALE_MODES, utils } from \"pixi.js\";\r\nimport { DApplications } from \"../d-applications\";\r\nimport { DBase } from \"../d-base\";\r\nimport { UtilExtractorPixels } from \"./util-extractor-pixels\";\r\n\r\nexport class UtilExtractor {\r\n\tstatic toTexture(\r\n\t\ttarget: DBase, resolution?: number,\r\n\t\tclear?: boolean, skipUpdateTransform?: boolean\r\n\t): RenderTexture {\r\n\t\tconst result = RenderTexture.create({\r\n\t\t\twidth: target.width,\r\n\t\t\theight: target.height,\r\n\t\t\tscaleMode: SCALE_MODES.LINEAR,\r\n\t\t\tresolution\r\n\t\t});\r\n\t\tconst matrix = new Matrix(\r\n\t\t\tundefined, undefined, undefined, undefined,\r\n\t\t\t-target.position.x, -target.position.y\r\n\t\t);\r\n\t\tconst layer = DApplications.getLayer( target );\r\n\t\tif( layer ) {\r\n\t\t\tlayer.renderer.render( target, result, clear, matrix, skipUpdateTransform );\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\tstatic toPixels( renderTexture: RenderTexture, renderer: Renderer ): UtilExtractorPixels {\r\n\t\tconst resolution = renderTexture.resolution;\r\n\t\tconst frame = renderTexture.frame;\r\n\t\tconst width = Math.floor( frame.width * resolution );\r\n\t\tconst height = Math.floor( frame.height * resolution );\r\n\t\tconst pixels = new Uint8Array( 4 * width * height );\r\n\r\n\t\trenderer.renderTexture.bind( renderTexture );\r\n\t\tconst gl = renderer.gl;\r\n\t\tgl.readPixels(\r\n\t\t\tframe.x * resolution,\r\n\t\t\tframe.y * resolution,\r\n\t\t\twidth,\r\n\t\t\theight,\r\n\t\t\tgl.RGBA,\r\n\t\t\tgl.UNSIGNED_BYTE,\r\n\t\t\tpixels\r\n\t\t);\r\n\r\n\t\treturn {\r\n\t\t\twidth,\r\n\t\t\theight,\r\n\t\t\tarray: pixels\r\n\t\t};\r\n\t}\r\n\r\n\tstatic toCanvas( pixels: UtilExtractorPixels, scale?: number, ignorePremutipliedAlpha?: boolean ): HTMLCanvasElement {\r\n\t\tconst width = pixels.width;\r\n\t\tconst height = pixels.height;\r\n\t\tconst array = pixels.array;\r\n\t\tconst canvasRenderTarget = new utils.CanvasRenderTarget( width, height, 1 );\r\n\r\n\t\tconst imageData = canvasRenderTarget.context.getImageData( 0, 0, width, height );\r\n\t\tif( ignorePremutipliedAlpha ) {\r\n\t\t\timageData.data.set( array );\r\n\t\t} else {\r\n\t\t\t(Extract as any).arrayPostDivide( array, imageData.data );\r\n\t\t}\r\n\t\tcanvasRenderTarget.context.putImageData( imageData, 0, 0 );\r\n\r\n\t\t// Scale down\r\n\t\tif( scale != null && scale !== 1 ) {\r\n\t\t\tcanvasRenderTarget.context.scale( scale, scale );\r\n\t\t\tcanvasRenderTarget.context.drawImage( canvasRenderTarget.canvas, 0, 0 );\r\n\t\t\tconst scaledWidth = Math.floor( width * scale );\r\n\t\t\tconst scaledHeight = Math.floor( height * scale );\r\n\t\t\tconst scaledImageData = canvasRenderTarget.context.getImageData( 0, 0, scaledWidth, scaledHeight );\r\n\t\t\tcanvasRenderTarget.resize( scaledWidth, scaledHeight );\r\n\t\t\tcanvasRenderTarget.context.putImageData( scaledImageData, 0, 0 );\r\n\t\t}\r\n\r\n\t\treturn canvasRenderTarget.canvas;\r\n\t}\r\n\r\n\tstatic toBase64( canvas: HTMLCanvasElement, format?: string, quality?: number ): string {\r\n\t\treturn canvas.toDataURL( format, quality );\r\n\t}\r\n}\r\n"]}