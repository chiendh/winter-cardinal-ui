{"version":3,"file":"util-extract.js","sourceRoot":"","sources":["../../../../src/main/typescript/wcardinal/ui/util/util-extract.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (C) 2019 Toshiba Corporation\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { Renderer, RenderTexture } from \"pixi.js\";\r\nimport { DApplicationLayerLike } from \"../d-application-layer-like\";\r\nimport { DApplicationLike } from \"../d-application-like\";\r\nimport { DApplications } from \"../d-applications\";\r\nimport { DBase } from \"../d-base\";\r\nimport { isNumber } from \"./is-number\";\r\nimport { UtilExtractor } from \"./util-extractor\";\r\nimport { UtilExtractorPixels } from \"./util-extractor-pixels\";\r\nimport { UtilFileDownloader } from \"./util-file-downloader\";\r\n\r\nexport interface UtilExtractTextureResolutionOptions {\r\n\tsize: number;\r\n}\r\n\r\nexport interface UtilExtractTextureTransformOptions {\r\n\tupdate?: boolean;\r\n}\r\n\r\nexport interface UtilExtractTextureOptions {\r\n\ttarget: DBase;\r\n\tresolution?: number | UtilExtractTextureResolutionOptions;\r\n\ttransform?: UtilExtractTextureTransformOptions;\r\n\tclear?: boolean;\r\n}\r\n\r\nexport interface UtilExtractPixelsOptions extends UtilExtractTextureOptions {\r\n\trenderer?: Renderer;\r\n\tapplication?: DApplicationLike;\r\n\tlayer?: DApplicationLayerLike;\r\n}\r\n\r\nexport interface UtilExtractCanvasOptions extends UtilExtractPixelsOptions {\r\n\tscale?: number | {\r\n\t\tsize: number;\r\n\t};\r\n\talpha?: {\r\n\t\tpremultiplied?: {\r\n\t\t\tignore?: boolean;\r\n\t\t}\r\n\t};\r\n}\r\n\r\nexport interface UtilExtractBase64Options extends UtilExtractCanvasOptions {\r\n\tformat?: string;\r\n\tquality?: number;\r\n}\r\n\r\nexport interface UtilExtractFileOptions extends UtilExtractBase64Options {\r\n\tfilename: string;\r\n}\r\n\r\nconst toSkipUpdateTransform = ( options: UtilExtractTextureOptions ): boolean | undefined => {\r\n\treturn options.transform && options.transform.update;\r\n};\r\n\r\nconst toResolution = ( options: UtilExtractTextureOptions ): number => {\r\n\tconst target = options.target;\r\n\tif( options.resolution != null ) {\r\n\t\tif( isNumber( options.resolution ) ) {\r\n\t\t\treturn options.resolution;\r\n\t\t} else {\r\n\t\t\treturn Math.min( 1, options.resolution.size / Math.max( target.width, target.height ) );\r\n\t\t}\r\n\t} else {\r\n\t\treturn window.devicePixelRatio || 1;\r\n\t}\r\n};\r\n\r\nconst toIgnorePremultipliedAlpha = ( options: UtilExtractCanvasOptions ): boolean | undefined => {\r\n\treturn ( options.alpha && options.alpha.premultiplied && options.alpha.premultiplied.ignore );\r\n};\r\n\r\nconst toScale = ( pixels: UtilExtractorPixels, options: UtilExtractCanvasOptions ): number | undefined => {\r\n\tif( options.scale != null ) {\r\n\t\tif( isNumber( options.scale ) ) {\r\n\t\t\treturn options.scale;\r\n\t\t} else {\r\n\t\t\tconst size = options.scale.size;\r\n\t\t\treturn Math.min( 1, size / pixels.width, size / pixels.height );\r\n\t\t}\r\n\t}\r\n};\r\n\r\nconst toRenderer = ( options: UtilExtractPixelsOptions ): Renderer => {\r\n\tif( options.renderer ) {\r\n\t\treturn options.renderer;\r\n\t} else if( options.application ) {\r\n\t\treturn options.application.getLayerBase().renderer;\r\n\t} else if( options.layer ) {\r\n\t\treturn options.layer.renderer;\r\n\t} else {\r\n\t\tconst layer = DApplications.getLayer( options.target );\r\n\t\tif( layer ) {\r\n\t\t\treturn layer.renderer;\r\n\t\t} else {\r\n\t\t\tthrow new Error( \"No renderer / application / layer found.\" );\r\n\t\t}\r\n\t}\r\n};\r\n\r\nexport class UtilExtract {\r\n\tstatic texture( options: UtilExtractTextureOptions ): RenderTexture {\r\n\t\tconst target = options.target;\r\n\t\tconst resolution = toResolution( options );\r\n\t\tconst skipUpdateTransform = toSkipUpdateTransform( options );\r\n\t\treturn UtilExtractor.toTexture( target, resolution, options.clear, skipUpdateTransform );\r\n\t}\r\n\r\n\tstatic pixels( options: UtilExtractPixelsOptions ): UtilExtractorPixels {\r\n\t\tconst renderer = toRenderer( options );\r\n\t\treturn UtilExtractor.toPixels( this.texture( options ), renderer );\r\n\t}\r\n\r\n\tstatic canvas( options: UtilExtractCanvasOptions ): HTMLCanvasElement {\r\n\t\tconst pixels = this.pixels( options );\r\n\t\tconst ignorePremutipliedAlpha = toIgnorePremultipliedAlpha( options );\r\n\t\tconst scale = toScale( pixels, options );\r\n\t\treturn UtilExtractor.toCanvas( pixels, scale, ignorePremutipliedAlpha );\r\n\t}\r\n\r\n\tstatic base64( options: UtilExtractBase64Options ): string {\r\n\t\treturn UtilExtractor.toBase64( this.canvas( options ), options.format, options.quality );\r\n\t}\r\n\r\n\tstatic file( options: UtilExtractFileOptions ): void {\r\n\t\tUtilFileDownloader.downloadUrl( options.filename, this.base64( options ) );\r\n\t}\r\n}\r\n"]}