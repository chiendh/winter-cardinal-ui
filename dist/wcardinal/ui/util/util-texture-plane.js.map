{"version":3,"file":"util-texture-plane.js","sourceRoot":"","sources":["../../../../src/main/typescript/wcardinal/ui/util/util-texture-plane.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (C) 2019 Toshiba Corporation\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { Texture } from \"pixi.js\";\r\nimport { DApplications } from \"../d-applications\";\r\nimport { DCornerMask } from \"../d-corner-mask\";\r\nimport { toSvgUrl } from \"./to-svg-url\";\r\n\r\nexport class UtilTexturePlane {\r\n\tprotected static INSTANCE: UtilTexturePlane | null = null;\r\n\r\n\tprotected _backgroundCache: Map<number, Texture>;\r\n\tprotected _backgroundAttribute: string;\r\n\tprotected _borderCache: Map<number, Map<number, Texture>>;\r\n\tprotected _borderAttribute: ( width: number ) => string;\r\n\tprotected _onUpdate: () => void;\r\n\r\n\tconstructor() {\r\n\t\tthis._backgroundCache = new Map<number, Texture>();\r\n\t\tthis._backgroundAttribute = `fill=\"#fff\" stroke=\"none\"`;\r\n\t\tthis._borderCache = new Map<number, Map<number, Texture>>();\r\n\t\tthis._borderAttribute = ( width: number ): string => {\r\n\t\t\treturn `fill=\"none\" stroke=\"#fff\" stroke-width=\"${width}\"`;\r\n\t\t};\r\n\t\tthis._onUpdate = (): void => {\r\n\t\t\tDApplications.update();\r\n\t\t};\r\n\t}\r\n\r\n\tprotected toCornerTl( offset: number, size: number, tl: number ): string {\r\n\t\treturn ( 0 < tl ? `A${tl} ${tl} 0 0 1 ${offset + tl} ${offset}` : \"\" );\r\n\t}\r\n\r\n\tprotected toCornerBr( offset: number, size: number, br: number ): string {\r\n\t\treturn ( 0 < br ? `A${br} ${br} 0 0 1 ${offset + size - br} ${offset + size}` : \"\" );\r\n\t}\r\n\r\n\tprotected make( radius: number, offset: number, attr: string ): Texture {\r\n\t\tconst realRadius = Math.max( 0, radius - offset );\r\n\t\tconst size: number = realRadius * 2 + 4;\r\n\t\tconst realSize: number = size + offset * 2;\r\n\t\tconst d =\r\n\t\t\t`M${offset + realRadius} ${offset}` +\r\n\t\t\t`L${offset + size} ${offset}` +\r\n\t\t\t`L${offset + size} ${offset + size - realRadius}` +\r\n\t\t\tthis.toCornerBr( offset, size, realRadius ) +\r\n\t\t\t`L${offset} ${offset + size}` +\r\n\t\t\t`L${offset} ${offset + realRadius}` +\r\n\t\t\tthis.toCornerTl( offset, size, realRadius ) +\r\n\t\t\t`Z`;\r\n\t\treturn this.toSvg( realSize, attr, d );\r\n\t}\r\n\r\n\tprotected toSvg( realSize: number, attr: string, d: string ): Texture {\r\n\t\tconst resolution = (window.devicePixelRatio || 1);\r\n\t\tconst widthAttr = `width=\"${realSize * resolution}\"`;\r\n\t\tconst heightAttr = `height=\"${realSize * resolution}\"`;\r\n\t\tconst viewBoxAttr = `viewBox=\"0 0 ${realSize} ${realSize}\"`;\r\n\t\tconst svg = `<svg ${widthAttr} ${heightAttr} ${viewBoxAttr} xmlns=\"http://www.w3.org/2000/svg\">` +\r\n\t\t\t`<path ${attr} d=\"${d}\"></path>` +\r\n\t\t`</svg>`;\r\n\t\treturn Texture.from( toSvgUrl( svg ), {\r\n\t\t\tresolution\r\n\t\t});\r\n\t}\r\n\r\n\tnewBackground( radius: number ): Texture {\r\n\t\tconst result = this.make( radius, 0, this._backgroundAttribute );\r\n\t\tresult.on( \"update\", this._onUpdate );\r\n\t\treturn result;\r\n\t}\r\n\r\n\tnewBorder( radius: number, width: number ): Texture {\r\n\t\tconst result = this.make( radius, 0.5 * width, this._borderAttribute( width ) );\r\n\t\tresult.on( \"update\", this._onUpdate );\r\n\t\treturn result;\r\n\t}\r\n\r\n\tgetBackground( radius: number ): Texture {\r\n\t\tconst cache = this._backgroundCache;\r\n\r\n\t\tlet texture = cache.get( radius );\r\n\t\tif( texture == null ) {\r\n\t\t\ttexture = this.newBackground( radius );\r\n\t\t\tcache.set( radius, texture );\r\n\t\t}\r\n\r\n\t\treturn texture;\r\n\t}\r\n\r\n\tgetBorder( radius: number, width: number ): Texture {\r\n\t\tconst cache = this._borderCache;\r\n\r\n\t\tlet maskToTexture = cache.get( radius );\r\n\t\tif( maskToTexture == null ) {\r\n\t\t\tmaskToTexture = new Map<DCornerMask, Texture>();\r\n\t\t\tcache.set( radius, maskToTexture );\r\n\t\t}\r\n\r\n\t\tlet texture = maskToTexture.get( width );\r\n\t\tif( texture == null ) {\r\n\t\t\ttexture = this.newBorder( radius, width );\r\n\t\t\tmaskToTexture.set( width, texture );\r\n\t\t}\r\n\r\n\t\treturn texture;\r\n\t}\r\n\r\n\tstatic getInstance(): UtilTexturePlane {\r\n\t\tif( UtilTexturePlane.INSTANCE == null ) {\r\n\t\t\tUtilTexturePlane.INSTANCE = new UtilTexturePlane();\r\n\t\t}\r\n\t\treturn UtilTexturePlane.INSTANCE;\r\n\t}\r\n}\r\n"]}