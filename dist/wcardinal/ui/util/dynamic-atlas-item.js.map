{"version":3,"file":"dynamic-atlas-item.js","sourceRoot":"","sources":["../../../../src/main/typescript/wcardinal/ui/util/dynamic-atlas-item.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH,OAAO,EAAe,SAAS,EAAE,OAAO,EAAE,MAAM,SAAS,CAAC;AAE1D;IAUC,0BACC,EAAU,EACV,KAAa,EAAE,MAAc,EAAE,WAAmB,EAClD,WAAwB;QAExB,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;QACb,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC;QACb,IAAM,UAAU,GAAG,WAAW,CAAC,UAAU,CAAC;QAC1C,IAAI,CAAC,KAAK,GAAG,IAAI,SAAS,CAAE,CAAC,EAAE,CAAC,EAAE,KAAK,GAAG,UAAU,EAAE,MAAM,GAAG,UAAU,CAAE,CAAC;QAC5E,IAAI,CAAC,OAAO,GAAG,IAAI,OAAO,CAAE,WAAW,EAAE,IAAI,SAAS,CAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE,CAAE,CAAC;QAEvE,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;IAChC,CAAC;IAID,qCAAU,GAAV;QACC,IAAM,iBAAiB,GAAG,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,UAAU,CAAC;QAClE,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,iBAAiB,CAAC;QACxD,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,iBAAiB,CAAC;QACxD,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QACtC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;QACxC,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,CAAC;QACzB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAE,QAAQ,EAAE,IAAI,CAAE,CAAC;IACrC,CAAC;IAED,kCAAO,GAAP;QACC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;IACxB,CAAC;IACF,uBAAC;AAAD,CAAC,AAzCD,IAyCC","sourcesContent":["/*\r\n * Copyright (C) 2019 Toshiba Corporation\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { BaseTexture, Rectangle, Texture } from \"pixi.js\";\r\n\r\nexport abstract class DynamicAtlasItem {\r\n\tid: string;\r\n\tref: number;\r\n\tframe: Rectangle;\r\n\ttexture: Texture;\r\n\r\n\twidth: number;\r\n\theight: number;\r\n\tstrokeWidth: number;\r\n\r\n\tconstructor(\r\n\t\tid: string,\r\n\t\twidth: number, height: number, strokeWidth: number,\r\n\t\tbaseTexture: BaseTexture\r\n\t) {\r\n\t\tthis.id = id;\r\n\t\tthis.ref = 0;\r\n\t\tconst resolution = baseTexture.resolution;\r\n\t\tthis.frame = new Rectangle( 0, 0, width * resolution, height * resolution );\r\n\t\tthis.texture = new Texture( baseTexture, new Rectangle( 0, 0, 1, 1 ) );\r\n\r\n\t\tthis.width = width;\r\n\t\tthis.height = height;\r\n\t\tthis.strokeWidth = strokeWidth;\r\n\t}\r\n\r\n\tabstract render( context: CanvasRenderingContext2D ): void;\r\n\r\n\tapplyFrame(): void {\r\n\t\tconst resolutionInverse = 1 / this.texture.baseTexture.resolution;\r\n\t\tthis.texture.frame.x = this.frame.x * resolutionInverse;\r\n\t\tthis.texture.frame.y = this.frame.y * resolutionInverse;\r\n\t\tthis.texture.frame.width = this.width;\r\n\t\tthis.texture.frame.height = this.height;\r\n\t\tthis.texture.updateUvs();\r\n\t\tthis.texture.emit( \"update\", this );\r\n\t}\r\n\r\n\tdestroy(): void {\r\n\t\tthis.texture.destroy();\r\n\t}\r\n}\r\n"]}