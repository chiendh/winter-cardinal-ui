{"version":3,"file":"util-character-iterator.js","sourceRoot":"","sources":["../../../../src/main/typescript/wcardinal/ui/util/util-character-iterator.ts"],"names":[],"mappings":"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","sourcesContent":["\r\nexport class UtilCharacterIterator {\r\n\tprotected static _instance: UtilCharacterIterator | null = null;\r\n\tprotected _target: string;\r\n\tprotected _position: number;\r\n\r\n\tconstructor() {\r\n\t\tthis._target = \"\";\r\n\t\tthis._position = 0;\r\n\t}\r\n\r\n\tget position(): number {\r\n\t\treturn this._position;\r\n\t}\r\n\r\n\tset position( position: number ) {\r\n\t\tthis._position = position;\r\n\t}\r\n\r\n\tinit( target: string ): void {\r\n\t\tthis._target = target;\r\n\t\tthis._position = 0;\r\n\t}\r\n\r\n\thasNext(): boolean {\r\n\t\treturn this._position < this._target.length;\r\n\t}\r\n\r\n\tprotected findNextBreak( target: string, istart: number ): number {\r\n\t\tconst iend = target.length;\r\n\t\tfor( let i = istart; i < iend; ++i ) {\r\n\t\t\tconst code = target.charCodeAt( i );\r\n\t\t\tif( ! this.isLowSurrogate( code ) && ! this.isVariationSelector( code ) ) {\r\n\t\t\t\treturn i;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn iend;\r\n\t}\r\n\r\n\tprotected isHighSurrogate( code: number ): boolean {\r\n\t\treturn ( 0xd800 <= code && code <= 0xdbff );\r\n\t}\r\n\r\n\tprotected isLowSurrogate( code: number ): boolean {\r\n\t\treturn ( 0xdc00 <= code && code <= 0xdfff );\r\n\t}\r\n\r\n\tprotected isVariationSelector( code: number ): boolean {\r\n\t\treturn ( 0xfe00 <= code && code <= 0xfe0f );\r\n\t}\r\n\r\n\tnext(): string {\r\n\t\tconst target = this._target;\r\n\t\tconst position = this._position;\r\n\t\tconst nextBreak = this.findNextBreak( target, position + 1 );\r\n\t\tconst result = target.substring( position, nextBreak );\r\n\t\tthis._position = nextBreak;\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/**\r\n\t * Advances the position if the next character is not equal to\r\n\t * the given `except`.\r\n\t *\r\n\t * @param except\r\n\t * @return true if the position is advanced\r\n\t */\r\n\tadvance( except?: string ): boolean {\r\n\t\tconst target = this._target;\r\n\t\tconst position = this._position;\r\n\t\tconst nextBreak = this.findNextBreak( target, position + 1 );\r\n\t\tif( target.substring( position, nextBreak ) !== except ) {\r\n\t\t\tthis._position = nextBreak;\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tstatic from( target: string ): UtilCharacterIterator {\r\n\t\tif( UtilCharacterIterator._instance == null ) {\r\n\t\t\tUtilCharacterIterator._instance = new UtilCharacterIterator();\r\n\t\t}\r\n\t\tconst instance = UtilCharacterIterator._instance;\r\n\t\tinstance.init( target );\r\n\t\treturn instance;\r\n\t}\r\n}\r\n"]}