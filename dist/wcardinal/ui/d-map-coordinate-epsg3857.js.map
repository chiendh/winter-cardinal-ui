{"version":3,"file":"d-map-coordinate-epsg3857.js","sourceRoot":"","sources":["../../../src/main/typescript/wcardinal/ui/d-map-coordinate-epsg3857.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (C) 2019 Toshiba Corporation\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { DMapCoordinate, DMapPoint } from \"./d-map-coordinate\";\r\n\r\nexport class DMapCoordinateEPSG3857 implements DMapCoordinate {\r\n\tprotected static CIRCUMFERENCE_HALF: number = Math.PI * 6378137 /* Approximate earth radius in meter */;\r\n\tprotected _tileSize: number;\r\n\r\n\tconstructor( tileSize: number = 256 ) {\r\n\t\tthis._tileSize = tileSize;\r\n\t}\r\n\r\n\tgetTileSize(): number {\r\n\t\treturn this._tileSize;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts the given (lon, lat) point in WGS84 to (x, y) in EPSG:900913.\r\n\t * The origin of the converted point (x, y) is at the middle-left corner.\r\n\t * The `meters` can be the same instance that is passed in as the `lonlat`.\r\n\t *\r\n\t * @param lonlat (lon, lat) point\r\n\t * @param meters (x, y) point in meters converted from the given lonlat.\r\n\t * @return (x, y) point in meters\r\n\t * @see https://www.maptiler.com/google-maps-coordinates-tile-bounds-projection/\r\n\t * @see https://qiita.com/MALORGIS/items/1a9114dd090e5b891bf7\r\n\t */\r\n\tlonLatToMeters( lonlat: DMapPoint, meters: DMapPoint ): DMapPoint {\r\n\t\tconst C = DMapCoordinateEPSG3857.CIRCUMFERENCE_HALF;\r\n\t\tmeters.x = lonlat.x * C / 180;\r\n\t\tmeters.y = Math.log( Math.tan( ( 90 + lonlat.y ) * Math.PI / 360 ) ) * C / Math.PI;\r\n\t\treturn meters;\r\n\t}\r\n\r\n\t/**\r\n\t * The `lonlat` can be the same instance that is passed in as the `meters`.\r\n\t *\r\n\t * @param meters\r\n\t * @param lonlat\r\n\t */\r\n\tmetersToLonLat( meters: DMapPoint, lonlat: DMapPoint ): DMapPoint {\r\n\t\tconst C = DMapCoordinateEPSG3857.CIRCUMFERENCE_HALF;\r\n\t\tlonlat.x = meters.x / C * 180;\r\n\t\tlonlat.y = Math.atan( Math.exp( meters.y * Math.PI / C ) ) * 360 / Math.PI - 90;\r\n\t\treturn lonlat;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts pixel coordinates in given zoom level of pyramid to EPSG:900913.\r\n\t * The origin of the `pixels` is the top-left corner.\r\n\t * The `meters` can be the same instance that is passed in as the `pixels`.\r\n\t */\r\n\tpixelsToMeters( pixels: DMapPoint, tz: number, tileSize: number, meters: DMapPoint ): DMapPoint {\r\n\t\tconst R = this.toResolution( tz, tileSize );\r\n\t\tconst C = DMapCoordinateEPSG3857.CIRCUMFERENCE_HALF;\r\n\t\tmeters.x = pixels.x * R - C;\r\n\t\tmeters.y = C - pixels.y * R;\r\n\t\treturn meters;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts EPSG:900913 to pyramid pixel coordinates in given zoom level.\r\n\t * The origin of the pixels is the top-left corner.\r\n\t * The `pixels` can be the same instance that is passed in as the `meters`.\r\n\t */\r\n\tmetersToPixels( meters: DMapPoint, tz: number, tileSize: number, pixels: DMapPoint ): DMapPoint {\r\n\t\tconst R = this.toResolution( tz, tileSize );\r\n\t\tconst C = DMapCoordinateEPSG3857.CIRCUMFERENCE_HALF;\r\n\t\tpixels.x = ( meters.x + C ) / R;\r\n\t\tpixels.y = ( C - meters.y ) / R;\r\n\t\treturn pixels;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a tile covering region in given pixel coordinates.\r\n\t * The origin of the tile is the top-left corner.\r\n\t * The `tile` can be the same instance that is passed in as the `pixels`.\r\n\t */\r\n\tpixelsToTile( pixels: DMapPoint, tileSize: number, tile: DMapPoint ): DMapPoint {\r\n\t\ttile.x = Math.ceil( pixels.x / tileSize ) - 1;\r\n\t\ttile.y = Math.ceil( pixels.y / tileSize ) - 1;\r\n\t\treturn tile;\r\n\t}\r\n\r\n\t/**\r\n\t * The origin of the tile is the top-left corner.\r\n\t * The `tile` can be the same instance that is passed in as the `meters`.\r\n\t */\r\n\tmetersToTile( meters: DMapPoint, tz: number, tile: DMapPoint ): DMapPoint {\r\n\t\tconst C = DMapCoordinateEPSG3857.CIRCUMFERENCE_HALF;\r\n\t\tconst Z = 1 << tz;\r\n\t\ttile.x = Math.ceil( 0.5 * ( meters.x / C + 1 ) * Z ) - 1;\r\n\t\ttile.y = Math.ceil( 0.5 * ( 1 - meters.y / C ) * Z ) - 1;\r\n\t\treturn tile;\r\n\t}\r\n\r\n\tlonLatToTile( lonlat: DMapPoint, tz: number, tile: DMapPoint ): DMapPoint {\r\n\t\treturn this.metersToTile( this.lonLatToMeters( lonlat, tile ), tz, tile );\r\n\t}\r\n\r\n\tlonLatToPixels( lonlat: DMapPoint, tz: number, tileSize: number, pixels: DMapPoint ): DMapPoint {\r\n\t\treturn this.metersToPixels( this.lonLatToMeters( lonlat, pixels ), tz, tileSize, pixels );\r\n\t}\r\n\r\n\tpixelsToLonLat( pixels: DMapPoint, tz: number, tileSize: number, lonlat: DMapPoint ): DMapPoint {\r\n\t\treturn this.metersToLonLat( this.pixelsToMeters( pixels, tz, tileSize, lonlat ), lonlat );\r\n\t}\r\n\r\n\t/**\r\n\t * The `pixels` can be the same instance that is passed in as the `tile`.\r\n\t */\r\n\ttileToPixels( tile: DMapPoint, tileSize: number, pixels: DMapPoint ): DMapPoint {\r\n\t\tpixels.x = tile.x * tileSize;\r\n\t\tpixels.y = tile.y * tileSize;\r\n\t\treturn pixels;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns bounds of the given tile in EPSG:900913 coordinates\r\n\t * The `meters` can be the same instance that is passed in as the `tile`.\r\n\t */\r\n\ttileToMeters( tile: DMapPoint, tz: number, meters: DMapPoint ): DMapPoint {\r\n\t\tconst R = this.toResolutionMeter( tz );\r\n\t\tconst C = DMapCoordinateEPSG3857.CIRCUMFERENCE_HALF;\r\n\t\tmeters.x = tile.x * R + C;\r\n\t\tmeters.y = C - tile.y * R;\r\n\t\treturn meters;\r\n\t}\r\n\r\n\tprotected toResolutionMeter( tz: number ): number {\r\n\t\treturn ( 2 * DMapCoordinateEPSG3857.CIRCUMFERENCE_HALF ) / ( 1 << tz );\r\n\t}\r\n\r\n\tprotected toResolution( tz: number, tileSize: number ): number {\r\n\t\treturn ( 2 * DMapCoordinateEPSG3857.CIRCUMFERENCE_HALF ) / ( tileSize << tz );\r\n\t}\r\n\r\n\ttoTileCount( tz: number ): number {\r\n\t\treturn (1 << tz);\r\n\t}\r\n\r\n\ttoTileCode( tz: number, tx: number, ty: number ): number {\r\n\t\treturn (tx << tz) + ty;\r\n\t}\r\n}\r\n"]}