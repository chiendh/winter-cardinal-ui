{"version":3,"file":"d-table-data.js","sourceRoot":"","sources":["../../../src/main/typescript/wcardinal/ui/d-table-data.ts"],"names":[],"mappings":"","sourcesContent":["import { utils } from \"pixi.js\";\r\nimport { DBaseOnOptions } from \"./d-base\";\r\nimport { DTableDataFilter, DTableDataFilterFunction, DTableDataFilterObject } from \"./d-table-data-filter\";\r\nimport { DTableDataSelection, DTableDataSelectionOptions } from \"./d-table-data-selection\";\r\nimport { DTableDataComparatorFunction, DTableDataComparatorObject, DTableDataSorter } from \"./d-table-data-sorter\";\r\n\r\nexport type DTableDataMappedEachIteratee<ROW> = (\r\n\trow: ROW, supplimental: unknown, index: number, unmappedIndex: number\r\n) => void | boolean;\r\n\r\nexport interface DTableDataMapped<ROW> {\r\n\t/**\r\n\t * Returns an mapped index of the specified unmapped index.\r\n\t * A mapped index is an index on rows filters and sorters are applied.\r\n\t *\r\n\t * @param unmappedIndex a unmapped index\r\n\t */\r\n\tmap( unmappedIndex: number ): number | null;\r\n\r\n\t/**\r\n\t * Returns an unmapped index of the specified mapped index.\r\n\t * A mapped index is an index on rows filters and sorters are applied.\r\n\t *\r\n\t * @param index a mapped index\r\n\t */\r\n\tunmap( index: number ): number;\r\n\r\n\t/**\r\n\t * Returns a size of rows.\r\n\t */\r\n\tsize(): number;\r\n\r\n\t/**\r\n\t * Returns a row data at the specified index.\r\n\t * The index is an index on rows filters and sorters are applied.\r\n\t *\r\n\t * @param index a mapped index\r\n\t */\r\n\tget( index: number ): ROW | null;\r\n\r\n\t/**\r\n\t * Calls the specified iteratee on each mapped datum of the specified index range.\r\n\t * If called iteratee explicitly returns false, stops an iteration.\r\n\t *\r\n\t * @param iteratee an function called on each mapped datum\r\n\t * @param ifrom an index to start an iteration\r\n\t * @param ito an index before which an interation stops\r\n\t */\r\n\teach( iteratee: DTableDataMappedEachIteratee<ROW>, ifrom?: number, iend?: number ): void;\r\n}\r\n\r\nexport type DTableDataEachIteratee<ROW> = ( row: ROW, index: number ) => void | boolean;\r\n\r\nexport interface DTableDataOptions<ROW> {\r\n\t/**\r\n\t * Selection options.\r\n\t */\r\n\tselection?: DTableDataSelectionOptions;\r\n\r\n\t/**\r\n\t * A filter.\r\n\t */\r\n\tfilter?: DTableDataFilterFunction<ROW> | DTableDataFilterObject<ROW>;\r\n\r\n\t/**\r\n\t * A comparator.\r\n\t */\r\n\tcomparator?: DTableDataComparatorFunction<ROW> | DTableDataComparatorObject<ROW>;\r\n\r\n\t/**\r\n\t * Mappings of event names and event handlers.\r\n\t */\r\n\ton?: DBaseOnOptions;\r\n}\r\n\r\nexport interface DTableDataParent {\r\n\tlock(): void;\r\n\tunlock( callIfNeeded: boolean ): void;\r\n\tupdate( forcibly?: boolean ): void;\r\n}\r\n\r\nexport interface DTableData<ROW> extends utils.EventEmitter {\r\n\t/**\r\n\t * A data selection.\r\n\t */\r\n\treadonly selection: DTableDataSelection<ROW>;\r\n\r\n\t/**\r\n\t * A data filter.\r\n\t */\r\n\treadonly filter: DTableDataFilter<ROW>;\r\n\r\n\t/**\r\n\t * A data sorter.\r\n\t */\r\n\treadonly sorter: DTableDataSorter<ROW>;\r\n\r\n\t/**\r\n\t * Sorted and filtered data.\r\n\t */\r\n\treadonly mapped: DTableDataMapped<ROW>;\r\n\r\n\tbind( parent: DTableDataParent ): void;\r\n\r\n\t/**\r\n\t * Returns a size of rows.\r\n\t */\r\n\tsize(): number;\r\n\r\n\t/**\r\n\t * Returns a row data at the specified index.\r\n\t * The index is an index on rows filters and sorters are not applied.\r\n\t *\r\n\t * @param index  an index on rows filters and sorters are not applied\r\n\t */\r\n\tget( index: number ): ROW | null;\r\n\r\n\t/**\r\n\t * Calls the specified iteratee on each datum of the specified index range.\r\n\t * If called iteratee explicitly returns false, stops an iteration.\r\n\t *\r\n\t * @param iteratee an function called on each datum\r\n\t * @param ifrom an index to start an iteration\r\n\t * @param ito an index before which an interation stops\r\n\t */\r\n\teach( iteratee: DTableDataEachIteratee<ROW>, ifrom?: number, ito?: number ): void;\r\n}\r\n"]}