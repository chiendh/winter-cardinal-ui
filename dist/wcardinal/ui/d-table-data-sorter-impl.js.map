{"version":3,"file":"d-table-data-sorter-impl.js","sourceRoot":"","sources":["../../../src/main/typescript/wcardinal/ui/d-table-data-sorter-impl.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (C) 2019 Toshiba Corporation\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { utils } from \"pixi.js\";\r\nimport {\r\n\tDTableDataComparatorFunction, DTableDataComparatorObject,\r\n\tDTableDataOrder, DTableDataSorter\r\n} from \"./d-table-data-sorter\";\r\nimport { isFunction } from \"./util/is-function\";\r\n\r\nexport interface DTableDataSorterImplParent<ROW> {\r\n\treadonly rows: ROW[];\r\n\tupdate(): void;\r\n}\r\n\r\nexport class DTableDataSorterImpl<ROW> extends utils.EventEmitter implements DTableDataSorter<ROW> {\r\n\tprotected _id: number;\r\n\tprotected _idUpdated: number;\r\n\tprotected _isApplied: boolean;\r\n\tprotected _parent: DTableDataSorterImplParent<ROW>;\r\n\tprotected _comparator: DTableDataComparatorFunction<ROW> | DTableDataComparatorObject<ROW> | null;\r\n\tprotected _sorted: number[] | null;\r\n\tprotected _order: DTableDataOrder;\r\n\r\n\tconstructor( parent: DTableDataSorterImplParent<ROW> ) {\r\n\t\tsuper();\r\n\r\n\t\tthis._id = 0;\r\n\t\tthis._idUpdated = -1;\r\n\t\tthis._isApplied = false;\r\n\t\tthis._parent = parent;\r\n\t\tthis._comparator = null;\r\n\t\tthis._sorted = null;\r\n\t\tthis._order = DTableDataOrder.ASCENDING;\r\n\t}\r\n\r\n\tget id(): number {\r\n\t\treturn this._id;\r\n\t}\r\n\r\n\tget order(): DTableDataOrder {\r\n\t\treturn this._order;\r\n\t}\r\n\r\n\tset order( order: DTableDataOrder ) {\r\n\t\tthis._order = order;\r\n\t}\r\n\r\n\tapply(): void {\r\n\t\tthis._isApplied = true;\r\n\t\tthis._id += 1;\r\n\t\tthis._parent.update();\r\n\t}\r\n\r\n\tunapply(): void {\r\n\t\tif( this._isApplied ) {\r\n\t\t\tthis._isApplied = false;\r\n\t\t\tthis._id += 1;\r\n\t\t\tthis._parent.update();\r\n\t\t}\r\n\t}\r\n\r\n\tisApplied(): boolean {\r\n\t\treturn this._isApplied;\r\n\t}\r\n\r\n\tprotected newSorted(): number[] | null {\r\n\t\tconst comparator = this._comparator;\r\n\t\tif( comparator != null ) {\r\n\t\t\tconst parent = this._parent;\r\n\t\t\tconst sorted: number[] = [];\r\n\t\t\tconst rows: ROW[] = parent.rows;\r\n\t\t\tfor( let i = 0, imax = rows.length; i < imax; ++i ) {\r\n\t\t\t\tsorted.push( i );\r\n\t\t\t}\r\n\t\t\tsorted.sort( this.toComparator( rows, comparator ) );\r\n\t\t\treturn sorted;\r\n\t\t} else {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected toComparator(\r\n\t\trows: ROW[],\r\n\t\tcomparator: DTableDataComparatorFunction<ROW> | DTableDataComparatorObject<ROW>\r\n\t): ( indexA: number, indexB: number) => number {\r\n\t\tconst order = this._order;\r\n\t\tif( isFunction( comparator ) ) {\r\n\t\t\tif( order === DTableDataOrder.ASCENDING ) {\r\n\t\t\t\treturn ( indexA: number, indexB: number ): number => {\r\n\t\t\t\t\treturn comparator(\r\n\t\t\t\t\t\trows[ indexA ], rows[ indexB ],\r\n\t\t\t\t\t\tindexA, indexB\r\n\t\t\t\t\t);\r\n\t\t\t\t};\r\n\t\t\t} else {\r\n\t\t\t\treturn ( indexA: number, indexB: number ): number => {\r\n\t\t\t\t\treturn comparator(\r\n\t\t\t\t\t\trows[ indexB ], rows[ indexA ],\r\n\t\t\t\t\t\tindexB, indexA\r\n\t\t\t\t\t);\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif( order === DTableDataOrder.ASCENDING ) {\r\n\t\t\t\treturn ( indexA: number, indexB: number ): number => {\r\n\t\t\t\t\treturn comparator.compare(\r\n\t\t\t\t\t\trows[ indexA ], rows[ indexB ],\r\n\t\t\t\t\t\tindexA, indexB\r\n\t\t\t\t\t);\r\n\t\t\t\t};\r\n\t\t\t} else {\r\n\t\t\t\treturn ( indexA: number, indexB: number ): number => {\r\n\t\t\t\t\treturn comparator.compare(\r\n\t\t\t\t\t\trows[ indexB ], rows[ indexA ],\r\n\t\t\t\t\t\tindexB, indexA\r\n\t\t\t\t\t);\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tget(): DTableDataComparatorFunction<ROW> | DTableDataComparatorObject<ROW> | null {\r\n\t\treturn this._comparator;\r\n\t}\r\n\r\n\tset( comparator: DTableDataComparatorFunction<ROW> | DTableDataComparatorObject<ROW> | null ): void {\r\n\t\tif( this._comparator !== comparator ) {\r\n\t\t\tthis._comparator = comparator;\r\n\t\t}\r\n\t}\r\n\r\n\ttoDirty(): void {\r\n\t\tthis._id += 1;\r\n\t}\r\n\r\n\tupdate(): void {\r\n\t\tif( this._id !== this._idUpdated ) {\r\n\t\t\tthis._idUpdated = this._id;\r\n\t\t\tif( this._isApplied ) {\r\n\t\t\t\tthis._sorted = this.newSorted();\r\n\t\t\t\tthis.emit( \"change\", this );\r\n\t\t\t} else if( this._sorted != null ) {\r\n\t\t\t\tthis._sorted = null;\r\n\t\t\t\tthis.emit( \"change\", this );\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tget indices(): number[] | null {\r\n\t\tthis.update();\r\n\t\treturn this._sorted;\r\n\t}\r\n\r\n\tmap( unmappedIndex: number ): number | null {\r\n\t\tlet result = unmappedIndex;\r\n\r\n\t\tconst indicesSorted = this.indices;\r\n\t\tif( indicesSorted ) {\r\n\t\t\tconst index = indicesSorted.indexOf( result );\r\n\t\t\tif( 0 <= index ) {\r\n\t\t\t\tresult = index;\r\n\t\t\t} else {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\tunmap( index: number ): number {\r\n\t\tlet result = index;\r\n\r\n\t\tconst indicesSorted = this.indices;\r\n\t\tif( indicesSorted ) {\r\n\t\t\tresult = indicesSorted[ result ];\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n}\r\n"]}