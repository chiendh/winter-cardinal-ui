{"version":3,"file":"d-chart-series-line.js","sourceRoot":"","sources":["../../../src/main/typescript/wcardinal/ui/d-chart-series-line.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (C) 2019 Toshiba Corporation\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { IPoint, Point } from \"pixi.js\";\r\nimport { DApplications } from \"./d-applications\";\r\nimport { DChartCoordinate } from \"./d-chart-coordinate\";\r\nimport { DChartSeriesHitResult } from \"./d-chart-series\";\r\nimport { DChartSeriesBase, DChartSeriesBaseOptions } from \"./d-chart-series-base\";\r\nimport { DChartSeriesContainer } from \"./d-chart-series-container\";\r\nimport { DChartSeriesStrokeComputed, DChartSeriesStrokeComputedOptions } from \"./d-chart-series-stroke-computed\";\r\nimport { EShapeLine } from \"./shape/variant/e-shape-line\";\r\nimport { toCeilingIndex } from \"./util/to-ceiling-index\";\r\n\r\n/**\r\n * {@link DChartSeriesLine} options.\r\n */\r\nexport interface DChartSeriesLineOptions extends DChartSeriesBaseOptions {\r\n\tpoints?: Array<number | null>;\r\n\tstroke?: DChartSeriesStrokeComputedOptions;\r\n}\r\n\r\n/**\r\n * A series represents a polyline.\r\n * Data points must be sorted in ascending order on the X axis.\r\n */\r\nexport class DChartSeriesLine extends DChartSeriesBase {\r\n\tprotected static WORK: Point = new Point();\r\n\tprotected _line: EShapeLine | null;\r\n\tprotected _options?: DChartSeriesLineOptions;\r\n\tprotected _points: Array<number | null>;\r\n\tprotected _pointId: number;\r\n\tprotected _pointIdUpdated: number;\r\n\tprotected _stroke?: DChartSeriesStrokeComputed;\r\n\tprotected _centerX: number;\r\n\tprotected _centerY: number;\r\n\r\n\tconstructor( options?: DChartSeriesLineOptions ) {\r\n\t\tsuper( options );\r\n\t\tthis._line = null;\r\n\t\tthis._options = options;\r\n\t\tthis._points = (options && options.points) || [];\r\n\t\tthis._pointId = 0;\r\n\t\tthis._pointIdUpdated = NaN;\r\n\t\tthis._centerX = 0;\r\n\t\tthis._centerY = 0;\r\n\t}\r\n\r\n\tbind( container: DChartSeriesContainer, index: number ): void {\r\n\t\tlet line = this._line;\r\n\t\tif( ! line ) {\r\n\t\t\tconst stroke = this._stroke = container.newStroke( index, this._options?.stroke );\r\n\t\t\tline = this._line = new EShapeLine([], [], stroke.width, stroke.style);\r\n\t\t\tline.stroke.copy( stroke );\r\n\t\t}\r\n\t\tline.attach( container.plotArea.container, index );\r\n\t\tthis._pointIdUpdated = NaN;\r\n\t\tsuper.bind( container, index );\r\n\t}\r\n\r\n\tunbind(): void {\r\n\t\tconst line = this._line;\r\n\t\tif( line ) {\r\n\t\t\tline.detach();\r\n\t\t}\r\n\t\tsuper.unbind();\r\n\t}\r\n\r\n\tget shape(): EShapeLine | null {\r\n\t\treturn this._line;\r\n\t}\r\n\r\n\tget points(): Array<number | null> {\r\n\t\treturn this._points;\r\n\t}\r\n\r\n\tset points( points: Array<number | null> ) {\r\n\t\tthis._points = points;\r\n\t\tthis._pointId += 1;\r\n\t}\r\n\r\n\ttoDirty(): void {\r\n\t\tthis._pointId += 1;\r\n\t}\r\n\r\n\tupdate(): void {\r\n\t\tconst line = this._line;\r\n\t\tif( line ) {\r\n\t\t\tconst coordinate = this._coordinate;\r\n\t\t\tconst coordinateX = coordinate.x;\r\n\t\t\tconst coordinateY = coordinate.y;\r\n\t\t\tif( coordinateX && coordinateY ) {\r\n\t\t\t\tconst pointId = this._pointId;\r\n\t\t\t\tconst isPointChanged = ( pointId !== this._pointIdUpdated );\r\n\t\t\t\tconst isCoordinateChanged = coordinate.isDirty( coordinateX, coordinateY );\r\n\t\t\t\tconst isCoordinateTransformChanged = coordinate.isTransformDirty( coordinateX, coordinateY );\r\n\t\t\t\tif( isPointChanged || isCoordinateChanged || isCoordinateTransformChanged ) {\r\n\t\t\t\t\tthis._pointIdUpdated = pointId;\r\n\t\t\t\t\tthis.updateLine(\r\n\t\t\t\t\t\tline,\r\n\t\t\t\t\t\tcoordinateX,\r\n\t\t\t\t\t\tcoordinateY,\r\n\t\t\t\t\t\tisPointChanged || isCoordinateChanged\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprotected updateLine(\r\n\t\tline: EShapeLine,\r\n\t\txcoordinate: DChartCoordinate,\r\n\t\tycoordinate: DChartCoordinate,\r\n\t\tisPointsDirty: boolean\r\n\t): void {\r\n\t\tline.disallowUploadedUpdate();\r\n\t\tif( isPointsDirty ) {\r\n\t\t\tconst values = line.points.values;\r\n\t\t\tconst segments = line.points.segments;\r\n\t\t\tconst valuesLength = values.length;\r\n\t\t\tconst segmentsLength = segments.length;\r\n\t\t\tlet ivalues = 0;\r\n\t\t\tlet isegments = 0;\r\n\t\t\tconst points = this._points;\r\n\t\t\tlet xmin = NaN;\r\n\t\t\tlet xmax = NaN;\r\n\t\t\tlet ymin = NaN;\r\n\t\t\tlet ymax = NaN;\r\n\t\t\tfor( let i = 0, imax = points.length; i < imax; i += 2 ) {\r\n\t\t\t\tconst x = points[ i ];\r\n\t\t\t\tconst y = points[ i + 1 ];\r\n\t\t\t\tif( x != null && y != null ) {\r\n\t\t\t\t\tif( ivalues < valuesLength ) {\r\n\t\t\t\t\t\tvalues[ ivalues ] = x;\r\n\t\t\t\t\t\tvalues[ ivalues + 1 ] = y;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tvalues.push( x, y );\r\n\t\t\t\t\t}\r\n\t\t\t\t\tivalues += 2;\r\n\t\t\t\t\tif( xmin !== xmin ) {\r\n\t\t\t\t\t\txmin = x;\r\n\t\t\t\t\t\txmax = x;\r\n\t\t\t\t\t\tymin = y;\r\n\t\t\t\t\t\tymax = y;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\txmin = Math.min( xmin, x );\r\n\t\t\t\t\t\txmax = Math.max( xmax, x );\r\n\t\t\t\t\t\tymin = Math.min( ymin, y );\r\n\t\t\t\t\t\tymax = Math.max( ymax, y );\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconst segment = (i >> 1) - isegments;\r\n\t\t\t\t\tif( isegments < segmentsLength ) {\r\n\t\t\t\t\t\tsegments[ isegments ] = segment;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tsegments.push( segment );\r\n\t\t\t\t\t}\r\n\t\t\t\t\tisegments += 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif( values.length !== ivalues ) {\r\n\t\t\t\tvalues.length = ivalues;\r\n\t\t\t}\r\n\t\t\tif( segments.length !== isegments ) {\r\n\t\t\t\tsegments.length = isegments;\r\n\t\t\t}\r\n\r\n\t\t\txcoordinate.mapAll( values, 0, ivalues, 2, 0 );\r\n\t\t\tycoordinate.mapAll( values, 0, ivalues, 2, 1 );\r\n\r\n\t\t\tif( xmin !== xmin ) {\r\n\t\t\t\txmin = 0;\r\n\t\t\t\txmax = 0;\r\n\t\t\t\tymin = 0;\r\n\t\t\t\tymax = 0;\r\n\t\t\t}\r\n\r\n\t\t\txmin = xcoordinate.map( xmin );\r\n\t\t\txmax = xcoordinate.map( xmax );\r\n\t\t\tymin = ycoordinate.map( ymin );\r\n\t\t\tymax = ycoordinate.map( ymax );\r\n\r\n\t\t\tconst sx = Math.abs( xmax - xmin );\r\n\t\t\tconst sy = Math.abs( ymax - ymin );\r\n\t\t\tconst cx = ( xmin + xmax ) * 0.5;\r\n\t\t\tconst cy = ( ymin + ymax ) * 0.5;\r\n\t\t\tfor( let i = 0, imax = values.length; i < imax; i += 2 ) {\r\n\t\t\t\tvalues[ i + 0 ] -= cx;\r\n\t\t\t\tvalues[ i + 1 ] -= cy;\r\n\t\t\t}\r\n\r\n\t\t\tline.size.set( sx, sy );\r\n\t\t\tline.points.set( values, segments );\r\n\t\t\tthis._centerX = cx;\r\n\t\t\tthis._centerY = cy;\r\n\t\t}\r\n\r\n\t\tline.transform.position.set(\r\n\t\t\txcoordinate.transform.map( this._centerX ),\r\n\t\t\tycoordinate.transform.map( this._centerY )\r\n\t\t);\r\n\t\tline.transform.scale.set(\r\n\t\t\txcoordinate.transform.scale,\r\n\t\t\tycoordinate.transform.scale\r\n\t\t);\r\n\r\n\t\tline.allowUploadedUpdate();\r\n\t\tDApplications.update( line );\r\n\t}\r\n\r\n\tprotected updateRegion(): void {\r\n\t\tconst pointId = this._pointId;\r\n\t\tif( this._regionPointId !== pointId ) {\r\n\t\t\tthis._regionPointId = pointId;\r\n\r\n\t\t\tconst points = this._points;\r\n\t\t\tconst domain = this._domain;\r\n\t\t\tconst range = this._range;\r\n\t\t\tdomain.clear();\r\n\t\t\trange.clear();\r\n\t\t\tif( points != null ) {\r\n\t\t\t\tfor( let i = 0, imax = points.length; i < imax; i += 2 ) {\r\n\t\t\t\t\tconst xraw = points[ i ];\r\n\t\t\t\t\tif( xraw != null ) {\r\n\t\t\t\t\t\tdomain.add( xraw, xraw );\r\n\t\t\t\t\t}\r\n\t\t\t\t\tconst yraw = points[ i + 1 ];\r\n\t\t\t\t\tif( yraw != null ) {\r\n\t\t\t\t\t\trange.add( yraw, yraw );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tdestroy(): void {\r\n\t\tconst line = this._line;\r\n\t\tif( line ) {\r\n\t\t\tthis._line = null;\r\n\t\t\tline.detach();\r\n\t\t\tline.destroy();\r\n\t\t}\r\n\r\n\t\tthis._points.length = 0;\r\n\t\tthis._pointId = 0;\r\n\t\tthis._pointIdUpdated = NaN;\r\n\t\tsuper.destroy();\r\n\t}\r\n\r\n\thitTest( global: IPoint ): boolean {\r\n\t\tconst line = this._line;\r\n\t\tif( line ) {\r\n\t\t\tconst work = DChartSeriesLine.WORK;\r\n\t\t\tconst local = line.toLocal( global, undefined, work );\r\n\t\t\treturn line.contains( local ) != null;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tcalcHitPoint( global: IPoint, result: DChartSeriesHitResult ): boolean {\r\n\t\tconst line = this._line;\r\n\t\tif( line ) {\r\n\t\t\tconst work = DChartSeriesLine.WORK;\r\n\t\t\tconst local = line.toLocal( global, undefined, work );\r\n\t\t\tresult.shape = line;\r\n\t\t\treturn line.calcHitPoint( local, this.toThreshold, this.calcHitPointTestRange, this.calcHitPointHitTester, result );\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tprotected toThreshold( this: unknown, strokeWidth: number, strokeScale: number ): number {\r\n\t\treturn +Infinity;\r\n\t}\r\n\r\n\tcalcHitPointTestRange(\r\n\t\tthis: unknown,\r\n\t\tx: number, y: number,\r\n\t\tthreshold: number,\r\n\t\tvalues: number[],\r\n\t\tresult: [ number, number ]\r\n\t): [ number, number ] {\r\n\t\tconst index = toCeilingIndex( values, x, 2, 0 );\r\n\t\tresult[ 0 ] = Math.max( 0, index - 1 );\r\n\t\tresult[ 1 ] = index;\r\n\t\treturn result;\r\n\t}\r\n\r\n\tcalcHitPointHitTester(\r\n\t\tthis: unknown,\r\n\t\tx: number, y: number,\r\n\t\tp0x: number, p0y: number,\r\n\t\tp1x: number, p1y: number,\r\n\t\tindex: number,\r\n\t\tthreshold: number,\r\n\t\tresult: DChartSeriesHitResult\r\n\t): boolean {\r\n\t\tif( p0x <= x && x < p1x ) {\r\n\t\t\tconst l = p1x - p0x;\r\n\t\t\tif( 0.0001 < Math.abs( l ) ) {\r\n\t\t\t\tconst t = (x - p0x) / l;\r\n\t\t\t\tconst p2x = x;\r\n\t\t\t\tconst p2y = p0y + t * (p1y - p0y);\r\n\t\t\t\tconst distance = Math.abs(p2y - y);\r\n\t\t\t\tif( distance < threshold ) {\r\n\t\t\t\t\tconst position = result.shape!.transform.position;\r\n\t\t\t\t\tconst px = position.x;\r\n\t\t\t\t\tconst py = position.y;\r\n\t\t\t\t\tresult.x = px + p2x;\r\n\t\t\t\t\tresult.y = py + p2y;\r\n\t\t\t\t\tresult.p0x = px + p0x;\r\n\t\t\t\t\tresult.p0y = py + p0y;\r\n\t\t\t\t\tresult.p1x = px + p1x;\r\n\t\t\t\t\tresult.p1y = py + p1y;\r\n\t\t\t\t\tresult.t = t;\r\n\t\t\t\t\tresult.index = index;\r\n\t\t\t\t\tresult.distance = distance;\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n}\r\n"]}