{"version":3,"file":"d-button-file.js","sourceRoot":"","sources":["../../../src/main/typescript/wcardinal/ui/d-button-file.ts"],"names":[],"mappings":"AAAA;;;GAGG;;AAEH,OAAO,EAAE,OAAO,EAAkD,MAAM,YAAY,CAAC;AACrF,OAAO,EAAE,QAAQ,EAAE,MAAM,kBAAkB,CAAC;AAC5C,OAAO,EAAE,UAAU,EAAqB,cAAc,EAAE,MAAM,yBAAyB,CAAC;AAExF,MAAM,KAAQ,aAAa,GAAG,UAAU,CAAC;AAgCzC;IAIU,+BAA8B;IAJxC;;IA+CA,CAAC;IAvCU,0BAAI,GAAd,UAAgB,OAAiB;QAAjC,iBAsBC;QArBA,iBAAM,IAAI,YAAE,OAAO,CAAE,CAAC;QAEtB,IAAI,CAAC,QAAQ,GAAG,CAAE,OAAO,IAAI,IAAI,IAAI,OAAO,CAAC,OAAO,IAAI,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,CAAE,CAAC;QAC7F,IAAM,EAAE,GAAkB,CAAE,OAAO,IAAI,IAAI,IAAI,OAAO,CAAC,EAAE,IAAI,IAAI,CAAC,CAAC;YAClE,CAAE,QAAQ,CAAE,OAAO,CAAC,EAAE,CAAE,CAAC,CAAC,CAAC,aAAa,CAAE,OAAO,CAAC,EAAE,CAAE,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAE,CAAC,CAAC;YACvE,aAAa,CAAC,IAAI,CAClB,CAAC;QACF,IAAM,MAAM,GAAG,IAAI,cAAc,CAAE,EAAE,EAAE,IAAI,CAAE,CAAC;QAC9C,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,EAAE,CAAE,QAAQ,EAAE;YAClB,IAAM,MAAM,GAAG,KAAI,CAAC,SAAS,EAAE,CAAC;YAChC,IAAI,MAAM,KAAK,IAAI,EAAG;gBACrB,MAAM,CAAC,IAAI,EAAE,CAAC;aACd;iBAAM,IAAI,MAAM,KAAK,KAAK,EAAG;gBAC7B,aAAa;aACb;iBAAM;gBACN,MAAM,CAAC,IAAI,CAAC;oBACX,MAAM,CAAC,IAAI,EAAE,CAAC;gBACf,CAAC,CAAC,CAAC;aACH;QACF,CAAC,CAAC,CAAC;IACJ,CAAC;IAED,+BAAS,GAAT;QACC,IAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC9B,IAAI,OAAO,IAAI,IAAI,EAAG;YACrB,OAAO,OAAO,EAAE,CAAC;SACjB;QACD,OAAO,IAAI,CAAC;IACb,CAAC;IAED,0BAAI,GAAJ;QACC,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;IACrB,CAAC;IAES,6BAAO,GAAjB;QACC,OAAO,aAAa,CAAC;IACtB,CAAC;IACF,kBAAC;AAAD,CAAC,AA/CD,CAIU,OAAO,GA2ChB","sourcesContent":["/*\r\n * Copyright (C) 2019 Toshiba Corporation\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { DButton, DButtonOnOptions, DButtonOptions, DThemeButton } from \"./d-button\";\r\nimport { isString } from \"./util/is-string\";\r\nimport { UtilFileAs, UtilFileOnOptions, UtilFileOpener } from \"./util/util-file-opener\";\r\n\r\nexport import DButtonFileAs = UtilFileAs;\r\n\r\n/**\r\n * Mappings of event names and handlers.\r\n */\r\nexport interface DButtonFileOnOptions<VALUE> extends DButtonOnOptions<VALUE>, UtilFileOnOptions<any> {\r\n\r\n}\r\n\r\nexport interface DButtonFileOptions<\r\n\tVALUE = unknown,\r\n\tTHEME extends DThemeButtonFile = DThemeButtonFile\r\n> extends DButtonOptions<VALUE, THEME> {\r\n\t/**\r\n\t * An output format.\r\n\t */\r\n\tas?: (keyof typeof UtilFileAs) | UtilFileAs;\r\n\r\n\t/**\r\n\t * A checker called before opening a file.\r\n\t * If the checker returns false or the returned promise object is rejected,\r\n\t * files will not be opened.\r\n\t */\r\n\tchecker?: () => Promise<unknown> | boolean;\r\n\r\n\ton?: DButtonFileOnOptions<VALUE>;\r\n}\r\n\r\nexport interface DThemeButtonFile extends DThemeButton {\r\n\r\n}\r\n\r\nexport class DButtonFile<\r\n\tVALUE = unknown,\r\n\tTHEME extends DThemeButtonFile = DThemeButtonFile,\r\n\tOPTIONS extends DButtonFileOptions<VALUE, THEME> = DButtonFileOptions<VALUE, THEME>\r\n> extends DButton<VALUE, THEME, OPTIONS> {\r\n\tprotected _checker!: (() => Promise<unknown> | boolean) | undefined;\r\n\tprotected _opener!: UtilFileOpener;\r\n\r\n\tprotected init( options?: OPTIONS ): void {\r\n\t\tsuper.init( options );\r\n\r\n\t\tthis._checker = ( options != null && options.checker != null ? options.checker : undefined );\r\n\t\tconst as: DButtonFileAs = ( options != null && options.as != null ?\r\n\t\t\t( isString( options.as ) ? DButtonFileAs[ options.as ] : options.as ) :\r\n\t\t\tDButtonFileAs.TEXT\r\n\t\t);\r\n\t\tconst opener = new UtilFileOpener( as, this );\r\n\t\tthis._opener = opener;\r\n\t\tthis.on( \"active\", (): void => {\r\n\t\t\tconst result = this.onOpening();\r\n\t\t\tif( result === true ) {\r\n\t\t\t\topener.open();\r\n\t\t\t} else if( result === false ) {\r\n\t\t\t\t// DO NOTHING\r\n\t\t\t} else {\r\n\t\t\t\tresult.then((): void => {\r\n\t\t\t\t\topener.open();\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tonOpening(): boolean | Promise<unknown> {\r\n\t\tconst checker = this._checker;\r\n\t\tif( checker != null ) {\r\n\t\t\treturn checker();\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\topen(): void {\r\n\t\tthis._opener.open();\r\n\t}\r\n\r\n\tprotected getType(): string {\r\n\t\treturn \"DButtonFile\";\r\n\t}\r\n}\r\n"]}