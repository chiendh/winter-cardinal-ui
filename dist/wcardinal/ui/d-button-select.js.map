{"version":3,"file":"d-button-select.js","sourceRoot":"","sources":["../../../src/main/typescript/wcardinal/ui/d-button-select.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (C) 2019 Toshiba Corporation\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { DBaseState } from \"./d-base-state\";\r\nimport { DButton, DButtonOnOptions, DButtonOptions, DThemeButton } from \"./d-button\";\r\nimport { DDialogSelect, DDialogSelectOptions } from \"./d-dialog-select\";\r\n\r\n/**\r\n * A dialog to select values.\r\n */\r\nexport interface DButtonSelectDialog<VALUE> {\r\n\treadonly value: VALUE | null;\r\n\topen(): Promise<void>;\r\n}\r\n\r\n/**\r\n * A function to retrieve a selected value from a dialog.\r\n */\r\nexport type DButtonSelectGetter<VALUE, DIALOG> = ( dialog: DIALOG ) => VALUE | null;\r\n\r\n/**\r\n * A function to set a selecte value to a dialog.\r\n * Called before opening a dialog.\r\n */\r\nexport type DButtonSelectSetter<VALUE, DIALOG> = ( dialog: DIALOG, value: VALUE | null ) => void;\r\n\r\n/**\r\n * Mappings of event names and handlers.\r\n */\r\nexport interface DButtonSelectOnOptions<VALUE> extends DButtonOnOptions<VALUE> {\r\n\t/**\r\n\t * Triggered when a selection is changed.\r\n\t *\r\n\t * @param newValue a newly selected value\r\n\t * @param oldValue a previously selected value\r\n\t * @param self a button\r\n\t */\r\n\tchange?: ( newValue: VALUE | null, oldValue: VALUE | null, self: any ) => void;\r\n}\r\n\r\nexport interface DButtonSelectOptions<\r\n\tVALUE extends unknown = unknown,\r\n\tDIALOG_VALUE extends unknown = unknown,\r\n\tDIALOG extends DButtonSelectDialog<DIALOG_VALUE> = DButtonSelectDialog<DIALOG_VALUE>,\r\n\tTHEME extends DThemeButtonSelect = DThemeButtonSelect\r\n> extends DButtonOptions<VALUE | null, THEME> {\r\n\t/**\r\n\t * A function to retrieve a selected value from a dialog.\r\n\t */\r\n\tgetter?: DButtonSelectGetter<VALUE, DIALOG>;\r\n\r\n\t/**\r\n\t * A function to set a selected value to a dialog.\r\n\t * Called before opening a dialog.\r\n\t */\r\n\tsetter?: DButtonSelectSetter<VALUE, DIALOG>;\r\n\r\n\t/**\r\n\t * A dialog to select values.\r\n\t */\r\n\tdialog?: DDialogSelectOptions<DIALOG_VALUE> | DIALOG;\r\n\r\n\ton?: DButtonSelectOnOptions<VALUE>;\r\n}\r\n\r\nexport interface DThemeButtonSelect extends DThemeButton {\r\n\tgetTextFormatter(): ( value: unknown | null, caller: DButtonSelect ) => string;\r\n\tgetTextValue( state: DBaseState ): unknown | null;\r\n\tnewTextValue(): unknown | null;\r\n}\r\n\r\nconst defaultGetter = ( dialog: DButtonSelectDialog<any> ): any => {\r\n\t// Assumes the dialog.value is VALUE.\r\n\treturn dialog.value;\r\n};\r\n\r\nconst defaultSetter = (): void => {\r\n\t// DO NOTHING\r\n};\r\n\r\nexport class DButtonSelect<\r\n\tVALUE extends unknown = unknown,\r\n\tDIALOG_VALUE extends unknown = unknown,\r\n\tDIALOG extends DButtonSelectDialog<DIALOG_VALUE> = DButtonSelectDialog<DIALOG_VALUE>,\r\n\tTHEME extends DThemeButtonSelect = DThemeButtonSelect,\r\n\tOPTIONS extends DButtonSelectOptions<VALUE, DIALOG_VALUE, DIALOG, THEME>\r\n\t\t= DButtonSelectOptions<VALUE, DIALOG_VALUE, DIALOG, THEME>\r\n> extends DButton<VALUE | null, THEME, OPTIONS> {\r\n\tprotected _dialog?: DIALOG;\r\n\r\n\tprotected init( options?: OPTIONS ) {\r\n\t\tsuper.init( this.toOptions( options ) );\r\n\r\n\t\tconst getter: DButtonSelectGetter<VALUE, DIALOG> = (options && options.getter) || defaultGetter;\r\n\t\tconst setter: DButtonSelectSetter<VALUE, DIALOG> = (options && options.setter) || defaultSetter;\r\n\t\tthis.on( \"active\", (): void => {\r\n\t\t\tconst dialog = this.dialog;\r\n\t\t\tsetter( dialog, this._textValueComputed );\r\n\t\t\tdialog.open().then((): void => {\r\n\t\t\t\tconst newValue = getter( dialog );\r\n\t\t\t\tconst oldValue = this._textValueComputed;\r\n\t\t\t\tif( newValue !== oldValue ) {\r\n\t\t\t\t\tthis.text = newValue;\r\n\t\t\t\t\tthis.emit( \"change\", newValue, oldValue, this );\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\tget dialog(): DIALOG {\r\n\t\tlet dialog = this._dialog;\r\n\t\tif( dialog == null ) {\r\n\t\t\tconst options = this._options;\r\n\t\t\tconst dialogOptions = options && options.dialog;\r\n\t\t\tif( dialogOptions && (\"open\" in dialogOptions) ) {\r\n\t\t\t\tdialog = dialogOptions;\r\n\t\t\t} else {\r\n\t\t\t\t// Assumes DIALOG === DDialogSelect<DIALOG_VALUE>.\r\n\t\t\t\tdialog = new DDialogSelect<DIALOG_VALUE>( dialogOptions ) as unknown as DIALOG;\r\n\t\t\t}\r\n\t\t\tthis._dialog = dialog;\r\n\t\t}\r\n\t\treturn dialog;\r\n\t}\r\n\r\n\tprotected toOptions( options?: OPTIONS ): OPTIONS | undefined {\r\n\t\tif( options ) {\r\n\t\t\t// Try to copy text.formatter to dialog.item.text.formatter at first\r\n\t\t\tconst formatter = options.text?.formatter;\r\n\t\t\tif( formatter !== undefined ) {\r\n\t\t\t\tlet dialog = options.dialog;\r\n\t\t\t\tif( ! (dialog && \"open\" in dialog) ) {\r\n\t\t\t\t\tdialog = dialog || {};\r\n\t\t\t\t\tconst item = dialog.item = dialog.item || {};\r\n\t\t\t\t\tconst text = item.text = item.text || {};\r\n\t\t\t\t\tif( text.formatter === undefined ) {\r\n\t\t\t\t\t\t// Assumes formatter is ( value: DIALOG_VALUE | null, caller: any ) => string.\r\n\t\t\t\t\t\ttext.formatter = formatter as any;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t// Try to copy dialog.item.text.formatter to text.formatter\r\n\t\t\t\tconst dialog = options.dialog;\r\n\t\t\t\tif( ! (dialog && \"open\" in dialog) ) {\r\n\t\t\t\t\tconst dialogFormatter = dialog?.item?.text?.formatter;\r\n\t\t\t\t\tif( dialogFormatter !== undefined ) {\r\n\t\t\t\t\t\tconst text = options.text = options.text || {};\r\n\t\t\t\t\t\tif( text.formatter === undefined ) {\r\n\t\t\t\t\t\t\t// Assumes dialogFormatter is ( value: VALUE | null, caller: any ) => string.\r\n\t\t\t\t\t\t\ttext.formatter = dialogFormatter as any;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn options;\r\n\t}\r\n\r\n\tget value(): VALUE | null {\r\n\t\treturn this._textValueComputed;\r\n\t}\r\n\r\n\tset value( value: VALUE | null ) {\r\n\t\tthis.text = value;\r\n\t}\r\n\r\n\tprotected getType(): string {\r\n\t\treturn \"DButtonSelect\";\r\n\t}\r\n}\r\n"]}