{"version":3,"file":"d-list-item.js","sourceRoot":"","sources":["../../../src/main/typescript/wcardinal/ui/d-list-item.ts"],"names":[],"mappings":"AAAA;;;GAGG;;AAKH,OAAO,EAAE,WAAW,EAAE,MAAM,iBAAiB,CAAC;AAC9C,OAAO,EAAE,MAAM,EAA8B,MAAM,WAAW,CAAC;AAE/D,OAAO,EAAE,iBAAiB,EAAE,MAAM,4BAA4B,CAAC;AAc/D,gBAAgB;AAChB,IAAM,OAAO,GAAG,UAAuC,OAAwC;IAC9F,OAAO,CAAE,OAAO,IAAI,IAAI,IAAI,OAAO,CAAC,KAAK,IAAI,IAAI,CAAC,CAAC;QAClD,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAE,CAAC;AACzB,CAAC,CAAC;AAMF;IAIU,6BAA8B;IAJxC;;IA4DA,CAAC;IArDU,wBAAI,GAAd,UAAgB,OAAiB;QAChC,iBAAM,IAAI,YAAE,OAAO,CAAE,CAAC;QACtB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QACvB,IAAI,CAAC,MAAM,GAAG,OAAO,CAAE,OAAO,CAAE,CAAC;IAClC,CAAC;IAED,sBAAI,4BAAK;aAAT;YACC,OAAO,IAAI,CAAC,MAAM,CAAC;QACpB,CAAC;aAED,UAAW,KAAmB;YAC7B,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACrB,CAAC;;;OAJA;IAMS,gCAAY,GAAtB,UAAwB,MAAW;QAClC,OAAO,CAAE,MAAM,IAAI,MAAM,CAAC,SAAS,IAAI,MAAM,CAAC,SAAS,CAAC,GAAG,CAAE,CAAC;IAC/D,CAAC;IAES,gCAAY,GAAtB;QACC,IAAI,MAAM,GAAG,IAAI,CAAC,MAAa,CAAC;QAChC,OAAO,MAAM,EAAG;YACf,IAAI,IAAI,CAAC,YAAY,CAAE,MAAM,CAAE,EAAG;gBACjC,OAAO,MAAM,CAAC,SAAS,CAAC;aACxB;YACD,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;SACvB;QACD,OAAO,IAAI,CAAC;IACb,CAAC;IAES,4BAAQ,GAAlB,UAAoB,CAA+C;QAClE,IAAI,CAAC,IAAI,CAAE,QAAQ,EAAE,IAAI,CAAE,CAAC;QAC5B,IAAM,SAAS,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;QACtC,IAAI,SAAS,EAAG;YACf,SAAS,CAAC,GAAG,CAAE,IAAI,CAAE,CAAC;SACtB;IACF,CAAC;IAED,6BAAS,GAAT,UAAW,CAAgB;QAC1B,IAAI,IAAI,CAAC,YAAY,EAAE,IAAI,IAAI,CAAC,SAAS,EAAE,IAAI,iBAAiB,CAAC,aAAa,CAAE,CAAC,CAAE,EAAG;YACrF,IAAI,CAAC,QAAQ,CAAE,CAAC,CAAE,CAAC;SACnB;QAED,OAAO,iBAAM,SAAS,YAAE,CAAC,CAAE,CAAC;IAC7B,CAAC;IAES,iCAAa,GAAvB,UAAyB,QAAgB,EAAE,QAAgB;QAC1D,iBAAM,aAAa,YAAE,QAAQ,EAAE,QAAQ,CAAE,CAAC;QAC1C,IAAI,CAAC,UAAU,GAAG,WAAW,CAAC,YAAY,CAAE,QAAQ,CAAE,CAAC;IACxD,CAAC;IAES,2BAAO,GAAjB;QACC,OAAO,WAAW,CAAC;IACpB,CAAC;IACF,gBAAC;AAAD,CAAC,AA5DD,CAIU,MAAM,GAwDf","sourcesContent":["/*\r\n * Copyright (C) 2019 Toshiba Corporation\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { interaction } from \"pixi.js\";\r\nimport { DBase } from \"./d-base\";\r\nimport { DBaseState } from \"./d-base-state\";\r\nimport { DBaseStates } from \"./d-base-states\";\r\nimport { DImage, DImageOptions, DThemeImage } from \"./d-image\";\r\nimport { DStateAwareOrValueMightBe } from \"./d-state-aware\";\r\nimport { UtilKeyboardEvent } from \"./util/util-keyboard-event\";\r\n\r\nexport interface DListItemOptions<\r\n\tVALUE = unknown,\r\n\tTHEME extends DThemeListItem = DThemeListItem\r\n> extends DImageOptions<string, THEME> {\r\n\tvalue?: VALUE;\r\n}\r\n\r\nexport interface DThemeListItem extends DThemeImage {\r\n\tgetTextValue( state: DBaseState ): string;\r\n\tnewTextValue(): DStateAwareOrValueMightBe<string>;\r\n}\r\n\r\n// Option parser\r\nconst toValue = <VALUE, THEME extends DThemeListItem>( options?: DListItemOptions<VALUE, THEME> ): VALUE | null => {\r\n\treturn ( options != null && options.value != null ?\r\n\t\toptions.value : null );\r\n};\r\n\r\nexport interface DListItemSelection {\r\n\tadd( item: DBase ): void;\r\n}\r\n\r\nexport class DListItem<\r\n\tVALUE = unknown,\r\n\tTHEME extends DThemeListItem = DThemeListItem,\r\n\tOPTIONS extends DListItemOptions<VALUE, THEME> = DListItemOptions<VALUE, THEME>\r\n> extends DImage<string, THEME, OPTIONS> {\r\n\tprotected _value!: VALUE | null;\r\n\r\n\tprotected init( options?: OPTIONS ) {\r\n\t\tsuper.init( options );\r\n\t\tthis.buttonMode = true;\r\n\t\tthis._value = toValue( options );\r\n\t}\r\n\r\n\tget value(): VALUE | null {\r\n\t\treturn this._value;\r\n\t}\r\n\r\n\tset value( value: VALUE | null ) {\r\n\t\tthis._value = value;\r\n\t}\r\n\r\n\tprotected hasSelection( target: any ): target is { selection: DListItemSelection } {\r\n\t\treturn ( target && target.selection && target.selection.add );\r\n\t}\r\n\r\n\tprotected getSelection(): DListItemSelection | null {\r\n\t\tlet parent = this.parent as any;\r\n\t\twhile( parent ) {\r\n\t\t\tif( this.hasSelection( parent ) ) {\r\n\t\t\t\treturn parent.selection;\r\n\t\t\t}\r\n\t\t\tparent = parent.parent;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tprotected onSelect( e: KeyboardEvent | interaction.InteractionEvent ): void {\r\n\t\tthis.emit( \"select\", this );\r\n\t\tconst selection = this.getSelection();\r\n\t\tif( selection ) {\r\n\t\t\tselection.add( this );\r\n\t\t}\r\n\t}\r\n\r\n\tonKeyDown( e: KeyboardEvent ): boolean {\r\n\t\tif( this.isActionable() && this.isFocused() && UtilKeyboardEvent.isActivateKey( e ) ) {\r\n\t\t\tthis.onSelect( e );\r\n\t\t}\r\n\r\n\t\treturn super.onKeyDown( e );\r\n\t}\r\n\r\n\tprotected onStateChange( newState: number, oldState: number ) {\r\n\t\tsuper.onStateChange( newState, oldState );\r\n\t\tthis.buttonMode = DBaseStates.isActionable( newState );\r\n\t}\r\n\r\n\tprotected getType(): string {\r\n\t\treturn \"DListItem\";\r\n\t}\r\n}\r\n"]}