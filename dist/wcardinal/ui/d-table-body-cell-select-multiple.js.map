{"version":3,"file":"d-table-body-cell-select-multiple.js","sourceRoot":"","sources":["../../../src/main/typescript/wcardinal/ui/d-table-body-cell-select-multiple.ts"],"names":[],"mappings":"AAAA;;;GAGG;;AAEH,OAAO,EAAE,UAAU,EAAE,MAAM,gBAAgB,CAAC;AAC5C,OAAO,EAAE,eAAe,EAAgD,MAAM,qBAAqB,CAAC;AAEpG,OAAO,EAAE,eAAe,EAAE,MAAM,sBAAsB,CAAC;AAevD;IAMU,gDAAsC;IAM/C,sCAAa,OAAgB;eAC5B,kBAAO,OAAO,CAAE;IACjB,CAAC;IAES,2CAAI,GAAd,UAAgB,OAAgB;QAAhC,iBAeC;QAdA,iBAAM,IAAI,YAAE,OAAO,CAAE,CAAC;QACtB,IAAM,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;QAC9B,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;QACnB,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC,KAAK,CAAC;QACjC,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC,IAAI,CAAC;QAC/B,IAAI,CAAC,EAAE,CAAE,QAAQ,EAAE,UAAE,SAAkB,EAAE,SAAkB;YAC1D,IAAM,GAAG,GAAG,KAAI,CAAC,IAAI,CAAC;YACtB,IAAI,GAAG,KAAK,SAAS,EAAG;gBACvB,IAAM,QAAQ,GAAG,KAAI,CAAC,SAAS,CAAC;gBAChC,IAAM,WAAW,GAAG,KAAI,CAAC,YAAY,CAAC;gBACtC,KAAI,CAAC,WAAW,CAAC,MAAM,CAAE,GAAG,EAAE,WAAW,EAAE,SAAS,CAAE,CAAC;gBACvD,KAAI,CAAC,IAAI,CAAE,YAAY,EAAE,SAAS,EAAE,SAAS,EAAE,GAAG,EAAE,QAAQ,EAAE,WAAW,EAAE,KAAI,CAAE,CAAC;aAClF;QACF,CAAC,CAAC,CAAC;IACJ,CAAC;IAES,iDAAU,GAApB,UAAsB,UAAsB,EAAE,WAAuB;QACpE,OAAO,iBAAM,UAAU,YAAE,UAAU,EAAE,WAAW,CAAE;YACjD,CAAE,WAAW,GAAG,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC,UAAU,CAAC,IAAI,CAAE,CAAC;IAC9E,CAAC;IAED,0CAAG,GAAH,UACC,KAAc,EAAE,GAAQ,EAAE,YAAqB,EAC/C,QAAgB,EAAE,WAAmB,EACrC,QAAkB;QAElB,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;QAChB,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;QAC1B,IAAI,CAAC,MAAM,GAAG,KAAgB,CAAC;QAE/B,IAAM,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC;QACpC,eAAe,CAAC,WAAW,CAAE,IAAI,EAAE,GAAG,EAAE,WAAW,EAAE,UAAU,CAAE,CAAC;QAClE,eAAe,CAAC,aAAa,CAAE,IAAI,EAAE,GAAG,EAAE,WAAW,EAAE,UAAU,CAAE,CAAC;IACrE,CAAC;IAED,4CAAK,GAAL;QACC,IAAI,CAAC,IAAI,GAAG,SAAS,CAAC;IACvB,CAAC;IAES,8CAAO,GAAjB;QACC,OAAO,8BAA8B,CAAC;IACvC,CAAC;IACF,mCAAC;AAAD,CAAC,AA3DD,CAMU,eAAe,GAqDxB","sourcesContent":["/*\r\n * Copyright (C) 2019 Toshiba Corporation\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { DBaseState } from \"./d-base-state\";\r\nimport { DSelectMultiple, DSelectMultipleOptions, DThemeSelectMultiple } from \"./d-select-multiple\";\r\nimport { DTableBodyCell, DTableBodyCellOptions } from \"./d-table-body-cell\";\r\nimport { DTableBodyCells } from \"./d-table-body-cells\";\r\nimport { DTableColumn } from \"./d-table-column\";\r\n\r\nexport interface DTableBodyCellSelectMultipleOptions<\r\n\tROW = unknown,\r\n\tVALUE = unknown,\r\n\tTHEME extends DThemeTableBodyCellSelectMultiple = DThemeTableBodyCellSelectMultiple\r\n> extends DSelectMultipleOptions<VALUE, THEME>, DTableBodyCellOptions<ROW> {\r\n\r\n}\r\n\r\nexport interface DThemeTableBodyCellSelectMultiple extends DThemeSelectMultiple {\r\n\r\n}\r\n\r\nexport class DTableBodyCellSelectMultiple<\r\n\tROW = unknown,\r\n\tVALUE = unknown,\r\n\tTHEME extends DThemeTableBodyCellSelectMultiple = DThemeTableBodyCellSelectMultiple,\r\n\tOPTIONS extends DTableBodyCellSelectMultipleOptions<ROW, VALUE, THEME>\r\n\t\t= DTableBodyCellSelectMultipleOptions<ROW, VALUE, THEME>\r\n> extends DSelectMultiple<VALUE, THEME, OPTIONS> implements DTableBodyCell<ROW> {\r\n\tprotected _row?: ROW;\r\n\tprotected _rowIndex!: number;\r\n\tprotected _columnIndex!: number;\r\n\tprotected _columnData!: DTableColumn<ROW>;\r\n\r\n\tconstructor( options: OPTIONS ) {\r\n\t\tsuper( options );\r\n\t}\r\n\r\n\tprotected init( options: OPTIONS ) {\r\n\t\tsuper.init( options );\r\n\t\tconst column = options.column;\r\n\t\tthis._rowIndex = 0;\r\n\t\tthis._columnIndex = column.index;\r\n\t\tthis._columnData = column.data;\r\n\t\tthis.on( \"change\", ( newValues: unknown, oldValues: unknown ): void => {\r\n\t\t\tconst row = this._row;\r\n\t\t\tif( row !== undefined ) {\r\n\t\t\t\tconst rowIndex = this._rowIndex;\r\n\t\t\t\tconst columnIndex = this._columnIndex;\r\n\t\t\t\tthis._columnData.setter( row, columnIndex, newValues );\r\n\t\t\t\tthis.emit( \"cellchange\", newValues, oldValues, row, rowIndex, columnIndex, this );\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tprotected mergeState( stateLocal: DBaseState, stateParent: DBaseState ): DBaseState {\r\n\t\treturn super.mergeState( stateLocal, stateParent ) |\r\n\t\t\t( stateParent & DBaseState.HOVERED ? DBaseState.HOVERED : DBaseState.NONE );\r\n\t}\r\n\r\n\tset(\r\n\t\tvalue: unknown, row: ROW, supplimental: unknown,\r\n\t\trowIndex: number, columnIndex: number,\r\n\t\tforcibly?: boolean\r\n\t): void {\r\n\t\tthis._row = row;\r\n\t\tthis._rowIndex = rowIndex;\r\n\t\tthis.values = value as VALUE[];\r\n\r\n\t\tconst columnData = this._columnData;\r\n\t\tDTableBodyCells.setReadOnly( this, row, columnIndex, columnData );\r\n\t\tDTableBodyCells.setRenderable( this, row, columnIndex, columnData );\r\n\t}\r\n\r\n\tunset(): void {\r\n\t\tthis._row = undefined;\r\n\t}\r\n\r\n\tprotected getType(): string {\r\n\t\treturn \"DTableBodyCellSelectMultiple\";\r\n\t}\r\n}\r\n"]}