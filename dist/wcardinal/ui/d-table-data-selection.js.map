{"version":3,"file":"d-table-data-selection.js","sourceRoot":"","sources":["../../../src/main/typescript/wcardinal/ui/d-table-data-selection.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAIH,MAAM,CAAN,IAAY,uBAIX;AAJD,WAAY,uBAAuB;IAClC,qEAAI,CAAA;IACJ,yEAAM,CAAA;IACN,6EAAQ,CAAA;AACT,CAAC,EAJW,uBAAuB,KAAvB,uBAAuB,QAIlC","sourcesContent":["/*\r\n * Copyright (C) 2019 Toshiba Corporation\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { utils } from \"pixi.js\";\r\n\r\nexport enum DTableDataSelectionType {\r\n\tNONE,\r\n\tSINGLE,\r\n\tMULTIPLE\r\n}\r\n\r\nexport interface DTableDataSelectionOptions {\r\n\ttype?: (keyof typeof DTableDataSelectionType) | DTableDataSelectionType;\r\n}\r\n\r\nexport interface DTableDataSelection<ROW> extends utils.EventEmitter {\r\n\t/**\r\n\t * Returns a copy of an index array of selected rows.\r\n\t * The order of indices is an insertion order.\r\n\t */\r\n\treadonly indices: number[];\r\n\r\n\t/**\r\n\t * Returns a copy of an array of selected row value.\r\n\t * The order is an insertion order.\r\n\t */\r\n\treadonly rows: ROW[];\r\n\r\n\treadonly type: DTableDataSelectionType;\r\n\r\n\treadonly first: number | null;\r\n\treadonly last: number | null;\r\n\r\n\ttoggle( rowIndex: number ): void;\r\n\tadd( rowIndex: number ): void;\r\n\taddTo( rowIndex: number ): void;\r\n\taddRange( from: number, includeFrom: boolean, to: number, includeTo: boolean ): void;\r\n\taddAll( rowIndices: number[] ): void;\r\n\tcontains( rowIndex: number ): boolean;\r\n\tremove( rowIndex: number ): void;\r\n\tclear(): void;\r\n\tclearAndAdd( rowIndex: number ): void;\r\n\tclearAndAddAll( rowIndices: number[] ): void;\r\n\tshift( rowIndex: number, amount: number ): void;\r\n\tsize(): number;\r\n\tisEmpty(): boolean;\r\n\r\n\t/**\r\n\t * Returns an array of the (index, row value) pairs of selected rows.\r\n\t * The order of pairs is an insertion order.\r\n\t */\r\n\ttoArray(): Array<[ number, ROW ]>;\r\n\r\n\t/**\r\n\t * Returns an sorted array of the (index, row value) pairs of selected rows.\r\n\t */\r\n\ttoSortedArray(): Array<[ number, ROW ]>;\r\n\r\n\ttoObject(): {[index: number]: ROW};\r\n\r\n\ttoMap(): Map<number, ROW>;\r\n}\r\n"]}