{"version":3,"file":"d-map-tile-plane.js","sourceRoot":"","sources":["../../../src/main/typescript/wcardinal/ui/d-map-tile-plane.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (C) 2019 Toshiba Corporation\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { Point, Renderer } from \"pixi.js\";\r\nimport { DBase } from \"./d-base\";\r\nimport { DMapCoordinate } from \"./d-map-coordinate\";\r\nimport { DMapTile } from \"./d-map-tile\";\r\nimport { DMapTileMappingInternal } from \"./d-map-tile-mapping-internal\";\r\nimport { DMapTileUrlBuilder } from \"./d-map-tile-url-builder\";\r\n\r\nexport class DMapTilePlane {\r\n\tprotected static WORK: Point = new Point();\r\n\r\n\tprotected readonly _parent: DBase;\r\n\tprotected readonly _builder: DMapTileUrlBuilder;\r\n\tprotected readonly _tz: number;\r\n\tprotected _lon0: number;\r\n\tprotected _lat0: number;\r\n\tprotected _lon1: number;\r\n\tprotected _lat1: number;\r\n\tprotected readonly _tiles: Map<number, DMapTile>;\r\n\tprotected _renderer?: Renderer;\r\n\tprotected readonly _renderTileBound: ( tile: DMapTile ) => void;\r\n\tprotected _txmin: number;\r\n\tprotected _txmax: number;\r\n\tprotected _tymin: number;\r\n\tprotected _tymax: number;\r\n\tprotected readonly _deleteTileBound: ( tile: DMapTile, tileCode: number, tiles: Map<number, DMapTile> ) => void;\r\n\tprotected readonly _destroyTileBound: ( tile: DMapTile ) => void;\r\n\tprotected _tileCount: number;\r\n\tprotected _tileScale: number;\r\n\tprotected _tileScaleRelative: number;\r\n\tprotected _tileSize: number;\r\n\tprotected _mapping: DMapTileMappingInternal;\r\n\tprotected _coordinate: DMapCoordinate;\r\n\tprotected _isLoaded: boolean;\r\n\tprotected readonly _updateLoadingStateForEach: ( tile: DMapTile ) => void;\r\n\tprotected readonly _onLoaded: () => void;\r\n\tprotected readonly _onLoadedBound: () => void;\r\n\tprotected _isOnLoadedCalled: boolean;\r\n\tprotected _isOnLoadedAllowed: boolean;\r\n\r\n\tconstructor(\r\n\t\tparent: DBase,\r\n\t\tbuilder: DMapTileUrlBuilder,\r\n\t\ttz: number,\r\n\t\tmapping: DMapTileMappingInternal,\r\n\t\tcoordinate: DMapCoordinate,\r\n\t\tonLoaded: () => void\r\n\t) {\r\n\t\tthis._parent = parent;\r\n\t\tthis._builder = builder;\r\n\t\tthis._onLoaded = onLoaded;\r\n\t\tthis._isOnLoadedCalled = false;\r\n\t\tthis._isOnLoadedAllowed = true;\r\n\t\tthis._onLoadedBound = (): void => {\r\n\t\t\tthis.onLoaded();\r\n\t\t};\r\n\t\tthis._tz = tz;\r\n\t\tthis._lon0 = NaN;\r\n\t\tthis._lat0 = NaN;\r\n\t\tthis._lon1 = NaN;\r\n\t\tthis._lat1 = NaN;\r\n\t\tthis._tiles = new Map<number, DMapTile>();\r\n\t\tthis._renderTileBound = ( tile: DMapTile ): void => {\r\n\t\t\tthis.renderTile( tile );\r\n\t\t};\r\n\t\tthis._txmin = NaN;\r\n\t\tthis._txmax = NaN;\r\n\t\tthis._tymin = NaN;\r\n\t\tthis._tymax = NaN;\r\n\t\tthis._deleteTileBound = ( tile: DMapTile, tileCode: number, tiles: Map<number, DMapTile> ): void => {\r\n\t\t\tthis.deleteTile( tile, tileCode, tiles );\r\n\t\t};\r\n\t\tthis._destroyTileBound = ( tile: DMapTile ): void => {\r\n\t\t\tthis.destroyTile( tile );\r\n\t\t};\r\n\t\tthis._updateLoadingStateForEach = ( tile: DMapTile ): void => {\r\n\t\t\tif( ! tile.loaded ) {\r\n\t\t\t\tthis._isLoaded = false;\r\n\t\t\t}\r\n\t\t};\r\n\t\tthis._tileCount = coordinate.toTileCount( tz );\r\n\t\tthis._tileScaleRelative = 1 / this._tileCount;\r\n\t\tthis._tileScale = mapping.scale * this._tileScaleRelative;\r\n\t\tthis._tileSize = coordinate.getTileSize() * mapping.scale;\r\n\t\tthis._mapping = mapping;\r\n\t\tthis._coordinate = coordinate;\r\n\t\tthis._isLoaded = true;\r\n\t}\r\n\r\n\tprotected newTile( tx: number, ty: number, px: number, py: number, scale: number ): DMapTile {\r\n\t\treturn new DMapTile( this._parent, tx, ty, px, py, scale );\r\n\t}\r\n\r\n\tprotected renderTile( tile: DMapTile ): void {\r\n\t\ttile.render( this._renderer! );\r\n\t}\r\n\r\n\tget tz(): number {\r\n\t\treturn this._tz;\r\n\t}\r\n\r\n\trender( renderer: Renderer ): void {\r\n\t\tthis._renderer = renderer;\r\n\t\tthis._tiles.forEach( this._renderTileBound );\r\n\t}\r\n\r\n\tmove( lon0: number, lat0: number, lon1: number, lat1: number ): void {\r\n\t\tconst oldLon0 = this._lon0;\r\n\t\tconst oldLat0 = this._lat0;\r\n\t\tconst oldLon1 = this._lon1;\r\n\t\tconst oldLat1 = this._lat1;\r\n\t\tif( oldLon0 !== lon0 || oldLat0 !== lat0 || oldLon1 !== lon1 || oldLat1 !== lat1 ) {\r\n\t\t\tthis._lon0 = lon0;\r\n\t\t\tthis._lat0 = lat0;\r\n\t\t\tthis._lon1 = lon1;\r\n\t\t\tthis._lat1 = lat1;\r\n\r\n\t\t\tconst tz = this._tz;\r\n\t\t\tconst coordinate = this._coordinate;\r\n\r\n\t\t\tconst work = DMapTilePlane.WORK;\r\n\t\t\twork.set( lon0, lat0 );\r\n\t\t\tcoordinate.lonLatToTile( work, tz, work );\r\n\t\t\tconst tx0 = work.x;\r\n\t\t\tconst ty0 = work.y;\r\n\r\n\t\t\twork.set( lon1, lat1 );\r\n\t\t\tcoordinate.lonLatToTile( work, tz, work );\r\n\t\t\tconst tx1 = work.x;\r\n\t\t\tconst ty1 = work.y;\r\n\r\n\t\t\tconst tileCount = this._tileCount;\r\n\t\t\tlet txmin = Math.max( 0, tx0 );\r\n\t\t\tlet txmax = Math.min( tileCount - 1, tx1 );\r\n\t\t\tlet tymin = Math.max( 0, ty0 );\r\n\t\t\tlet tymax = Math.min( tileCount - 1, ty1 );\r\n\t\t\tconst dtxmin = txmin - this._txmin;\r\n\t\t\tconst dtxmax = txmax - this._txmax;\r\n\t\t\tconst dtymin = tymin - this._tymin;\r\n\t\t\tconst dtymax = tymax - this._tymax;\r\n\r\n\t\t\tconst isTxMinChanged = dtxmin !== dtxmin || dtxmin < 0 || 1 < dtxmin;\r\n\t\t\tconst isTxMaxChanged = dtxmax !== dtxmax || 0 < dtxmax || dtxmax < -1;\r\n\t\t\tconst isTyMinChanged = dtymin !== dtymin || dtymin < 0 || 1 < dtymin;\r\n\t\t\tconst isTyMaxChanged = dtymax !== dtymax || 0 < dtymax || dtymax < -1;\r\n\t\t\tif( isTxMinChanged || isTxMaxChanged || isTyMinChanged || isTyMaxChanged ) {\r\n\t\t\t\tif( isTxMinChanged ) {\r\n\t\t\t\t\tthis._txmin = txmin;\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttxmin = this._txmin;\r\n\t\t\t\t}\r\n\t\t\t\tif( isTxMaxChanged ) {\r\n\t\t\t\t\tthis._txmax = txmax;\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttxmax = this._txmax;\r\n\t\t\t\t}\r\n\t\t\t\tif( isTyMinChanged ) {\r\n\t\t\t\t\tthis._tymin = tymin;\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttymin = this._tymin;\r\n\t\t\t\t}\r\n\t\t\t\tif( isTyMaxChanged ) {\r\n\t\t\t\t\tthis._tymax = tymax;\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttymax = this._tymax;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst tiles = this._tiles;\r\n\t\t\t\ttiles.forEach( this._deleteTileBound );\r\n\r\n\t\t\t\tconst ctx = (txmin + txmax) >> 1;\r\n\t\t\t\tconst cty = (tymin + tymax) >> 1;\r\n\t\t\t\tconst ltx = Math.max( ctx - txmin, txmax - ctx );\r\n\t\t\t\tconst lty = Math.max( cty - tymin, tymax - cty );\r\n\t\t\t\tconst lt = Math.max( ltx, lty );\r\n\r\n\t\t\t\tthis.toOffset( work );\r\n\t\t\t\tconst offsetX = work.x;\r\n\t\t\t\tconst offsetY = work.y;\r\n\r\n\t\t\t\tthis._isOnLoadedCalled = false;\r\n\t\t\t\tthis._isOnLoadedAllowed = false;\r\n\t\t\t\tthis.loadTile( tz, ctx, cty, offsetX, offsetY, work );\r\n\t\t\t\tfor( let it = 1; it <= lt; ++it ) {\r\n\t\t\t\t\tconst txa = ctx - it;\r\n\t\t\t\t\tif( txmin <= txa ) {\r\n\t\t\t\t\t\tthis.loadTilesY( tz, txa, cty, it, tymin, tymax, offsetX, offsetY, work );\r\n\t\t\t\t\t}\r\n\t\t\t\t\tconst txb = ctx + it;\r\n\t\t\t\t\tif( txb <= txmax ) {\r\n\t\t\t\t\t\tthis.loadTilesY( tz, txb, cty, it, tymin, tymax, offsetX, offsetY, work );\r\n\t\t\t\t\t}\r\n\t\t\t\t\tconst tya = cty - it;\r\n\t\t\t\t\tif( tymin <= tya ) {\r\n\t\t\t\t\t\tthis.loadTilesX( tz, ctx, it - 1, txmin, txmax, tya, offsetX, offsetY, work );\r\n\t\t\t\t\t}\r\n\t\t\t\t\tconst tyb = cty + it;\r\n\t\t\t\t\tif( tyb <= tymax ) {\r\n\t\t\t\t\t\tthis.loadTilesX( tz, ctx, it - 1, txmin, txmax, tyb, offsetX, offsetY, work );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tthis._isOnLoadedAllowed = true;\r\n\t\t\t\tif( this._isOnLoadedCalled ) {\r\n\t\t\t\t\tthis.onLoaded();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprotected loadTilesX(\r\n\t\ttz: number,\r\n\t\tctx: number, ltx: number, txmin: number, txmax: number,\r\n\t\tty: number,\r\n\t\tox: number, oy: number,\r\n\t\twork: Point\r\n\t): void {\r\n\t\tthis.loadTile( tz, ctx, ty, ox, oy, work );\r\n\t\tfor( let i = 1; i <= ltx; ++i ) {\r\n\t\t\tconst txa = ctx - i;\r\n\t\t\tif( txmin <= txa ) {\r\n\t\t\t\tthis.loadTile( tz, txa, ty, ox, oy, work );\r\n\t\t\t}\r\n\t\t\tconst txb = ctx + i;\r\n\t\t\tif( txb <= txmax ) {\r\n\t\t\t\tthis.loadTile( tz, txb, ty, ox, oy, work );\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprotected loadTilesY(\r\n\t\ttz: number, tx: number,\r\n\t\tcty: number, lty: number, tymin: number, tymax: number,\r\n\t\tox: number, oy: number,\r\n\t\twork: Point\r\n\t): void {\r\n\t\tthis.loadTile( tz, tx, cty, ox, oy, work );\r\n\t\tfor( let i = 1; i <= lty; ++i ) {\r\n\t\t\tconst tya = cty - i;\r\n\t\t\tif( tymin <= tya ) {\r\n\t\t\t\tthis.loadTile( tz, tx, tya, ox, oy, work );\r\n\t\t\t}\r\n\t\t\tconst tyb = cty + i;\r\n\t\t\tif( tyb <= tymax ) {\r\n\t\t\t\tthis.loadTile( tz, tx, tyb, ox, oy, work );\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprotected loadTile( tz: number, tx: number, ty: number, ox: number, oy: number, work: Point ): void {\r\n\t\tconst coordinate = this._coordinate;\r\n\t\tconst tileCode = coordinate.toTileCode( tz, tx, ty );\r\n\t\tconst tiles = this._tiles;\r\n\t\tlet tile = tiles.get( tileCode );\r\n\t\tif( tile == null ) {\r\n\t\t\tthis.toTilePosition( tx, ty, ox, oy, work );\r\n\t\t\ttile = this.newTile( tx, ty, work.x, work.y, this._tileScale );\r\n\t\t\ttiles.set( tileCode, tile );\r\n\t\t\ttile.load( this._builder( tz, tx, ty ), this._onLoadedBound );\r\n\t\t\tthis._isLoaded = false;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected toTilePosition( tx: number, ty: number, ox: number, oy: number, result: Point ): Point {\r\n\t\tconst tileSize = this._tileSize;\r\n\t\tconst tileScaleRelative = this._tileScaleRelative;\r\n\t\tresult.set( tx, ty );\r\n\t\tthis._coordinate.tileToPixels( result, tileSize, result );\r\n\t\tresult.set( result.x * tileScaleRelative + ox, result.y * tileScaleRelative + oy );\r\n\t\treturn result;\r\n\t}\r\n\r\n\tprotected toOffset( result: Point ): Point {\r\n\t\tconst parent = this._parent;\r\n\t\tconst mapping = this._mapping;\r\n\t\tconst tileSize = this._tileSize;\r\n\t\tresult.set(\r\n\t\t\t-mapping.x * tileSize + parent.width * 0.5,\r\n\t\t\t-mapping.y * tileSize + parent.height * 0.5\r\n\t\t);\r\n\t\treturn result;\r\n\t}\r\n\r\n\tprotected deleteTile( tile: DMapTile, tileCode: number, tiles: Map<number, DMapTile> ): void {\r\n\t\tconst tx = tile.tx;\r\n\t\tconst ty = tile.ty;\r\n\t\tif( tx < this._txmin || this._txmax < tx || ty < this._tymin || this._tymax < ty ) {\r\n\t\t\ttiles.delete( tileCode );\r\n\t\t\ttile.destroy();\r\n\t\t}\r\n\t}\r\n\r\n\tdestroy(): void {\r\n\t\tconst tiles = this._tiles;\r\n\t\ttiles.forEach( this._destroyTileBound );\r\n\t\ttiles.clear();\r\n\t}\r\n\r\n\tprotected destroyTile( tile: DMapTile ): void {\r\n\t\ttile.destroy();\r\n\t}\r\n\r\n\tprotected updateLoadingState(): void {\r\n\t\tthis._isLoaded = true;\r\n\t\tthis._tiles.forEach( this._updateLoadingStateForEach );\r\n\t}\r\n\r\n\tprotected onLoaded(): void {\r\n\t\tif( this._isOnLoadedAllowed ) {\r\n\t\t\tthis._onLoaded();\r\n\t\t} else {\r\n\t\t\tthis._isOnLoadedCalled = true;\r\n\t\t}\r\n\t}\r\n\r\n\tget loaded(): boolean {\r\n\t\tif( ! this._isLoaded ) {\r\n\t\t\tthis.updateLoadingState();\r\n\t\t}\r\n\t\treturn this._isLoaded;\r\n\t}\r\n\r\n\tget mapping(): DMapTileMappingInternal {\r\n\t\treturn this._mapping;\r\n\t}\r\n\r\n\tset mapping( mapping: DMapTileMappingInternal ) {\r\n\t\tconst coordinate = this._coordinate;\r\n\t\tconst tileScale = mapping.scale * this._tileScaleRelative;\r\n\t\tconst tileSize = coordinate.getTileSize() * mapping.scale;\r\n\t\tthis._tileScale = tileScale;\r\n\t\tthis._tileSize = tileSize;\r\n\t\tthis._mapping = mapping;\r\n\r\n\t\tconst work = DMapTilePlane.WORK;\r\n\t\tthis.toOffset( work );\r\n\t\tconst offsetX = work.x;\r\n\t\tconst offsetY = work.y;\r\n\r\n\t\tthis._tiles.forEach(( tile: DMapTile ): void => {\r\n\t\t\tthis.toTilePosition( tile.tx, tile.ty, offsetX, offsetY, work );\r\n\t\t\ttile.transform( work.x, work.y, tileScale );\r\n\t\t});\r\n\t}\r\n}\r\n"]}