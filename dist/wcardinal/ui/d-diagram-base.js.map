{"version":3,"file":"d-diagram-base.js","sourceRoot":"","sources":["../../../src/main/typescript/wcardinal/ui/d-diagram-base.ts"],"names":[],"mappings":"AAAA;;;GAGG;;AAEH,OAAO,EAAE,aAAa,EAAE,MAAM,kBAAkB,CAAC;AACjD,OAAO,EACN,gBAAgB,EAChB,MAAM,sBAAsB,CAAC;AAK9B,OAAO,EAAE,SAAS,EAAE,MAAM,cAAc,CAAC;AA4BzC;IAIU,gCAAwC;IAIjD,sBAAa,OAAiB;QAA9B,YACC,kBAAO,OAAO,CAAE,SAGhB;QAFA,KAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACxB,KAAI,CAAC,YAAY,GAAG,OAAO,IAAI,OAAO,CAAC,IAAI,CAAC;;IAC7C,CAAC;IAED,0BAAG,GAAH,UAAK,UAAqC;QACzC,IAAM,aAAa,GAAG,IAAI,CAAC,WAAW,CAAC;QACvC,IAAI,aAAa,KAAK,UAAU,EAAG;YAClC,IAAI,aAAa,EAAG;gBACnB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;gBACxB,IAAI,CAAC,OAAO,EAAE,CAAC;aACf;YAED,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;YAC9B,IAAI,UAAU,EAAG;gBAChB,IAAI,CAAC,KAAK,CAAE,UAAU,CAAE,CAAC;aACzB;SACD;IACF,CAAC;IAES,4BAAK,GAAf,UAAiB,UAA8B;QAA/C,iBAUC;QATA,IAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAE,UAAU,CAAE,CAAC;QAC5C,SAAS,CAAC,QAAQ,CAAE,UAAU,EAAE,MAAM,CAAC,KAAK,CAAE,CAAC,IAAI,CAAC,UAAE,MAAgB;YACrE,KAAI,CAAC,UAAU,CAAE,MAAM,CAAE,CAAC;YAC1B,MAAM,CAAC,UAAU,CAAE,MAAM,CAAE,CAAC;YAC5B,aAAa,CAAC,MAAM,CAAE,KAAI,CAAE,CAAC;YAC7B,KAAI,CAAC,IAAI,CAAE,OAAO,EAAE,KAAI,CAAE,CAAC;QAC5B,CAAC,CAAC,CAAC;QACH,SAAS,CAAC,eAAe,CAAE,UAAU,EAAE,MAAM,EAAE,IAAI,CAAE,CAAC;QACtD,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACtB,CAAC;IAES,iCAAU,GAApB,UAAsB,MAAgB;QACrC,aAAa;IACd,CAAC;IAIS,8BAAO,GAAjB;QACC,IAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;QAC3B,IAAI,MAAM,IAAI,IAAI,EAAG;YACpB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;SACnB;IACF,CAAC;IAED,0BAAG,GAAH;QACC,OAAO,IAAI,CAAC,WAAW,CAAC;IACzB,CAAC;IAED,sBAAI,+BAAK;aAAT;YACC,IAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;YAC3B,IAAI,MAAM,IAAI,IAAI,EAAG;gBACpB,OAAO,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC;aAC3B;YACD,OAAO,IAAI,CAAC;QACb,CAAC;;;OAAA;IAES,8BAAO,GAAjB;QACC,OAAO,cAAc,CAAC;IACvB,CAAC;IACF,mBAAC;AAAD,CAAC,AArED,CAIU,gBAAgB,GAiEzB","sourcesContent":["/*\r\n * Copyright (C) 2019 Toshiba Corporation\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { DApplications } from \"./d-applications\";\r\nimport {\r\n\tDCanvasContainer, DCanvasContainerOnOptions, DCanvasContainerOptions, DThemeCanvasContainer\r\n} from \"./d-canvas-container\";\r\nimport { DDiagramCanvasBase } from \"./d-diagram-canvas-base\";\r\nimport { DDiagramCanvasTilePyramidFactory } from \"./d-diagram-canvas-tile\";\r\nimport { DDiagramLayer } from \"./d-diagram-layer\";\r\nimport { DDiagramSerialized } from \"./d-diagram-serialized\";\r\nimport { DDiagrams } from \"./d-diagrams\";\r\nimport { EShape } from \"./shape/e-shape\";\r\n\r\nexport interface DDiagramBaseOnOptions<CANVAS> extends DCanvasContainerOnOptions<CANVAS> {\r\n\t/**\r\n\t * Triggered when all the shape initializations are finished.\r\n\t *\r\n\t * @param self a diagram\r\n\t */\r\n\tready?: ( self: any ) => void;\r\n}\r\n\r\nexport interface DDiagramBaseOptions<\r\n\tCANVAS extends DDiagramCanvasBase = DDiagramCanvasBase,\r\n\tTHEME extends DThemeDiagramBase = DThemeDiagramBase\r\n> extends DCanvasContainerOptions<CANVAS, THEME> {\r\n\t/**\r\n\t * A tile pyramid factory.\r\n\t */\r\n\ttile?: DDiagramCanvasTilePyramidFactory;\r\n\r\n\ton?: DDiagramBaseOnOptions<CANVAS>;\r\n}\r\n\r\nexport interface DThemeDiagramBase extends DThemeCanvasContainer {\r\n\r\n}\r\n\r\nexport abstract class DDiagramBase<\r\n\tCANVAS extends DDiagramCanvasBase = DDiagramCanvasBase,\r\n\tTHEME extends DThemeDiagramBase = DThemeDiagramBase,\r\n\tOPTIONS extends DDiagramBaseOptions<CANVAS, THEME> = DDiagramBaseOptions<CANVAS, THEME>\r\n> extends DCanvasContainer<CANVAS, THEME, OPTIONS> {\r\n\tprotected _serialized: DDiagramSerialized | null;\r\n\tprotected _tileFactory?: DDiagramCanvasTilePyramidFactory;\r\n\r\n\tconstructor( options?: OPTIONS ) {\r\n\t\tsuper( options );\r\n\t\tthis._serialized = null;\r\n\t\tthis._tileFactory = options && options.tile;\r\n\t}\r\n\r\n\tset( serialized: DDiagramSerialized | null ) {\r\n\t\tconst oldSerialized = this._serialized;\r\n\t\tif( oldSerialized !== serialized ) {\r\n\t\t\tif( oldSerialized ) {\r\n\t\t\t\tthis._serialized = null;\r\n\t\t\t\tthis.onUnset();\r\n\t\t\t}\r\n\r\n\t\t\tthis._serialized = serialized;\r\n\t\t\tif( serialized ) {\r\n\t\t\t\tthis.onSet( serialized );\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprotected onSet( serialized: DDiagramSerialized ): void {\r\n\t\tconst canvas = this.newCanvas( serialized );\r\n\t\tDDiagrams.newLayer( serialized, canvas.layer ).then(( shapes: EShape[] ): void => {\r\n\t\t\tthis.initialize( shapes );\r\n\t\t\tcanvas.initialize( shapes );\r\n\t\t\tDApplications.update( this );\r\n\t\t\tthis.emit( \"ready\", this );\r\n\t\t});\r\n\t\tDDiagrams.applyBackground( serialized, canvas, this );\r\n\t\tthis.canvas = canvas;\r\n\t}\r\n\r\n\tprotected initialize( shapes: EShape[] ): void {\r\n\t\t// DO NOTHING\r\n\t}\r\n\r\n\tprotected abstract newCanvas( serialized: DDiagramSerialized ): CANVAS;\r\n\r\n\tprotected onUnset(): void {\r\n\t\tconst canvas = this.canvas;\r\n\t\tif( canvas != null ) {\r\n\t\t\tthis.canvas = null;\r\n\t\t}\r\n\t}\r\n\r\n\tget(): DDiagramSerialized | null {\r\n\t\treturn this._serialized;\r\n\t}\r\n\r\n\tget layer(): DDiagramLayer | null {\r\n\t\tconst canvas = this.canvas;\r\n\t\tif( canvas != null ) {\r\n\t\t\treturn canvas.layer.active;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tprotected getType(): string {\r\n\t\treturn \"DDiagramBase\";\r\n\t}\r\n}\r\n"]}