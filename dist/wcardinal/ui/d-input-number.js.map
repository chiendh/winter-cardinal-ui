{"version":3,"file":"d-input-number.js","sourceRoot":"","sources":["../../../src/main/typescript/wcardinal/ui/d-input-number.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (C) 2019 Toshiba Corporation\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { DBaseState } from \"./d-base-state\";\r\nimport { DInput, DInputOptions, DThemeInput } from \"./d-input\";\r\nimport { DStateAwareOrValueMightBe } from \"./d-state-aware\";\r\n\r\nexport interface DInputNumberOptions<\r\n\tTHEME extends DThemeInputNumber = DThemeInputNumber\r\n> extends DInputOptions<number, THEME> {\r\n\tstep?: number | null;\r\n\tmin?: number | null;\r\n\tmax?: number | null;\r\n}\r\n\r\nexport interface DThemeInputNumber extends DThemeInput {\r\n\tgetEditingFormatter(): ( value: number, caller: any ) => string;\r\n\tgetEditingUnformatter(): ( text: string, caller: any ) => number;\r\n\tgetEditingValidator(): ( value: number, caller: any ) => unknown;\r\n\tgetTextValue( state: DBaseState ): number;\r\n\tnewTextValue(): DStateAwareOrValueMightBe<number>;\r\n\tgetStep(): number | null;\r\n\tgetMin(): number | null;\r\n\tgetMax(): number | null;\r\n}\r\n\r\n// Option parser\r\nconst toStep = <THEME extends DThemeInputNumber>(\r\n\ttheme: THEME, options?: DInputNumberOptions<THEME>\r\n): number | null => {\r\n\tif( options != null ) {\r\n\t\treturn ( options.step != null ? options.step : theme.getStep() );\r\n\t}\r\n\treturn null;\r\n};\r\n\r\nconst toMin = <THEME extends DThemeInputNumber>(\r\n\ttheme: THEME, options?: DInputNumberOptions<THEME>\r\n): number | null => {\r\n\tif( options != null ) {\r\n\t\treturn ( options.min != null ? options.min : theme.getMin() );\r\n\t}\r\n\treturn null;\r\n};\r\n\r\nconst toMax = <THEME extends DThemeInputNumber>(\r\n\ttheme: THEME, options?: DInputNumberOptions<THEME>\r\n): number | null => {\r\n\tif( options != null ) {\r\n\t\treturn ( options.max != null ? options.max : theme.getMax() );\r\n\t}\r\n\treturn null;\r\n};\r\n\r\nexport abstract class DInputNumber<\r\n\tTHEME extends DThemeInputNumber = DThemeInputNumber,\r\n\tOPTIONS extends DInputNumberOptions<THEME> = DInputNumberOptions<THEME>\r\n> extends DInput<number, THEME, OPTIONS> {\r\n\tprotected _step!: number | null;\r\n\tprotected _min!: number | null;\r\n\tprotected _max!: number | null;\r\n\r\n\tprotected init( options?: OPTIONS ) {\r\n\t\tsuper.init( options );\r\n\t\tconst theme = this.theme;\r\n\t\tthis._step = toStep( theme, options );\r\n\t\tthis._min = toMin( theme, options );\r\n\t\tthis._max = toMax( theme, options );\r\n\t}\r\n\r\n\tget step(): number | null {\r\n\t\treturn this._step;\r\n\t}\r\n\r\n\tset step( step: number | null ) {\r\n\t\tif( this._step !== step ) {\r\n\t\t\tthis._step = step;\r\n\t\t\tthis.updateInputStep();\r\n\t\t}\r\n\t}\r\n\r\n\tget min(): number | null {\r\n\t\treturn this._min;\r\n\t}\r\n\r\n\tset min( min: number | null ) {\r\n\t\tif( this._min !== min ) {\r\n\t\t\tthis._min = min;\r\n\t\t\tthis.updateInputMin();\r\n\t\t}\r\n\t}\r\n\r\n\tget max(): number | null {\r\n\t\treturn this._max;\r\n\t}\r\n\r\n\tset max( max: number | null ) {\r\n\t\tif( this._max !== max ) {\r\n\t\t\tthis._max = max;\r\n\t\t\tthis.updateInputMax();\r\n\t\t}\r\n\t}\r\n\r\n\tprotected toValue( valueAsString: string ): number {\r\n\t\tconst result = this._editingUnformatter( valueAsString, this );\r\n\t\tif( result === result /* NaN Check */ ) {\r\n\t\t\tif( this._min != null && result < this._min ) {\r\n\t\t\t\treturn this._min;\r\n\t\t\t}\r\n\t\t\tif( this._max != null && this._max < result ) {\r\n\t\t\t\treturn this._max;\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t}\r\n\t\treturn this.value;\r\n\t}\r\n\r\n\tprotected updateInputStep(): void {\r\n\t\tif( this._isElementShown ) {\r\n\t\t\tconst element = this._element;\r\n\t\t\tif( element ) {\r\n\t\t\t\tthis.initInputStep( element );\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprotected updateInputMin(): void {\r\n\t\tif( this._isElementShown ) {\r\n\t\t\tconst element = this._element;\r\n\t\t\tif( element ) {\r\n\t\t\t\tthis.initInputMin( element );\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprotected updateInputMax(): void {\r\n\t\tif( this._isElementShown ) {\r\n\t\t\tconst element = this._element;\r\n\t\t\tif( element ) {\r\n\t\t\t\tthis.initInputMax( element );\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprotected initInputStep( input: HTMLInputElement ): void {\r\n\t\tif( this._step != null ) {\r\n\t\t\tinput.step = String( this._step );\r\n\t\t} else {\r\n\t\t\tinput.removeAttribute( \"step\" );\r\n\t\t}\r\n\t}\r\n\r\n\tprotected initInputMin( input: HTMLInputElement ): void {\r\n\t\tif( this._min != null ) {\r\n\t\t\tinput.min = `${this._min}`;\r\n\t\t} else {\r\n\t\t\tinput.removeAttribute( \"min\" );\r\n\t\t}\r\n\t}\r\n\r\n\tprotected initInputMax( input: HTMLInputElement ): void {\r\n\t\tif( this._max != null ) {\r\n\t\t\tinput.max = `${this._max}`;\r\n\t\t} else {\r\n\t\t\tinput.removeAttribute( \"max\" );\r\n\t\t}\r\n\t}\r\n\r\n\tprotected onElementAttached(\r\n\t\telement: HTMLInputElement, before: HTMLDivElement | null, after: HTMLDivElement | null\r\n\t): void {\r\n\t\tsuper.onElementAttached( element, before, after );\r\n\t\tthis.initInputStep( element );\r\n\t\tthis.initInputMin( element );\r\n\t\tthis.initInputMax( element );\r\n\t}\r\n\r\n\tprotected getInputType(): string {\r\n\t\treturn \"number\";\r\n\t}\r\n}\r\n"]}