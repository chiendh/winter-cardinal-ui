{"version":3,"file":"d-table-data-tree.js","sourceRoot":"","sources":["../../../src/main/typescript/wcardinal/ui/d-table-data-tree.ts"],"names":[],"mappings":"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","sourcesContent":["import { utils } from \"pixi.js\";\r\nimport { DTableData, DTableDataMapped, DTableDataOptions, DTableDataParent } from \"./d-table-data\";\r\nimport { DTableDataFilter } from \"./d-table-data-filter\";\r\nimport { DTableDataFilterTree } from \"./d-table-data-filter-tree\";\r\nimport { DTableDataListMapped } from \"./d-table-data-list-mapped\";\r\nimport { DTableDataSelection } from \"./d-table-data-selection\";\r\nimport { DTableDataSelectionImpl } from \"./d-table-data-selection-impl\";\r\nimport { DTableDataSorter } from \"./d-table-data-sorter\";\r\nimport { DTableDataSorterTree } from \"./d-table-data-sorter-tree\";\r\nimport { DTableDataTreeItem } from \"./d-table-data-tree-item\";\r\n\r\nexport interface DTableDataTreeOptions<NODE> extends DTableDataOptions<NODE> {\r\n\tnodes?: NODE[];\r\n}\r\n\r\nexport class DTableDataTree<NODE extends DTableDataTreeItem<NODE, NODE>> extends utils.EventEmitter\r\n\timplements DTableData<NODE> {\r\n\tprotected _parent: DTableDataParent | null;\r\n\tprotected _nodes?: NODE[];\r\n\tprotected _rows: NODE[];\r\n\tprotected _isRowsDirty: boolean;\r\n\tprotected _supplimentals: number[];\r\n\tprotected _flags: WeakMap<NODE, number>;\r\n\tprotected _filter: DTableDataFilterTree<NODE>;\r\n\tprotected _sorter: DTableDataSorterTree<NODE>;\r\n\tprotected _selection: DTableDataSelectionImpl<NODE>;\r\n\tprotected _mapped: DTableDataMapped<NODE>;\r\n\r\n\tconstructor( options?: DTableDataTreeOptions<NODE> ) {\r\n\t\tsuper();\r\n\r\n\t\tthis._parent = null;\r\n\t\tthis._mapped = new DTableDataListMapped<NODE>( this );\r\n\t\tthis._rows = [];\r\n\t\tthis._isRowsDirty = false;\r\n\t\tthis._supplimentals = [];\r\n\t\tthis._flags = new WeakMap<NODE, number>();\r\n\t\tthis._selection = new DTableDataSelectionImpl<NODE>( this, options && options.selection );\r\n\t\tthis._filter = new DTableDataFilterTree<NODE>( this );\r\n\t\tthis._sorter = new DTableDataSorterTree<NODE>();\r\n\t\tif( options ) {\r\n\t\t\t// Filter\r\n\t\t\tconst filter = options.filter;\r\n\t\t\tif( filter ) {\r\n\t\t\t\tthis._filter.set( filter );\r\n\t\t\t}\r\n\r\n\t\t\t// Events\r\n\t\t\tconst on = options.on;\r\n\t\t\tif( on ) {\r\n\t\t\t\tfor( const name in on ) {\r\n\t\t\t\t\tconst handler = on[ name ];\r\n\t\t\t\t\tif( handler ) {\r\n\t\t\t\t\t\tthis.on( name, handler );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Update rows\r\n\t\tthis.nodes = options && options.nodes;\r\n\t}\r\n\r\n\tbind( parent: DTableDataParent ): void {\r\n\t\tthis._parent = parent;\r\n\t}\r\n\r\n\tget nodes(): NODE[] | undefined {\r\n\t\treturn this._nodes;\r\n\t}\r\n\r\n\tset nodes( nodes: NODE[] | undefined ) {\r\n\t\tthis._nodes = nodes;\r\n\t\tthis._isRowsDirty = true;\r\n\t\tthis._filter.toDirty();\r\n\t\tthis.update( true );\r\n\t}\r\n\r\n\tget rows(): NODE[] {\r\n\t\tif( this._isRowsDirty ) {\r\n\t\t\tthis._isRowsDirty = false;\r\n\t\t\tthis.updateRows( this._nodes );\r\n\t\t}\r\n\t\treturn this._rows;\r\n\t}\r\n\r\n\tget supplimentals(): number[] {\r\n\t\treturn this._supplimentals;\r\n\t}\r\n\r\n\tprotected updateRows( nodes: NODE[] | undefined ): void {\r\n\t\tconst rows = this._rows;\r\n\t\tconst supplimentals = this._supplimentals;\r\n\t\tconst flags = this._flags;\r\n\t\tif( nodes != null ) {\r\n\t\t\tconst irows = this.updateRows_( nodes, 0, 0, rows, supplimentals, flags );\r\n\t\t\tif( irows !== rows.length ) {\r\n\t\t\t\trows.length = irows;\r\n\t\t\t\tsupplimentals.length = irows;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\trows.length = 0;\r\n\t\t\tsupplimentals.length = 0;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected toSupplimental( ilevel: number, hasChildren: boolean, isOpened: boolean ) {\r\n\t\treturn (ilevel << 2) | (hasChildren ? 2 : 0) | (isOpened ? 1 : 0);\r\n\t}\r\n\r\n\tprotected updateRows_(\r\n\t\tnodes: NODE[],\r\n\t\tirows: number,\r\n\t\tilevel: number,\r\n\t\trows: NODE[],\r\n\t\tsupplimentals: number[],\r\n\t\tflags: WeakMap<NODE, number>\r\n\t): number {\r\n\t\tfor( let i = 0, imax = nodes.length; i < imax; ++i ) {\r\n\t\t\tconst node = nodes[ i ];\r\n\t\t\tconst children = node.children;\r\n\t\t\tconst isOpened = flags.has( node );\r\n\t\t\tconst supplimental = this.toSupplimental( ilevel, !! (children && 0 < children.length), isOpened );\r\n\t\t\tif( irows < rows.length ) {\r\n\t\t\t\trows[ irows ] = node;\r\n\t\t\t\tsupplimentals[ irows ] = supplimental;\r\n\t\t\t} else {\r\n\t\t\t\trows.push( node );\r\n\t\t\t\tsupplimentals.push( supplimental );\r\n\t\t\t}\r\n\t\t\tirows += 1;\r\n\r\n\t\t\tif( isOpened && children ) {\r\n\t\t\t\tirows = this.updateRows_( children, irows, ilevel + 1, rows, supplimentals, flags );\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn irows;\r\n\t}\r\n\r\n\tupdate( forcibly?: boolean ): void {\r\n\t\tconst parent = this._parent;\r\n\t\tif( parent ) {\r\n\t\t\tparent.update( forcibly );\r\n\t\t}\r\n\t}\r\n\r\n\tsize(): number {\r\n\t\treturn this.rows.length;\r\n\t}\r\n\r\n\tget( index: number ): NODE | null {\r\n\t\tconst rows = this.rows;\r\n\t\tif( 0 <= index && index < rows.length ) {\r\n\t\t\treturn rows[ index ];\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\topen( node: NODE ): void {\r\n\t\tconst flags = this._flags;\r\n\t\tif( ! flags.has( node ) ) {\r\n\t\t\tflags.set( node, 1 );\r\n\t\t\tthis._isRowsDirty = true;\r\n\t\t\tthis._filter.toDirty();\r\n\t\t\tthis.update( true );\r\n\t\t}\r\n\t}\r\n\r\n\tclose( node: NODE ): void {\r\n\t\tconst flags = this._flags;\r\n\t\tif( flags.has( node ) ) {\r\n\t\t\tflags.delete( node );\r\n\t\t\tthis._isRowsDirty = true;\r\n\t\t\tthis._filter.toDirty();\r\n\t\t\tthis.update( true );\r\n\t\t}\r\n\t}\r\n\r\n\tisOpened( node: NODE ): boolean {\r\n\t\treturn this._flags.has( node );\r\n\t}\r\n\r\n\ttoggle( node: NODE ): void {\r\n\t\tconst flags = this._flags;\r\n\t\tif( flags.has( node ) ) {\r\n\t\t\tflags.delete( node );\r\n\t\t} else {\r\n\t\t\tflags.set( node, 1 );\r\n\t\t}\r\n\t\tthis._isRowsDirty = true;\r\n\t\tthis._filter.toDirty();\r\n\t\tthis.update( true );\r\n\t}\r\n\r\n\teach( iteratee: ( node: NODE, index: number ) => boolean | void, ifrom?: number, ito?: number ): void {\r\n\t\tconst rows = this.rows;\r\n\t\tifrom = ( ifrom != null ? Math.max( 0, ifrom ) : 0 );\r\n\t\tito = ( ito != null ? Math.min( rows.length, ito ) : rows.length );\r\n\t\tfor( let i = ifrom; i < ito; ++i ) {\r\n\t\t\tconst row = rows[ i ];\r\n\t\t\tif( iteratee( row, i ) === false ) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tget selection(): DTableDataSelection<NODE> {\r\n\t\treturn this._selection;\r\n\t}\r\n\r\n\tget filter(): DTableDataFilter<NODE> {\r\n\t\treturn this._filter;\r\n\t}\r\n\r\n\tget sorter(): DTableDataSorter<NODE> {\r\n\t\treturn this._sorter;\r\n\t}\r\n\r\n\tget mapped(): DTableDataMapped<NODE> {\r\n\t\treturn this._mapped;\r\n\t}\r\n}\r\n"]}