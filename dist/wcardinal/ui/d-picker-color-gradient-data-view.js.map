{"version":3,"file":"d-picker-color-gradient-data-view.js","sourceRoot":"","sources":["../../../src/main/typescript/wcardinal/ui/d-picker-color-gradient-data-view.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (C) 2019 Toshiba Corporation\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { Buffer, Geometry, Mesh, Point, Rectangle, Shader, Texture, TextureUvs, utils } from \"pixi.js\";\r\nimport { DApplications } from \"./d-applications\";\r\nimport { DPickerColorGradientDataLike } from \"./d-picker-color-gradient-data\";\r\n\r\nconst VERTEX_SHADER = `\r\nattribute vec2 aPosition;\r\nattribute vec2 aUv;\r\nattribute vec4 aColor;\r\n\r\nuniform mat3 projectionMatrix;\r\nuniform mat3 translationMatrix;\r\n\r\nvarying vec2 vUv;\r\nvarying vec4 vColor;\r\n\r\nvoid main(void) {\r\n\tvec3 position = vec3(aPosition.x, aPosition.y, 1.0);\r\n\tgl_Position = vec4((projectionMatrix * translationMatrix * position).xy, 0.0, 1.0);\r\n\tvUv = aUv;\r\n\tvColor = aColor;\r\n}\r\n`;\r\n\r\nconst FRAGMENT_SHADER = `\r\nvarying vec2 vUv;\r\nvarying vec4 vColor;\r\n\r\nuniform sampler2D uSampler;\r\n\r\nvoid main(void) {\r\n\tvec4 texture = texture2D(uSampler, vUv);\r\n\tfloat cy = step( 1.0, mod( gl_FragCoord.y / 10.0, 2.0 ) );\r\n\tfloat cx = step( 1.0, mod( gl_FragCoord.x / 10.0 + cy, 2.0 ) );\r\n\tfloat c = mix( 0.75, 0.65, cx );\r\n\tgl_FragColor = texture * vec4( mix( vec3( c ), vColor.xyz, vColor.a ), 1.0 );\r\n}`;\r\n\r\ntype Parts = Array<{ data: DPickerColorGradientDataLike | null, rect: Rectangle }>;\r\n\r\nexport class DPickerColorGradientDataView extends Mesh {\r\n\tprotected _nPointsPerData: number;\r\n\tprotected _vertices: Float32Array;\r\n\tprotected _uvs: Float32Array;\r\n\tprotected _colors: Float32Array;\r\n\tprotected _indices: Uint16Array;\r\n\tprotected _lastHitIndex: number;\r\n\r\n\tprotected _workColor: number[];\r\n\tprotected _workPoint: Point;\r\n\r\n\tprotected _parts: Parts;\r\n\r\n\tprotected constructor(\r\n\t\tnPointsPerData: number,\r\n\t\tvertices: Float32Array, uvs: Float32Array, colors: Float32Array, indices: Uint16Array,\r\n\t\tparts: Parts, geometry: Geometry, shader: Shader\r\n\t) {\r\n\t\tsuper( geometry, shader );\r\n\r\n\t\tthis.interactive = true;\r\n\t\tthis.interactiveChildren = false;\r\n\t\tthis.cursor = \"pointer\";\r\n\r\n\t\tthis._nPointsPerData = nPointsPerData;\r\n\t\tthis._vertices = vertices;\r\n\t\tthis._uvs = uvs;\r\n\t\tthis._colors = colors;\r\n\t\tthis._indices = indices;\r\n\t\tthis._lastHitIndex = -1;\r\n\t\tthis._workColor = [ 0, 0, 0 ];\r\n\t\tthis._workPoint = new Point();\r\n\t\tthis._parts = parts;\r\n\r\n\t\tshader.uniforms.uSampler.on( \"update\", (): void => {\r\n\t\t\tthis.update();\r\n\t\t\tDApplications.update( this );\r\n\t\t});\r\n\t\tthis.update();\r\n\t}\r\n\r\n\tgetRectangle( index: number ): Rectangle | null {\r\n\t\tconst parts = this._parts;\r\n\t\tif( 0 <= index && index < parts.length ) {\r\n\t\t\treturn parts[ index ].rect;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tsetRectangle( index: number, x: number, y: number, width: number, height: number ): void {\r\n\t\tconst parts = this._parts;\r\n\t\tif( 0 <= index && index < parts.length ) {\r\n\t\t\tconst rect = parts[ index ].rect;\r\n\t\t\trect.x = x;\r\n\t\t\trect.y = y;\r\n\t\t\trect.width = width;\r\n\t\t\trect.height = height;\r\n\t\t}\r\n\t}\r\n\r\n\tgetData( index: number ): DPickerColorGradientDataLike | null {\r\n\t\tconst parts = this._parts;\r\n\t\tif( 0 <= index && index < parts.length ) {\r\n\t\t\treturn parts[ index ].data;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tsetData( index: number, data: DPickerColorGradientDataLike | null ): void {\r\n\t\tconst parts = this._parts;\r\n\t\tif( 0 <= index && index < parts.length ) {\r\n\t\t\tparts[ index ].data = data;\r\n\t\t}\r\n\t}\r\n\r\n\tgetLastHitIndex(): number {\r\n\t\treturn this._lastHitIndex;\r\n\t}\r\n\r\n\tprivate setColors( ic: number, colors: Float32Array, rgb: number[], alpha: number ) {\r\n\t\tcolors[ ic + 0 ] = rgb[ 0 ];\r\n\t\tcolors[ ic + 1 ] = rgb[ 1 ];\r\n\t\tcolors[ ic + 2 ] = rgb[ 2 ];\r\n\t\tcolors[ ic + 3 ] = alpha;\r\n\t\tcolors[ ic + 4 ] = rgb[ 0 ];\r\n\t\tcolors[ ic + 5 ] = rgb[ 1 ];\r\n\t\tcolors[ ic + 6 ] = rgb[ 2 ];\r\n\t\tcolors[ ic + 7 ] = alpha;\r\n\t}\r\n\r\n\tprivate setColorsHex( ic: number, colors: Float32Array, color: number, alpha: number ) {\r\n\t\tconst rgb = utils.hex2rgb( color, this._workColor );\r\n\t\tthis.setColors( ic, colors, rgb, alpha );\r\n\t}\r\n\r\n\tprivate setColorsWhite( ic: number, colors: Float32Array ) {\r\n\t\tconst rgb = this._workColor;\r\n\t\trgb[ 0 ] = 1;\r\n\t\trgb[ 1 ] = 1;\r\n\t\trgb[ 2 ] = 1;\r\n\t\tthis.setColors( ic, colors, rgb, 0 );\r\n\t}\r\n\r\n\tprivate setColorsPoint( ic: number, data: DPickerColorGradientDataLike, index: number, colors: Float32Array ) {\r\n\t\tconst point = data.points[ index ];\r\n\t\tif( point != null ) {\r\n\t\t\tthis.setColorsHex( ic, colors, point.color, point.alpha );\r\n\t\t} else {\r\n\t\t\tthis.setColorsWhite( ic, colors );\r\n\t\t}\r\n\t}\r\n\r\n\tprotected setVertices( iv: number, vertices: Float32Array, position: number, rect: Rectangle ) {\r\n\t\tconst y = rect.y + rect.height * position;\r\n\t\tvertices[ iv + 0 ] = rect.x;\r\n\t\tvertices[ iv + 1 ] = y;\r\n\t\tvertices[ iv + 2 ] = rect.x + rect.width;\r\n\t\tvertices[ iv + 3 ] = y;\r\n\t}\r\n\r\n\tprotected setUvs( iv: number, uvs: Float32Array, position: number, textureUvs: TextureUvs ) {\r\n\t\tconst x0 = textureUvs.x0 + (textureUvs.x3 - textureUvs.x0) * position;\r\n\t\tconst y0 = textureUvs.y0 + (textureUvs.y3 - textureUvs.y0) * position;\r\n\t\tconst x1 = textureUvs.x1 + (textureUvs.x2 - textureUvs.x1) * position;\r\n\t\tconst y1 = textureUvs.y1 + (textureUvs.y2 - textureUvs.y1) * position;\r\n\t\tuvs[ iv + 0 ] = x0;\r\n\t\tuvs[ iv + 1 ] = y0;\r\n\t\tuvs[ iv + 2 ] = x1;\r\n\t\tuvs[ iv + 3 ] = y1;\r\n\t}\r\n\r\n\tprivate newIndices( ii: number, iv: number, size: number, indices: Uint16Array ): Uint16Array {\r\n\t\tfor( let i = 0; i < size; ++i ) {\r\n\t\t\tindices[ ii + 0 ] = iv + 0;\r\n\t\t\tindices[ ii + 1 ] = iv + 1;\r\n\t\t\tindices[ ii + 2 ] = iv + 2;\r\n\r\n\t\t\tindices[ ii + 3 ] = iv + 2;\r\n\t\t\tindices[ ii + 4 ] = iv + 1;\r\n\t\t\tindices[ ii + 5 ] = iv + 3;\r\n\r\n\t\t\tii += 6;\r\n\t\t\tiv += 2;\r\n\t\t}\r\n\t\treturn indices;\r\n\t}\r\n\r\n\tprotected _calculateBounds() {\r\n\t\tconst rect = this._parts[ 0 ].rect;\r\n\t\tconst bounds = this._bounds;\r\n\t\tconst work = this._workPoint;\r\n\t\twork.set( rect.x, rect.y );\r\n\t\tbounds.addPoint( work );\r\n\t\twork.set( rect.x + rect.width, rect.y + rect.height );\r\n\t\tbounds.addPoint( work );\r\n\t}\r\n\r\n\tupdate(): void {\r\n\t\tconst vertices = this._vertices;\r\n\t\tconst uvs = this._uvs;\r\n\t\tconst colors = this._colors;\r\n\t\tconst indices = this._indices;\r\n\r\n\t\tconst texture = this.shader.uniforms.uSampler;\r\n\t\tif( texture._uvs == null ) {\r\n\t\t\ttexture.updateUvs();\r\n\t\t}\r\n\t\tconst textureUvs: TextureUvs = texture._uvs;\r\n\r\n\t\tlet iv = 0;\r\n\t\tlet nv = 0;\r\n\t\tlet ic = 0;\r\n\t\tlet ii = 0;\r\n\r\n\t\tconst parts = this._parts;\r\n\t\tfor( let i = 0, imax = parts.length; i < imax; ++i ) {\r\n\t\t\tconst data = parts[ i ].data;\r\n\t\t\tconst rect = parts[ i ].rect;\r\n\t\t\tif( data == null ) {\r\n\t\t\t\tthis.setVertices( iv, vertices, 0, rect );\r\n\t\t\t\tthis.setUvs( iv, uvs, 0, textureUvs );\r\n\t\t\t\tthis.setColorsWhite( ic, colors );\r\n\t\t\t\tthis.setVertices( iv + 4, vertices, 1, rect );\r\n\t\t\t\tthis.setUvs( iv, uvs, 1, textureUvs );\r\n\t\t\t\tthis.setColorsWhite( ic + 8, colors );\r\n\t\t\t\tthis.newIndices( ii, nv, 1, indices );\r\n\t\t\t\tiv += 4 * 2;\r\n\t\t\t\tic += 4 * 4;\r\n\t\t\t\tnv += 4;\r\n\t\t\t\tii += 6;\r\n\t\t\t} else {\r\n\t\t\t\tthis.setVertices( iv, vertices, 0, rect );\r\n\t\t\t\tthis.setUvs( iv, uvs, 0, textureUvs );\r\n\t\t\t\tthis.setColorsPoint( ic, data, 0, colors );\r\n\t\t\t\tiv += 2 * 2;\r\n\t\t\t\tic += 2 * 4;\r\n\t\t\t\tconst pointSize = data.points.length;\r\n\t\t\t\tfor( let j = 0, jmax = Math.min( pointSize, this._nPointsPerData ); j < jmax; ++j ) {\r\n\t\t\t\t\tconst point = data.points[ j ];\r\n\t\t\t\t\tthis.setVertices( iv, vertices, point.position, rect );\r\n\t\t\t\t\tthis.setUvs( iv, uvs, point.position, textureUvs );\r\n\t\t\t\t\tthis.setColorsHex( ic, colors, point.color, point.alpha );\r\n\t\t\t\t\tiv += 2 * 2;\r\n\t\t\t\t\tic += 2 * 4;\r\n\t\t\t\t}\r\n\t\t\t\tthis.setVertices( iv, vertices, 1, rect );\r\n\t\t\t\tthis.setUvs( iv, uvs, 1, textureUvs );\r\n\t\t\t\tthis.setColorsPoint( ic, data, pointSize - 1, colors );\r\n\t\t\t\tiv += 2 * 2;\r\n\t\t\t\tic += 2 * 4;\r\n\r\n\t\t\t\tthis.newIndices( ii, nv, pointSize + 1, indices );\r\n\t\t\t\tii += (pointSize + 1) * 6;\r\n\t\t\t\tnv += (pointSize + 2) * 2;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.size = ii;\r\n\r\n\t\tconst geometry = this.geometry;\r\n\t\tgeometry.getBuffer( \"aPosition\" ).update();\r\n\t\tgeometry.getBuffer( \"aUv\" ).update();\r\n\t\tgeometry.getBuffer( \"aColor\" ).update();\r\n\t\tgeometry.getIndex().update();\r\n\t}\r\n\r\n\tcontainsPoint( point: Point ): boolean {\r\n\t\tconst local = this.toLocal( point, undefined, this._workPoint );\r\n\t\tconst parts = this._parts;\r\n\t\tfor( let i = 0, imax = parts.length; i < imax; ++i ) {\r\n\t\t\tconst rect = parts[ i ].rect;\r\n\t\t\tif( rect.contains( local.x, local.y ) ) {\r\n\t\t\t\tthis._lastHitIndex = i;\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tstatic from( size: number, nPointsPerData: number, texture: Texture = Texture.WHITE ) {\r\n\t\tconst vertices = new Float32Array( size * ( nPointsPerData + 2 ) * 2 * 2 );\r\n\t\tconst uvs = new Float32Array( size * ( nPointsPerData + 2 ) * 2 * 2 );\r\n\t\tconst colors = new Float32Array( size * ( nPointsPerData + 2 ) * 2 * 4 );\r\n\t\tconst indices = new Uint16Array( size * ( nPointsPerData + 1 ) * 6 );\r\n\r\n\t\tconst parts: Parts = [];\r\n\t\tfor( let i = 0; i < size; ++i ) {\r\n\t\t\tparts.push({\r\n\t\t\t\tdata: null,\r\n\t\t\t\trect: new Rectangle()\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tconst geometry = new Geometry()\r\n\t\t\t.addIndex( new Buffer( indices, false, true ) )\r\n\t\t\t.addAttribute( \"aPosition\", new Buffer( vertices, false, false ), 2 )\r\n\t\t\t.addAttribute( \"aUv\", new Buffer( uvs, false, false ), 2 )\r\n\t\t\t.addAttribute( \"aColor\", new Buffer( colors, false, false ), 4 );\r\n\t\tconst shader = Shader.from( VERTEX_SHADER, FRAGMENT_SHADER, { uSampler: texture } );\r\n\r\n\t\treturn new DPickerColorGradientDataView(\r\n\t\t\tnPointsPerData,\r\n\t\t\tvertices, uvs, colors, indices,\r\n\t\t\tparts, geometry, shader\r\n\t\t);\r\n\t}\r\n}\r\n"]}