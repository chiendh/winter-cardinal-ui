{"version":3,"file":"d-table-data-list-mapped.js","sourceRoot":"","sources":["../../../src/main/typescript/wcardinal/ui/d-table-data-list-mapped.ts"],"names":[],"mappings":"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","sourcesContent":["import { DTableData, DTableDataMapped, DTableDataMappedEachIteratee } from \"./d-table-data\";\r\n\r\nexport interface DTableDataListMappedParent<ROW> extends DTableData<ROW> {\r\n\treadonly rows: ROW[];\r\n\treadonly supplimentals?: unknown[];\r\n}\r\n\r\nexport class DTableDataListMapped<ROW> implements DTableDataMapped<ROW> {\r\n\tprotected _parent: DTableDataListMappedParent<ROW>;\r\n\r\n\tconstructor( parent: DTableDataListMappedParent<ROW> ) {\r\n\t\tthis._parent = parent;\r\n\t}\r\n\r\n\tmap( unmappedIndex: number ): number | null {\r\n\t\tconst parent = this._parent;\r\n\t\tconst sortedIndex = parent.sorter.map( unmappedIndex );\r\n\t\tif( sortedIndex != null ) {\r\n\t\t\treturn parent.filter.map( sortedIndex );\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tunmap( index: number ): number {\r\n\t\tconst parent = this._parent;\r\n\t\treturn parent.sorter.unmap(\r\n\t\t\tparent.filter.unmap( index )\r\n\t\t);\r\n\t}\r\n\r\n\tsize(): number {\r\n\t\tconst parent = this._parent;\r\n\t\tconst indicesFiltered = parent.filter.indices;\r\n\t\treturn ( indicesFiltered != null ? indicesFiltered.length : parent.size() );\r\n\t}\r\n\r\n\tget( index: number ): ROW | null {\r\n\t\tconst parent = this._parent;\r\n\t\treturn parent.get( this.unmap( index ) );\r\n\t}\r\n\r\n\teach( iteratee: DTableDataMappedEachIteratee<ROW>, ifrom?: number, ito?: number ): void {\r\n\t\tconst parent = this._parent;\r\n\t\tconst rows = parent.rows;\r\n\t\tconst supplimentals = parent.supplimentals;\r\n\t\tconst indicesFiltered = parent.filter.indices;\r\n\t\tconst indicesSorted = parent.sorter.indices;\r\n\t\tifrom = ( ifrom != null ? Math.max( 0, ifrom ) : 0 );\r\n\t\tif( indicesFiltered ) {\r\n\t\t\tconst size = indicesFiltered.length;\r\n\t\t\tito = ( ito != null ? Math.min( size, ito ) : size );\r\n\t\t\tif( indicesSorted ) {\r\n\t\t\t\tfor( let i = ifrom; i < ito; ++i ) {\r\n\t\t\t\t\tconst unmappedIndex = indicesSorted[ indicesFiltered[ i ] ];\r\n\t\t\t\t\tconst row = rows[ unmappedIndex ];\r\n\t\t\t\t\tconst supplimental = ( supplimentals ? supplimentals[ unmappedIndex ] : null );\r\n\t\t\t\t\tif( iteratee( row, supplimental, i, unmappedIndex ) === false ) {\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tfor( let i = ifrom; i < ito; ++i ) {\r\n\t\t\t\t\tconst unmappedIndex = indicesFiltered[ i ];\r\n\t\t\t\t\tconst row = rows[ unmappedIndex ];\r\n\t\t\t\t\tconst supplimental = ( supplimentals ? supplimentals[ unmappedIndex ] : null );\r\n\t\t\t\t\tif( iteratee( row, supplimental, i, unmappedIndex ) === false ) {\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tconst size = rows.length;\r\n\t\t\tito = ( ito != null ? Math.min( size, ito ) : size );\r\n\t\t\tif( indicesSorted ) {\r\n\t\t\t\tfor( let i = ifrom; i < ito; ++i ) {\r\n\t\t\t\t\tconst unmappedIndex = indicesSorted[ i ];\r\n\t\t\t\t\tconst row = rows[ unmappedIndex ];\r\n\t\t\t\t\tconst supplimental = ( supplimentals ? supplimentals[ unmappedIndex ] : null );\r\n\t\t\t\t\tif( iteratee( row, supplimental, i, unmappedIndex ) === false ) {\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tfor( let i = ifrom; i < ito; ++i ) {\r\n\t\t\t\t\tconst row = rows[ i ];\r\n\t\t\t\t\tconst supplimental = ( supplimentals ? supplimentals[ i ] : null );\r\n\t\t\t\t\tif( iteratee( row, supplimental, i, i ) === false ) {\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n"]}