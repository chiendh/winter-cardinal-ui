{"version":3,"file":"d-dynamic-text-measure.js","sourceRoot":"","sources":["../../../src/main/typescript/wcardinal/ui/d-dynamic-text-measure.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,yBAAyB,EAAE,MAAM,iCAAiC,CAAC;AAE5E,OAAO,EAAE,qBAAqB,EAAE,MAAM,gCAAgC,CAAC;AAEvE;IAAA;IAgDA,CAAC;IA7CO,2BAAO,GAAd,UACC,IAAY,EAAE,KAA8B,EAAE,aAAiC;QAE/E,IAAM,MAAM,GAAG,mBAAmB,CAAC,MAAM,GAAG,mBAAmB,CAAC,MAAM,IAAI,IAAI,yBAAyB,EAAE,CAAC;QAC1G,MAAM,CAAC,KAAK,EAAE,CAAC;QACf,IAAI,KAAK,IAAI,IAAI,EAAG;YACnB,IAAM,QAAQ,GAAG,qBAAqB,CAAC,IAAI,CAAE,IAAI,CAAE,CAAC;YACpD,IAAM,UAAU,GAAG,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC;YACrC,IAAM,OAAO,GAAG,IAAI,CAAC;YACrB,OAAO,QAAQ,CAAC,OAAO,EAAE,EAAG;gBAC3B,IAAM,SAAS,GAAG,QAAQ,CAAC,IAAI,EAAE,CAAC;gBAClC,IAAI,SAAS,KAAK,OAAO,EAAG;oBAC3B,MAAM,CAAC,OAAO,CAAE,UAAU,CAAE,CAAC;iBAC7B;qBAAM;oBACN,IAAM,CAAC,GAAG,KAAK,CAAC,GAAG,CAAE,SAAS,CAAE,CAAC;oBACjC,IAAI,CAAC,IAAI,IAAI,EAAG;wBACf,IAAI,aAAa,IAAI,IAAI,IAAI,aAAa,GAAG,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,OAAO,EAAG;4BACnE,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;4BACtB,IAAM,IAAI,GAAG,KAAK,CAAC,GAAG,CAAE,KAAK,CAAE,CAAC;4BAChC,IAAI,IAAI,IAAI,IAAI,EAAG;gCAClB,OAAO,aAAa,GAAG,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,CAAC,EAAG;oCAChD,IAAI,CAAE,MAAM,CAAC,GAAG,EAAE,EAAG;wCACpB,MAAM;qCACN;iCACD;gCACD,IAAI,MAAM,CAAC,CAAC,IAAI,aAAa,GAAG,IAAI,CAAC,OAAO,EAAG;oCAC9C,MAAM,CAAC,IAAI,CAAE,IAAI,CAAE,CAAC;iCACpB;6BACD;4BACD,OAAO,QAAQ,CAAC,OAAO,EAAE,EAAG;gCAC3B,IAAI,QAAQ,CAAC,IAAI,EAAE,KAAK,OAAO,EAAG;oCACjC,MAAM,CAAC,OAAO,CAAE,UAAU,CAAE,CAAC;oCAC7B,MAAM;iCACN;6BACD;yBACD;6BAAM;4BACN,MAAM,CAAC,IAAI,CAAE,CAAC,CAAE,CAAC;yBACjB;qBACD;iBACD;aACD;YACD,MAAM,CAAC,GAAG,CAAE,UAAU,CAAE,CAAC;SACzB;QACD,OAAO,MAAM,CAAC;IACf,CAAC;IA9CgB,0BAAM,GAAqC,IAAI,CAAC;IA+ClE,0BAAC;CAAA,AAhDD,IAgDC;SAhDY,mBAAmB","sourcesContent":["import { DDynamicTextMeasureResult } from \"./d-dynamic-text-measure-result\";\r\nimport { DynamicFontAtlas } from \"./util/dynamic-font-atlas\";\r\nimport { UtilCharacterIterator } from \"./util/util-character-iterator\";\r\n\r\nexport class DDynamicTextMeasure {\r\n\tprotected static RESULT: DDynamicTextMeasureResult | null = null;\r\n\r\n\tstatic measure(\r\n\t\ttext: string, atlas: DynamicFontAtlas | null, clippingWidth: number | undefined\r\n\t): DDynamicTextMeasureResult {\r\n\t\tconst result = DDynamicTextMeasure.RESULT = DDynamicTextMeasure.RESULT || new DDynamicTextMeasureResult();\r\n\t\tresult.start();\r\n\t\tif( atlas != null ) {\r\n\t\t\tconst iterator = UtilCharacterIterator.from( text );\r\n\t\t\tconst lineHeight = atlas.font.height;\r\n\t\t\tconst newLine = \"\\n\";\r\n\t\t\twhile( iterator.hasNext() ) {\r\n\t\t\t\tconst character = iterator.next();\r\n\t\t\t\tif( character === newLine ) {\r\n\t\t\t\t\tresult.newLine( lineHeight );\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconst a = atlas.get( character );\r\n\t\t\t\t\tif( a != null ) {\r\n\t\t\t\t\t\tif( clippingWidth != null && clippingWidth < result.x + a.advance ) {\r\n\t\t\t\t\t\t\tresult.clipped = true;\r\n\t\t\t\t\t\t\tconst dots = atlas.get( \"...\" );\r\n\t\t\t\t\t\t\tif( dots != null ) {\r\n\t\t\t\t\t\t\t\twhile( clippingWidth - dots.advance < result.x ) {\r\n\t\t\t\t\t\t\t\t\tif( ! result.pop() ) {\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif( result.x <= clippingWidth - dots.advance ) {\r\n\t\t\t\t\t\t\t\t\tresult.push( dots );\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\twhile( iterator.hasNext() ) {\r\n\t\t\t\t\t\t\t\tif( iterator.next() === newLine ) {\r\n\t\t\t\t\t\t\t\t\tresult.newLine( lineHeight );\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tresult.push( a );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tresult.end( lineHeight );\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n}\r\n"]}