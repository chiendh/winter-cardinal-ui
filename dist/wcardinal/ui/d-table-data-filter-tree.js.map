{"version":3,"file":"d-table-data-filter-tree.js","sourceRoot":"","sources":["../../../src/main/typescript/wcardinal/ui/d-table-data-filter-tree.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (C) 2019 Toshiba Corporation\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { utils } from \"pixi.js\";\r\nimport { DTableDataFilter, DTableDataFilterFunction, DTableDataFilterObject } from \"./d-table-data-filter\";\r\nimport { DTableDataTreeItem } from \"./d-table-data-tree-item\";\r\nimport { isFunction } from \"./util/is-function\";\r\n\r\ninterface DTableDataFilterTreeParent<NODE> {\r\n\treadonly nodes: NODE[] | undefined;\r\n\tisOpened( node: NODE ): boolean;\r\n\tupdate(): void;\r\n}\r\n\r\nexport class DTableDataFilterTree<NODE extends DTableDataTreeItem<NODE, NODE>>\r\n\textends utils.EventEmitter implements DTableDataFilter<NODE> {\r\n\tprotected _id: number;\r\n\tprotected _idUpdated: number;\r\n\tprotected _isApplied: boolean;\r\n\tprotected _parent: DTableDataFilterTreeParent<NODE>;\r\n\tprotected _filter: DTableDataFilterFunction<NODE> | DTableDataFilterObject<NODE> | null;\r\n\tprotected _filtered: number[] | null;\r\n\r\n\tconstructor( parent: DTableDataFilterTreeParent<NODE> ) {\r\n\t\tsuper();\r\n\r\n\t\tthis._id = 0;\r\n\t\tthis._idUpdated = -1;\r\n\t\tthis._isApplied = false;\r\n\r\n\t\tthis._parent = parent;\r\n\t\tthis._filter = null;\r\n\t\tthis._filtered = null;\r\n\t}\r\n\r\n\tget id(): number {\r\n\t\treturn this._id;\r\n\t}\r\n\r\n\tapply(): void {\r\n\t\tthis._isApplied = true;\r\n\t\tthis._id += 1;\r\n\t\tthis._parent.update();\r\n\t}\r\n\r\n\tunapply(): void {\r\n\t\tif( this._isApplied ) {\r\n\t\t\tthis._isApplied = false;\r\n\t\t\tthis._id += 1;\r\n\t\t\tthis._parent.update();\r\n\t\t}\r\n\t}\r\n\r\n\tisApplied(): boolean {\r\n\t\treturn this._isApplied;\r\n\t}\r\n\r\n\tprotected isFiltered(\r\n\t\tnode: NODE, index: number,\r\n\t\tfilter: DTableDataFilterFunction<NODE> | DTableDataFilterObject<NODE>\r\n\t): boolean {\r\n\t\tif( isFunction( filter ) ) {\r\n\t\t\treturn filter( node, index );\r\n\t\t} else {\r\n\t\t\treturn filter.test( node, index );\r\n\t\t}\r\n\t}\r\n\r\n\tprotected hasFiltered(\r\n\t\tparent: DTableDataFilterTreeParent<NODE>,\r\n\t\tnodes: NODE[],\r\n\t\tfilter: DTableDataFilterFunction<NODE> | DTableDataFilterObject<NODE>\r\n\t): boolean {\r\n\t\tfor( let i = 0, imax = nodes.length; i < imax; ++i ) {\r\n\t\t\tconst node = nodes[ i ];\r\n\t\t\tif( this.isFiltered( node, -1, filter ) ) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tif( node.children != null && 0 < node.children.length && this.hasFiltered( parent, node.children, filter ) ) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tprotected addAllToFiltered(\r\n\t\tparent: DTableDataFilterTreeParent<NODE>,\r\n\t\tnodes: NODE[],\r\n\t\tfiltered: number[],\r\n\t\tcursor: [ number ]\r\n\t): void {\r\n\t\tfor( let i = 0, imax = nodes.length; i < imax; ++i ) {\r\n\t\t\tconst node = nodes[ i ];\r\n\t\t\tfiltered.push( cursor[ 0 ] );\r\n\t\t\tcursor[ 0 ] += 1;\r\n\t\t\tif( node.children != null && 0 < node.children.length && parent.isOpened( node ) ) {\r\n\t\t\t\tthis.addAllToFiltered( parent, node.children, filtered, cursor );\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprotected newFilteredSub(\r\n\t\tparent: DTableDataFilterTreeParent<NODE>,\r\n\t\tnodes: NODE[],\r\n\t\tfilter: DTableDataFilterFunction<NODE> | DTableDataFilterObject<NODE>,\r\n\t\tfiltered: number[],\r\n\t\tcursor: [ number ]\r\n\t): boolean {\r\n\t\tlet result = false;\r\n\t\tfor( let i = 0, imax = nodes.length; i < imax; ++i ) {\r\n\t\t\tconst node = nodes[ i ];\r\n\t\t\tconst index = cursor[ 0 ];\r\n\t\t\tcursor[ 0 ] += 1;\r\n\t\t\tconst isFiltered = this.isFiltered( node, index, filter );\r\n\t\t\tif( node.children != null && 0 < node.children.length ) {\r\n\t\t\t\tif( parent.isOpened( node ) ) {\r\n\t\t\t\t\tif( isFiltered ) {\r\n\t\t\t\t\t\tfiltered.push( index );\r\n\t\t\t\t\t\tresult = true;\r\n\t\t\t\t\t\tthis.addAllToFiltered( parent, node.children, filtered, cursor );\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tconst position = filtered.length;\r\n\t\t\t\t\t\tif( this.newFilteredSub( parent, node.children, filter, filtered, cursor ) ) {\r\n\t\t\t\t\t\t\tfiltered.splice( position, 0, index );\r\n\t\t\t\t\t\t\tresult = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if( isFiltered || this.hasFiltered( parent, node.children, filter ) ) {\r\n\t\t\t\t\tfiltered.push( index );\r\n\t\t\t\t\tresult = true;\r\n\t\t\t\t}\r\n\t\t\t} else if( isFiltered ) {\r\n\t\t\t\tfiltered.push( index );\r\n\t\t\t\tresult = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\tprotected newFiltered(): number[] | null {\r\n\t\tconst filter = this._filter;\r\n\t\tif( filter != null ) {\r\n\t\t\tconst filtered: number[] = [];\r\n\t\t\tconst parent = this._parent;\r\n\t\t\tconst nodes = parent.nodes;\r\n\t\t\tif( nodes ) {\r\n\t\t\t\tconst cursor: [ number ] = [ 0 ];\r\n\t\t\t\tthis.newFilteredSub( parent, nodes, filter, filtered, cursor );\r\n\t\t\t}\r\n\t\t\treturn filtered;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tget(): DTableDataFilterFunction<NODE> | DTableDataFilterObject<NODE> | null {\r\n\t\treturn this._filter;\r\n\t}\r\n\r\n\tset( filter: DTableDataFilterFunction<NODE> | DTableDataFilterObject<NODE> | null ): void {\r\n\t\tif( this._filter !== filter ) {\r\n\t\t\tthis._filter = filter;\r\n\t\t}\r\n\t}\r\n\r\n\ttoDirty(): void {\r\n\t\tthis._id += 1;\r\n\t}\r\n\r\n\tupdate(): void {\r\n\t\tif( this._id !== this._idUpdated ) {\r\n\t\t\tthis._idUpdated = this._id;\r\n\t\t\tif( this._isApplied ) {\r\n\t\t\t\tthis._filtered = this.newFiltered();\r\n\t\t\t\tthis.emit( \"change\", this );\r\n\t\t\t} else if( this._filtered != null ) {\r\n\t\t\t\tthis._filtered = null;\r\n\t\t\t\tthis.emit( \"change\", this );\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tget indices(): number[] | null {\r\n\t\tthis.update();\r\n\t\treturn this._filtered;\r\n\t}\r\n\r\n\tmap( sortedIndex: number ): number | null {\r\n\t\tlet result = sortedIndex;\r\n\r\n\t\tconst indices = this.indices;\r\n\t\tif( indices ) {\r\n\t\t\tconst index = indices.indexOf( result );\r\n\t\t\tif( 0 <= index ) {\r\n\t\t\t\tresult = index;\r\n\t\t\t} else {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\tunmap( index: number ): number {\r\n\t\tlet result = index;\r\n\r\n\t\tconst indices = this.indices;\r\n\t\tif( indices ) {\r\n\t\t\tresult = indices[ result ];\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n}\r\n"]}