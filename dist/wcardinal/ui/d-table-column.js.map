{"version":3,"file":"d-table-column.js","sourceRoot":"","sources":["../../../src/main/typescript/wcardinal/ui/d-table-column.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAyBH,MAAM,CAAN,IAAY,gBAgBX;AAhBD,WAAY,gBAAgB;IAC3B,yDAAK,CAAA;IACL,uDAAI,CAAA;IACJ,6DAAO,CAAA;IACP,uDAAI,CAAA;IACJ,yDAAK,CAAA;IACL,uEAAY,CAAA;IACZ,yDAAK,CAAA;IACL,2DAAM,CAAA;IACN,2DAAM,CAAA;IACN,uDAAI,CAAA;IACJ,gEAAQ,CAAA;IACR,wDAAI,CAAA;IACJ,4DAAM,CAAA;IACN,wDAAI,CAAA;IACJ,wDAAI,CAAA;AACL,CAAC,EAhBW,gBAAgB,KAAhB,gBAAgB,QAgB3B","sourcesContent":["/*\r\n * Copyright (C) 2019 Toshiba Corporation\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { DAlignHorizontal } from \"./d-align-horizontal\";\r\nimport { DDialogSelectOptions } from \"./d-dialog-select\";\r\nimport { DMenu, DMenuOptions } from \"./d-menu\";\r\nimport { DTableBodyCellButtonOptions } from \"./d-table-body-cell-button\";\r\nimport { DTableBodyCellCheckOptions } from \"./d-table-body-cell-check\";\r\nimport { DTableBodyCellColorOptions } from \"./d-table-body-cell-color\";\r\nimport { DTableBodyCellDateOptions } from \"./d-table-body-cell-date\";\r\nimport { DTableBodyCellDatetimeOptions } from \"./d-table-body-cell-datetime\";\r\nimport { DTableBodyCellIndexOptions } from \"./d-table-body-cell-index\";\r\nimport { DTableBodyCellInputIntegerOptions } from \"./d-table-body-cell-input-integer\";\r\nimport { DTableBodyCellInputRealOptions } from \"./d-table-body-cell-input-real\";\r\nimport { DTableBodyCellInputTextOptions } from \"./d-table-body-cell-input-text\";\r\nimport { DTableBodyCellLinkLinkOptions, DTableBodyCellLinkOptions } from \"./d-table-body-cell-link\";\r\nimport { DTableBodyCellSelectDialogOptions } from \"./d-table-body-cell-select-dialog\";\r\nimport { DTableBodyCellSelectMenuOptions } from \"./d-table-body-cell-select-menu\";\r\nimport { DTableBodyCellSelectMultipleOptions } from \"./d-table-body-cell-select-multiple\";\r\nimport { DTableBodyCellSelectPromiseOptions } from \"./d-table-body-cell-select-promise\";\r\nimport { DTableBodyCellTextOptions } from \"./d-table-body-cell-text\";\r\nimport { DTableBodyCellTimeOptions } from \"./d-table-body-cell-time\";\r\nimport { DTableBodyCellTreeOptions } from \"./d-table-body-cell-tree\";\r\nimport { DTableDataComparatorFunction, DTableDataComparatorObject } from \"./d-table-data-sorter\";\r\nimport { DTableHeaderCellOptions } from \"./d-table-header-cell\";\r\n\r\nexport enum DTableColumnType {\r\n\tINDEX,\r\n\tTEXT,\r\n\tINTEGER,\r\n\tREAL,\r\n\tCHECK,\r\n\tCHECK_SINGLE,\r\n\tCOLOR,\r\n\tBUTTON,\r\n\tSELECT,\r\n\tDATE,\r\n\tDATETIME,\r\n\tTIME,\r\n\tACTION,\r\n\tLINK,\r\n\tTREE\r\n}\r\n\r\nexport type DTableGetter<ROW, CELL> = ( row: ROW, columnIndex: number ) => CELL;\r\nexport type DTableSetter<ROW, CELL> = ( row: ROW, columnIndex: number, cell: CELL ) => void;\r\nexport type DTableFormatter<CELL> = ( cell: CELL ) => string;\r\nexport type DTableEditingFormatter<CELL> = ( cell: CELL ) => string;\r\nexport type DTableEditingUnformatter<CELL> = ( formatted: string ) => CELL;\r\nexport type DTableEditingValidator<CELL> = ( cell: CELL ) => string | null;\r\nexport type DTableSelectingGetter<CELL, DIALOG> = ( dialog: DIALOG ) => CELL;\r\nexport type DTableSelectingSetter<CELL, DIALOG> = ( dialog: DIALOG, cell: CELL ) => void;\r\nexport type DTableEditable<ROW> = ( row: ROW, columnIndex: number ) => boolean;\r\nexport type DTableRenderable<ROW> = ( row: ROW, columnIndex: number ) => boolean;\r\n\r\nexport type DTableBodyCellOptionsUnion<ROW> = DTableBodyCellTextOptions<ROW> | DTableBodyCellInputTextOptions<ROW> |\r\n\tDTableBodyCellInputIntegerOptions<ROW> | DTableBodyCellInputRealOptions<ROW> | DTableBodyCellIndexOptions<ROW> |\r\n\tDTableBodyCellColorOptions<ROW> | DTableBodyCellCheckOptions<ROW> | DTableBodyCellSelectDialogOptions<ROW> |\r\n\tDTableBodyCellSelectPromiseOptions<ROW> | DTableBodyCellSelectMenuOptions<ROW> | DTableBodyCellDateOptions<ROW> |\r\n\tDTableBodyCellDatetimeOptions<ROW> | DTableBodyCellTimeOptions<ROW> | DTableBodyCellButtonOptions<ROW> |\r\n\tDTableBodyCellLinkOptions<ROW> | DTableBodyCellSelectMultipleOptions<ROW> | DTableBodyCellTreeOptions<ROW>;\r\n\r\nexport type DTableBodyCellOptionsMerged<ROW> = DTableBodyCellTextOptions<ROW> & DTableBodyCellInputTextOptions<ROW> &\r\n\tDTableBodyCellInputIntegerOptions<ROW> & DTableBodyCellInputRealOptions<ROW> & DTableBodyCellIndexOptions<ROW> &\r\n\tDTableBodyCellColorOptions<ROW> & DTableBodyCellCheckOptions<ROW> & DTableBodyCellSelectDialogOptions<ROW> &\r\n\tDTableBodyCellSelectPromiseOptions<ROW> & DTableBodyCellSelectMenuOptions<ROW> & DTableBodyCellDateOptions<ROW> &\r\n\tDTableBodyCellDatetimeOptions<ROW> & DTableBodyCellTimeOptions<ROW> & DTableBodyCellButtonOptions<ROW> &\r\n\tDTableBodyCellLinkOptions<ROW> & DTableBodyCellSelectMenuOptions<ROW> & DTableBodyCellTreeOptions<ROW>;\r\n\r\nexport interface DTableColumnEditingOptions<ROW, CELL> {\r\n\tenable?: boolean | DTableEditable<ROW> | \"auto\" | \"AUTO\";\r\n\tformatter?: DTableEditingFormatter<CELL>;\r\n\tunformatter?: DTableEditingUnformatter<CELL>;\r\n\tvalidator?: DTableEditingValidator<CELL>;\r\n}\r\n\r\nexport interface DTableColumnEditing<ROW, CELL> {\r\n\tenable: boolean | DTableEditable<ROW>;\r\n\tformatter: DTableEditingFormatter<CELL>;\r\n\tunformatter: DTableEditingUnformatter<CELL>;\r\n\tvalidator?: DTableEditingValidator<CELL>;\r\n}\r\n\r\nexport interface DTableColumnSortingOptions<ROW> {\r\n\tenable?: boolean;\r\n\tcomparator?: DTableDataComparatorFunction<ROW> | DTableDataComparatorObject<ROW>;\r\n}\r\n\r\nexport interface DTableColumnSorting<ROW> {\r\n\tenable: boolean;\r\n\tcomparator?: DTableDataComparatorFunction<ROW> | DTableDataComparatorObject<ROW>;\r\n}\r\n\r\nexport interface DTableColumnSelectingDialog<VALUE> {\r\n\treadonly value: VALUE;\r\n\topen(): Promise<void>;\r\n}\r\n\r\nexport interface DTableColumnSelectingOptions<\r\n\tCELL,\r\n\tDIALOG_VALUE,\r\n\tDIALOG extends DTableColumnSelectingDialog<DIALOG_VALUE>\r\n> {\r\n\tgetter?: DTableSelectingGetter<CELL, DIALOG>;\r\n\tsetter?: DTableSelectingSetter<CELL, DIALOG>;\r\n\r\n\tmenu?: DMenuOptions<CELL> | DMenu<CELL>;\r\n\tmultiple?: DMenuOptions<CELL> | DMenu<CELL>;\r\n\tdialog?: DDialogSelectOptions<DIALOG_VALUE> | DIALOG;\r\n\tpromise?: () => Promise<CELL>;\r\n}\r\n\r\nexport interface DTableColumnSelecting<\r\n\tCELL,\r\n\tDIALOG_VALUE,\r\n\tDIALOG extends DTableColumnSelectingDialog<DIALOG_VALUE>\r\n> {\r\n\tgetter: DTableSelectingGetter<CELL, DIALOG>;\r\n\tsetter: DTableSelectingSetter<CELL, DIALOG>;\r\n\r\n\tmenu?: DMenu<CELL>;\r\n\tmultiple?: DMenu<CELL>;\r\n\tdialog?: DIALOG;\r\n\tpromise?: () => Promise<CELL>;\r\n}\r\n\r\nexport interface DTableColumnOptions<\r\n\tROW,\r\n\tCELL = any,\r\n\tDIALOG_VALUE = any,\r\n\tDIALOG extends DTableColumnSelectingDialog<DIALOG_VALUE> = any\r\n> {\r\n\tweight?: number;\r\n\twidth?: number;\r\n\r\n\ttype?: (keyof typeof DTableColumnType) | DTableColumnType;\r\n\tlabel?: string;\r\n\tgetter?: DTableGetter<ROW, CELL>;\r\n\tsetter?: DTableSetter<ROW, CELL>;\r\n\tpath?: string;\r\n\tdefault?: CELL;\r\n\tformatter?: DTableFormatter<CELL>;\r\n\talign?: (keyof typeof DAlignHorizontal) | DAlignHorizontal;\r\n\r\n\t/**\r\n\t * If the renderable is\r\n\t *\r\n\t * * true, cells get rendered.\r\n\t * * false, cells do not get rendered.\r\n\t * * a function, cells get rendered only when that function returns true.\r\n\t * * \"AUTO\", cells get rendered only when the cell data exit.\r\n\t */\r\n\trenderable?: boolean | DTableRenderable<ROW> | \"auto\" | \"AUTO\";\r\n\r\n\t/**\r\n\t * If the editable is\r\n\t *\r\n\t * * true, cells get editable.\r\n\t * * false, cells do not get editable.\r\n\t * * a function, cells are editable only when that function returns true.\r\n\t * * \"AUTO\", cells are editable only when the cell data exist.\r\n\t */\r\n\teditable?: boolean | DTableEditable<ROW> | \"auto\" | \"AUTO\";\r\n\tediting?: DTableColumnEditingOptions<ROW, CELL>;\r\n\r\n\tsortable?: boolean;\r\n\tsorting?: DTableColumnSortingOptions<ROW>;\r\n\r\n\theader?: DTableHeaderCellOptions<ROW>;\r\n\tbody?: DTableBodyCellOptionsUnion<ROW>;\r\n\r\n\tselecting?: DTableColumnSelectingOptions<CELL, DIALOG_VALUE, DIALOG>;\r\n\r\n\tcategory?: string | string[];\r\n\tfrozen?: boolean;\r\n\r\n\tlink?: DTableBodyCellLinkLinkOptions<ROW>;\r\n}\r\n\r\nexport interface DTableColumn<\r\n\tROW,\r\n\tCELL = unknown,\r\n\tDIALOG_VALUE = unknown,\r\n\tDIALOG extends DTableColumnSelectingDialog<DIALOG_VALUE> = DTableColumnSelectingDialog<DIALOG_VALUE>\r\n> {\r\n\tweight: number | undefined;\r\n\twidth: number | undefined;\r\n\r\n\ttype: DTableColumnType;\r\n\tlabel: string;\r\n\tgetter: DTableGetter<ROW, CELL>;\r\n\tsetter: DTableSetter<ROW, CELL>;\r\n\tformatter?: DTableFormatter<CELL>;\r\n\talign: DAlignHorizontal;\r\n\trenderable: boolean | DTableRenderable<ROW>;\r\n\r\n\tediting: DTableColumnEditing<ROW, CELL>;\r\n\tsorting: DTableColumnSorting<ROW>;\r\n\r\n\theader?: DTableHeaderCellOptions<ROW>;\r\n\tbody?: DTableBodyCellOptionsUnion<ROW>;\r\n\r\n\tselecting: DTableColumnSelecting<CELL, DIALOG_VALUE, DIALOG>;\r\n\r\n\tcategory?: string | string[];\r\n\tfrozen?: boolean;\r\n\toffset: number;\r\n\r\n\tlink?: DTableBodyCellLinkLinkOptions<ROW>;\r\n}\r\n"]}