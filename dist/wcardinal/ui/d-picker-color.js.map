{"version":3,"file":"d-picker-color.js","sourceRoot":"","sources":["../../../src/main/typescript/wcardinal/ui/d-picker-color.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (C) 2019 Toshiba Corporation\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { Container, interaction, Point, Sprite, Texture } from \"pixi.js\";\r\nimport InteractionEvent = interaction.InteractionEvent;\r\nimport { DApplications } from \"./d-applications\";\r\nimport { DBase, DBaseOptions, DThemeBase } from \"./d-base\";\r\nimport { DBaseState } from \"./d-base-state\";\r\nimport { DColorAndAlpha } from \"./d-color\";\r\nimport { DInputRealAndLabel } from \"./d-input-real-and-label\";\r\nimport { DInputTextAndLabel } from \"./d-input-text-and-label\";\r\nimport { DPickerColorAndAlpha } from \"./d-picker-color-and-alpha\";\r\nimport { DPickerColorRecent } from \"./d-picker-color-recent\";\r\nimport { UtilHsv } from \"./util/util-hsv\";\r\nimport { UtilPointerEvent } from \"./util/util-pointer-event\";\r\nimport { UtilRgb } from \"./util/util-rgb\";\r\n\r\nexport interface DPickerColorOptions<THEME extends DThemePickerColor = DThemePickerColor> extends DBaseOptions<THEME> {\r\n\r\n}\r\n\r\nexport interface DThemePickerColor extends DThemeBase {\r\n\tgetMainWidth(): number;\r\n\tgetMainHeight(): number;\r\n\tgetMainTexture(): Texture;\r\n\tgetMainPointerTexture(): Texture;\r\n\tgetMainPointerColor(): number;\r\n\tgetMainPointerAlpha(): number;\r\n\r\n\tgetBaseHeight(): number;\r\n\tgetBaseMargin(): number;\r\n\tgetBaseTexture(): Texture;\r\n\tgetBasePointerTexture(): Texture;\r\n\tgetBasePointerColor(): number;\r\n\tgetBasePointerAlpha(): number;\r\n\r\n\tgetAlphaHeight(): number;\r\n\tgetAlphaMargin(): number;\r\n\tgetAlphaTexture(): Texture;\r\n\tgetAlphaCheckerboardTexture(): Texture;\r\n\tgetAlphaPointerTexture(): Texture;\r\n\tgetAlphaPointerColor(): number;\r\n\tgetAlphaPointerAlpha(): number;\r\n\r\n\tgetRecentMargin(): number;\r\n\tgetRecentColorMargin(): number;\r\n\tgetRecentColorWidth(): number;\r\n\tgetRecentColorHeight(): number;\r\n\tgetRecentColorCount(): number;\r\n\tgetRecentCheckerboardTexture(): Texture;\r\n\tgetRecents(): DColorAndAlpha[];\r\n\r\n\tgetInputMargin(): number;\r\n\tgetInputLabelWidth(): number;\r\n\r\n\tgetSampleWidth(): number;\r\n\tgetSampleHeight(): number;\r\n\tgetSampleCheckerboardTexture(): Texture;\r\n}\r\n\r\nexport class DPickerColor<\r\n\tTHEME extends DThemePickerColor = DThemePickerColor,\r\n\tOPTIONS extends DPickerColorOptions<THEME> = DPickerColorOptions<THEME>\r\n> extends DBase<THEME, OPTIONS> {\r\n\tprotected static RECENT_COLORS: DPickerColorRecent | null = null;\r\n\r\n\tprotected _mainBaseSprite!: Sprite;\r\n\tprotected _mainSprite!: Sprite;\r\n\tprotected _mainPointerSprite!: Sprite;\r\n\tprotected _pointerPoint!: Point;\r\n\tprotected _onMainMoveBound!: ( e: InteractionEvent ) => void;\r\n\tprotected _onMainUpBound!: ( e: InteractionEvent ) => void;\r\n\r\n\tprotected _baseSprite!: Sprite;\r\n\tprotected _basePointerSprite!: Sprite;\r\n\tprotected _onBaseMoveBound!: ( e: InteractionEvent ) => void;\r\n\tprotected _onBaseUpBound!: ( e: InteractionEvent ) => void;\r\n\r\n\tprotected _alphaCheckerboardSprite!: Sprite;\r\n\tprotected _alphaSprite!: Sprite;\r\n\tprotected _alphaPointerSprite!: Sprite;\r\n\tprotected _onAlphaMoveBound!: ( e: InteractionEvent ) => void;\r\n\tprotected _onAlphaUpBound!: ( e: InteractionEvent ) => void;\r\n\r\n\tprotected _recentColorSprites!: Sprite[];\r\n\tprotected _recent!: DPickerColorRecent;\r\n\r\n\tprotected _inputAndLabelColor!: DInputTextAndLabel;\r\n\tprotected _inputAndLabelAlpha!: DInputRealAndLabel;\r\n\r\n\tprotected _sampleCurrentCheckerboardSprite!: Sprite;\r\n\tprotected _sampleCurrentSprite!: Sprite;\r\n\tprotected _sampleNewCheckerboardSprite!: Sprite;\r\n\tprotected _sampleNewSprite!: Sprite;\r\n\r\n\tprotected _current!: DColorAndAlpha;\r\n\tprotected _currentPicker!: DPickerColorAndAlpha;\r\n\tprotected _base!: number;\r\n\tprotected _new!: DColorAndAlpha;\r\n\tprotected _newPicker!: DPickerColorAndAlpha;\r\n\r\n\tget current(): DColorAndAlpha {\r\n\t\treturn this._currentPicker;\r\n\t}\r\n\r\n\tget new(): DColorAndAlpha {\r\n\t\treturn this._newPicker;\r\n\t}\r\n\r\n\tget recent(): DPickerColorRecent {\r\n\t\treturn this._recent;\r\n\t}\r\n\r\n\tprotected init( options?: OPTIONS ) {\r\n\t\tsuper.init( options );\r\n\r\n\t\tthis.setState( DBaseState.UNFOCUSABLE, true );\r\n\r\n\t\tthis._base = 0xff0000;\r\n\t\tthis._new = { color: 0xffffff, alpha: 1 };\r\n\t\tthis._newPicker = new DPickerColorAndAlpha( this._new, ( color ) => {\r\n\t\t\tthis.setColorNew( color );\r\n\t\t}, ( alpha: number ) => {\r\n\t\t\tthis.setAlphaNew( alpha );\r\n\t\t});\r\n\t\tthis._current = { color: 0xffffff, alpha: 1 };\r\n\t\tthis._currentPicker = new DPickerColorAndAlpha( this._current, ( color ) => {\r\n\t\t\tthis.setColorCurrent( color );\r\n\t\t}, ( alpha: number ) => {\r\n\t\t\tthis.setAlphaCurrent( alpha );\r\n\t\t});\r\n\r\n\t\tconst theme = this.theme;\r\n\t\tconst padding = this._padding;\r\n\t\tconst paddingTop = padding.getTop();\r\n\t\tconst paddingRight = padding.getRight();\r\n\t\tconst paddingBottom = padding.getBottom();\r\n\t\tconst paddingLeft = padding.getLeft();\r\n\t\tthis._pointerPoint = new Point();\r\n\r\n\t\t// Main\r\n\t\tconst mainWidth = theme.getMainWidth();\r\n\t\tconst mainHeight = theme.getMainHeight();\r\n\t\tconst mainBaseSprite = this._mainBaseSprite = new Sprite( Texture.WHITE );\r\n\t\tmainBaseSprite.x = paddingLeft;\r\n\t\tmainBaseSprite.y = paddingTop;\r\n\t\tmainBaseSprite.width = mainWidth;\r\n\t\tmainBaseSprite.height = mainHeight;\r\n\t\tmainBaseSprite.interactive = true;\r\n\t\tthis.addChild( mainBaseSprite );\r\n\r\n\t\tconst mainSprite = this._mainSprite = new Sprite( theme.getMainTexture() );\r\n\t\tmainSprite.x = paddingLeft;\r\n\t\tmainSprite.y = paddingTop;\r\n\t\tmainSprite.tint = this._base;\r\n\t\tmainSprite.interactive = false;\r\n\t\tthis.addChild( mainSprite );\r\n\r\n\t\t// Main event handling\r\n\t\tthis._onMainMoveBound = ( e: InteractionEvent ): void => {\r\n\t\t\tthis.onMainMove( e );\r\n\t\t};\r\n\t\tthis._onMainUpBound = ( e: InteractionEvent ): void => {\r\n\t\t\tthis.onMainUp( e );\r\n\t\t};\r\n\t\tmainBaseSprite.on( UtilPointerEvent.down, ( e: InteractionEvent ) => {\r\n\t\t\tthis.onMainDown( e );\r\n\t\t});\r\n\r\n\t\t// Base color picker\r\n\t\tconst baseSprite = this._baseSprite = new Sprite( theme.getBaseTexture() );\r\n\t\tbaseSprite.x = paddingLeft;\r\n\t\tbaseSprite.y = mainBaseSprite.y + mainBaseSprite.height + theme.getBaseMargin();\r\n\t\tbaseSprite.interactive = true;\r\n\t\tthis.addChild( baseSprite );\r\n\r\n\t\t// Base event\r\n\t\tthis._onBaseMoveBound = ( e: InteractionEvent ): void => {\r\n\t\t\tthis.onBaseMove( e );\r\n\t\t};\r\n\t\tthis._onBaseUpBound = ( e: InteractionEvent ): void => {\r\n\t\t\tthis.onBaseUp( e );\r\n\t\t};\r\n\t\tbaseSprite.on( UtilPointerEvent.down, ( e: InteractionEvent ) => {\r\n\t\t\tthis.onBaseDown( e );\r\n\t\t});\r\n\r\n\t\t// Alpha picker\r\n\t\tconst alphaCheckerboardSprite = this._alphaCheckerboardSprite =\r\n\t\t\tnew Sprite( theme.getAlphaCheckerboardTexture() );\r\n\t\talphaCheckerboardSprite.x = padding.getLeft();\r\n\t\talphaCheckerboardSprite.y = baseSprite.y + theme.getBaseHeight() + theme.getBaseMargin();\r\n\t\talphaCheckerboardSprite.interactive = false;\r\n\t\tthis.addChild( alphaCheckerboardSprite );\r\n\r\n\t\tconst alphaSprite = new Sprite( theme.getAlphaTexture() );\r\n\t\talphaSprite.tint = this._new.color;\r\n\t\talphaSprite.interactive = true;\r\n\t\talphaCheckerboardSprite.addChild( alphaSprite );\r\n\r\n\t\t// Alpha event\r\n\t\tthis._onAlphaMoveBound = ( e: InteractionEvent ): void => {\r\n\t\t\tthis.onAlphaMove( e );\r\n\t\t};\r\n\t\tthis._onAlphaUpBound = ( e: InteractionEvent ): void => {\r\n\t\t\tthis.onAlphaUp( e );\r\n\t\t};\r\n\t\talphaSprite.on( UtilPointerEvent.down, ( e: InteractionEvent ) => {\r\n\t\t\tthis.onAlphaDown( e );\r\n\t\t});\r\n\r\n\t\t// Pointers\r\n\t\tconst mainPointerSprite = this._mainPointerSprite = new Sprite( theme.getMainPointerTexture() );\r\n\t\tmainPointerSprite.x = paddingLeft;\r\n\t\tmainPointerSprite.y = paddingTop;\r\n\t\tmainPointerSprite.anchor.x = 0.5;\r\n\t\tmainPointerSprite.anchor.y = 0.5;\r\n\t\tmainPointerSprite.tint = theme.getMainPointerColor();\r\n\t\tmainPointerSprite.alpha = theme.getMainPointerAlpha();\r\n\t\tmainPointerSprite.interactive = false;\r\n\t\tthis.addChild( mainPointerSprite );\r\n\r\n\t\tconst alphaPointerSprite = this._alphaPointerSprite = new Sprite( theme.getAlphaPointerTexture() );\r\n\t\talphaPointerSprite.x = mainWidth;\r\n\t\talphaPointerSprite.y = alphaCheckerboardSprite.height * 0.5;\r\n\t\talphaPointerSprite.tint = theme.getAlphaPointerColor();\r\n\t\talphaPointerSprite.alpha = theme.getAlphaPointerAlpha();\r\n\t\talphaPointerSprite.anchor.set( 0.5, 0.5 );\r\n\t\talphaPointerSprite.interactive = false;\r\n\t\talphaCheckerboardSprite.addChild( alphaPointerSprite );\r\n\r\n\t\tconst basePointerSprite = this._basePointerSprite = new Sprite( theme.getBasePointerTexture() );\r\n\t\tbasePointerSprite.x = 0;\r\n\t\tbasePointerSprite.y = baseSprite.height * 0.5;\r\n\t\tbasePointerSprite.tint = theme.getBasePointerColor();\r\n\t\tbasePointerSprite.alpha = theme.getBasePointerAlpha();\r\n\t\tbasePointerSprite.anchor.set( 0.5, 0.5 );\r\n\t\tbasePointerSprite.interactive = false;\r\n\t\tbaseSprite.addChild( basePointerSprite );\r\n\r\n\t\t// Recently used\r\n\t\tthis._recentColorSprites = [];\r\n\t\tconst recentColorSprites = this._recentColorSprites;\r\n\t\tconst recentColorCount = theme.getRecentColorCount();\r\n\t\tconst recentColorWidth = theme.getRecentColorWidth();\r\n\t\tconst recentColorHeight = theme.getRecentColorHeight();\r\n\t\tconst recentColorWidthHalf = recentColorWidth * 0.5;\r\n\t\tconst recentColorHeightHalf = recentColorHeight * 0.5;\r\n\t\tconst recentColorMargin = theme.getRecentColorMargin();\r\n\t\tconst recentColorY = alphaCheckerboardSprite.y + theme.getAlphaHeight() + theme.getRecentMargin();\r\n\t\tconst recentCheckerboardTexture = theme.getRecentCheckerboardTexture();\r\n\t\tif( DPickerColor.RECENT_COLORS == null ) {\r\n\t\t\tDPickerColor.RECENT_COLORS = new DPickerColorRecent(\r\n\t\t\t\ttheme.getRecents().slice( 0 ),\r\n\t\t\t\trecentColorCount\r\n\t\t\t);\r\n\t\t}\r\n\t\tconst recent = this._recent = DPickerColor.RECENT_COLORS;\r\n\t\trecent.on( \"change\", () => {\r\n\t\t\tthis.onRecentChange();\r\n\t\t});\r\n\t\tconst onRecentClick = ( e: InteractionEvent ) => {\r\n\t\t\tconst checkerboardSprite = e.currentTarget;\r\n\t\t\tif( checkerboardSprite instanceof Container ) {\r\n\t\t\t\tconst sprite = checkerboardSprite.children[ 0 ];\r\n\t\t\t\tif( sprite instanceof Sprite ) {\r\n\t\t\t\t\tthis.setColorNew( sprite.tint );\r\n\t\t\t\t\tthis.setAlphaNew( sprite.alpha );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\tfor( let i = 0; i < recentColorCount; ++i ) {\r\n\t\t\tconst x = paddingLeft + i * (recentColorWidth + recentColorMargin);\r\n\r\n\t\t\tconst checkerboardSprite = new Sprite( recentCheckerboardTexture );\r\n\t\t\tcheckerboardSprite.x = x + recentColorWidthHalf;\r\n\t\t\tcheckerboardSprite.y = recentColorY + recentColorHeightHalf;\r\n\t\t\tcheckerboardSprite.anchor.x = 0.5;\r\n\t\t\tcheckerboardSprite.anchor.y = 0.5;\r\n\t\t\tcheckerboardSprite.buttonMode = true;\r\n\t\t\tcheckerboardSprite.interactive = true;\r\n\t\t\tUtilPointerEvent.onClick( checkerboardSprite, onRecentClick );\r\n\t\t\tthis.addChild( checkerboardSprite );\r\n\r\n\t\t\tconst sprite = new Sprite( Texture.WHITE );\r\n\t\t\tconst recentColorAndAlpha = recent.get( i );\r\n\t\t\tif( recentColorAndAlpha != null ) {\r\n\t\t\t\tsprite.tint = recentColorAndAlpha.color;\r\n\t\t\t\tsprite.alpha = recentColorAndAlpha.alpha;\r\n\t\t\t} else {\r\n\t\t\t\tsprite.tint = 0xffffff;\r\n\t\t\t\tsprite.alpha = 0;\r\n\t\t\t}\r\n\t\t\tsprite.width = recentColorWidth;\r\n\t\t\tsprite.height = recentColorHeight;\r\n\t\t\tsprite.anchor.x = 0.5;\r\n\t\t\tsprite.anchor.y = 0.5;\r\n\t\t\tsprite.interactive = false;\r\n\t\t\tcheckerboardSprite.addChild( sprite );\r\n\t\t\trecentColorSprites.push( sprite );\r\n\t\t}\r\n\r\n\t\t// Input color\r\n\t\tconst inputMargin = theme.getInputMargin();\r\n\t\tconst inputY = recentColorY + recentColorHeight + inputMargin;\r\n\t\tconst inputWidth = mainWidth * 0.5;\r\n\t\tconst inputAndLabelColor = this._inputAndLabelColor = new DInputTextAndLabel({\r\n\t\t\tparent: this,\r\n\t\t\tx: paddingLeft,\r\n\t\t\ty: inputY,\r\n\t\t\twidth: inputWidth,\r\n\t\t\tlabel: {\r\n\t\t\t\twidth: theme.getInputLabelWidth(),\r\n\t\t\t\ttext: {\r\n\t\t\t\t\tvalue: \"#\"\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tinput: {\r\n\t\t\t\tweight: 1,\r\n\t\t\t\ttext: {\r\n\t\t\t\t\tvalue: \"FFFFFF\"\r\n\t\t\t\t},\r\n\t\t\t\ton: {\r\n\t\t\t\t\tinput: ( code: string ): void => {\r\n\t\t\t\t\t\tconst color = UtilRgb.fromCode( code );\r\n\t\t\t\t\t\tif( color != null ) {\r\n\t\t\t\t\t\t\tthis.setColorNew( color );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tconst inputAndLabelAlpha = this._inputAndLabelAlpha = new DInputRealAndLabel({\r\n\t\t\tparent: this,\r\n\t\t\tx: paddingLeft,\r\n\t\t\ty: inputY + inputAndLabelColor.height + inputMargin,\r\n\t\t\twidth: inputWidth,\r\n\t\t\tlabel: {\r\n\t\t\t\twidth: theme.getInputLabelWidth(),\r\n\t\t\t\ttext: {\r\n\t\t\t\t\tvalue: \"A\"\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tinput: {\r\n\t\t\t\tweight: 1,\r\n\t\t\t\ttext: {\r\n\t\t\t\t\tvalue: 1\r\n\t\t\t\t},\r\n\t\t\t\tmin: 0,\r\n\t\t\t\tmax: 1,\r\n\t\t\t\ton: {\r\n\t\t\t\t\tinput: ( value: number ) => {\r\n\t\t\t\t\t\tthis.setAlphaNew( value );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t// Samples\r\n\t\tconst sampleWidth = theme.getSampleWidth();\r\n\t\tconst sampleHeight = theme.getSampleHeight();\r\n\t\tconst sampleX = paddingLeft + mainWidth * 0.75 - sampleWidth;\r\n\t\tconst sampleY = inputY + (inputAndLabelColor.height + inputMargin + inputAndLabelAlpha.height - sampleHeight) * 0.5;\r\n\r\n\t\tconst sampleCurrentCheckerboardSprite = this._sampleCurrentCheckerboardSprite =\r\n\t\t\tnew Sprite( theme.getSampleCheckerboardTexture() );\r\n\t\tsampleCurrentCheckerboardSprite.x = sampleX;\r\n\t\tsampleCurrentCheckerboardSprite.y = sampleY;\r\n\t\tsampleCurrentCheckerboardSprite.width = sampleWidth;\r\n\t\tsampleCurrentCheckerboardSprite.height = sampleHeight;\r\n\t\tsampleCurrentCheckerboardSprite.interactive = false;\r\n\t\tthis.addChild( sampleCurrentCheckerboardSprite );\r\n\r\n\t\tconst current = this._current;\r\n\t\tconst sampleCurrentSprite = this._sampleCurrentSprite = new Sprite( Texture.WHITE );\r\n\t\tsampleCurrentSprite.x = sampleX;\r\n\t\tsampleCurrentSprite.y = sampleY;\r\n\t\tsampleCurrentSprite.tint = current.color;\r\n\t\tsampleCurrentSprite.alpha = current.alpha;\r\n\t\tsampleCurrentSprite.width = sampleWidth;\r\n\t\tsampleCurrentSprite.height = sampleHeight;\r\n\t\tsampleCurrentSprite.interactive = true;\r\n\t\tsampleCurrentSprite.buttonMode = true;\r\n\t\tUtilPointerEvent.onClick( sampleCurrentSprite, (): void => {\r\n\t\t\tthis.setColorNew( current.color );\r\n\t\t\tthis.setAlphaNew( current.alpha );\r\n\t\t});\r\n\t\tthis.addChild( sampleCurrentSprite );\r\n\r\n\t\tconst sampleNewCheckerboardSprite = this._sampleNewCheckerboardSprite =\r\n\t\t\tnew Sprite( theme.getSampleCheckerboardTexture() );\r\n\t\tsampleNewCheckerboardSprite.x = sampleX + sampleWidth;\r\n\t\tsampleNewCheckerboardSprite.y = sampleY;\r\n\t\tsampleNewCheckerboardSprite.width = sampleWidth;\r\n\t\tsampleNewCheckerboardSprite.height = sampleHeight;\r\n\t\tsampleNewCheckerboardSprite.interactive = false;\r\n\t\tthis.addChild( sampleNewCheckerboardSprite );\r\n\r\n\t\tconst sampleNewSprite = this._sampleNewSprite = new Sprite( Texture.WHITE );\r\n\t\tsampleNewSprite.x = sampleX + sampleWidth;\r\n\t\tsampleNewSprite.y = sampleY;\r\n\t\tsampleNewSprite.tint = this._new.color;\r\n\t\tsampleNewSprite.alpha = this._new.alpha;\r\n\t\tsampleNewSprite.width = sampleWidth;\r\n\t\tsampleNewSprite.height = sampleHeight;\r\n\t\tsampleNewSprite.interactive = false;\r\n\t\tthis.addChild( sampleNewSprite );\r\n\r\n\t\t// Width\r\n\t\tif( options == null || options.width == null ) {\r\n\t\t\tthis.width = paddingLeft + mainWidth + paddingRight;\r\n\t\t}\r\n\r\n\t\t// Height\r\n\t\tif( options == null || options.height == null ) {\r\n\t\t\tthis.height = inputY + inputAndLabelColor.height + inputMargin + inputAndLabelAlpha.height + paddingBottom;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected onMainDown( e: InteractionEvent ): void {\r\n\t\tthis.onMainPick( e.data.global );\r\n\r\n\t\tconst layer = DApplications.getLayer( this );\r\n\t\tif( layer ) {\r\n\t\t\tconst stage = layer.stage;\r\n\t\t\tstage.on( UtilPointerEvent.move, this._onMainMoveBound );\r\n\t\t\tstage.on( UtilPointerEvent.up, this._onMainUpBound );\r\n\t\t}\r\n\t}\r\n\r\n\tprotected onMainMove( e: InteractionEvent ): void {\r\n\t\tthis.onMainPick( e.data.global );\r\n\t}\r\n\r\n\tprotected onMainUp( e: InteractionEvent ): void {\r\n\t\tconst layer = DApplications.getLayer( this );\r\n\t\tif( layer ) {\r\n\t\t\tconst stage = layer.stage;\r\n\t\t\tstage.off( UtilPointerEvent.move, this._onMainMoveBound );\r\n\t\t\tstage.off( UtilPointerEvent.up, this._onMainUpBound );\r\n\t\t}\r\n\t}\r\n\r\n\tprotected toMainHex( b: number, w0: number, w1: number, shift: number ) {\r\n\t\treturn Math.max( 0, Math.min( 255, w0 * 255 + w1 * (( b >> shift ) & 0xff) ) ) << shift;\r\n\t}\r\n\r\n\tprotected toMainColor( base: number, tx: number, ty: number, width: number, height: number ): number {\r\n\t\tconst hw = width * 0.5;\r\n\t\tconst ux = Math.max( 0, Math.min( 1, ((tx - hw) * ( 1 - ty / height ) + hw) / width ) );\r\n\t\tconst uy = Math.max( 0, Math.min( 1, ty / height ) );\r\n\t\tconst w1 = Math.abs( 0.5 * uy  - ux );\r\n\t\tconst w0 = 1 - w1 - uy;\r\n\t\tconst r = this.toMainHex( base, w0, w1, 16 );\r\n\t\tconst g = this.toMainHex( base, w0, w1, 8 );\r\n\t\tconst b = this.toMainHex( base, w0, w1, 0 );\r\n\t\treturn r | g | b;\r\n\t}\r\n\r\n\tprotected onMainPick( global: Point ) {\r\n\t\tconst point = this._pointerPoint;\r\n\t\tconst padding = this._padding;\r\n\t\tconst paddingLeft = padding.getLeft();\r\n\t\tconst paddingTop = padding.getTop();\r\n\t\tconst theme = this.theme;\r\n\t\tconst mainWidth = theme.getMainWidth();\r\n\t\tconst mainHeight = theme.getMainHeight();\r\n\t\tthis.toLocal( global, undefined, point );\r\n\t\tconst x = Math.max( 0, Math.min( mainWidth, point.x - paddingLeft ) );\r\n\t\tconst y = Math.max( 0, Math.min( mainHeight, point.y - paddingTop ) );\r\n\t\tconst mainPointerSprite = this._mainPointerSprite;\r\n\t\tmainPointerSprite.position.set( paddingLeft + x, paddingTop + y );\r\n\t\tthis.onColorNew( this.toMainColor(\r\n\t\t\tthis._base, x, y, mainWidth, mainHeight ) );\r\n\t}\r\n\r\n\tprotected setColorCurrent( color: number ) {\r\n\t\tthis._sampleCurrentSprite.tint = this._current.color = color;\r\n\t}\r\n\r\n\tprotected setAlphaCurrent( alpha: number ) {\r\n\t\tthis._sampleCurrentSprite.alpha = this._current.alpha = alpha;\r\n\t}\r\n\r\n\tprotected setColorNew( color: number ) {\r\n\t\tconst theme = this.theme;\r\n\t\tconst mainWidth = theme.getMainWidth();\r\n\t\tconst mainHeight = theme.getMainHeight();\r\n\t\tconst padding = this._padding;\r\n\r\n\t\t// Base color\r\n\t\tconst hsv = UtilHsv.fromRgb( color );\r\n\t\tthis._mainSprite.tint = this._base = UtilHsv.toRgb( hsv[ 0 ], 255, 255 );\r\n\r\n\t\t// Move the base pointer\r\n\t\tconst basePointerSprite = this._basePointerSprite;\r\n\t\tbasePointerSprite.x = Math.max( 0, Math.min( 1, hsv[ 0 ] / 360 ) ) * mainWidth;\r\n\r\n\t\t// Move the main pointer\r\n\t\tconst ns = Math.max( 0, Math.min( 1, hsv[ 1 ] / 255 ) );\r\n\t\tconst nv = Math.max( 0, Math.min( 1, 1 - hsv[ 2 ] / 255 ) );\r\n\t\tconst mainPointerSprite = this._mainPointerSprite;\r\n\t\tmainPointerSprite.tint = (nv < 0.45 ? theme.getMainPointerColor() : 0xffffff);\r\n\t\tmainPointerSprite.position.set(\r\n\t\t\tpadding.getLeft() + ns * mainWidth,\r\n\t\t\tpadding.getTop() + nv * mainHeight\r\n\t\t);\r\n\r\n\t\t// New color\r\n\t\tthis.onColorNew( color );\r\n\t}\r\n\r\n\tprotected onColorNew( color: number ) {\r\n\t\tconst layer = DApplications.getLayer( this );\r\n\t\tif( layer ) {\r\n\t\t\tlayer.disallowUpdate();\r\n\t\t}\r\n\t\tthis._sampleNewSprite.tint = this._new.color = color;\r\n\t\tthis._inputAndLabelColor.input.value = UtilRgb.toCode( color );\r\n\t\tthis.emit( \"newcolorchange\", color, this );\r\n\t\tif( layer ) {\r\n\t\t\tlayer.allowUpdate();\r\n\t\t\tlayer.update();\r\n\t\t}\r\n\t}\r\n\r\n\tprotected onBaseDown( e: InteractionEvent ): void {\r\n\t\tthis.onBasePick( e.data.global );\r\n\r\n\t\tconst layer = DApplications.getLayer( this );\r\n\t\tif( layer ) {\r\n\t\t\tconst stage = layer.stage;\r\n\t\t\tstage.on( UtilPointerEvent.move, this._onBaseMoveBound );\r\n\t\t\tstage.on( UtilPointerEvent.up, this._onBaseUpBound );\r\n\t\t}\r\n\t}\r\n\r\n\tprotected onBaseMove( e: InteractionEvent ): void {\r\n\t\tthis.onBasePick( e.data.global );\r\n\t}\r\n\r\n\tprotected onBaseUp( e: InteractionEvent ): void {\r\n\t\tconst layer = DApplications.getLayer( this );\r\n\t\tif( layer ) {\r\n\t\t\tconst stage = layer.stage;\r\n\t\t\tstage.off( UtilPointerEvent.move, this._onBaseMoveBound );\r\n\t\t\tstage.off( UtilPointerEvent.up, this._onBaseUpBound );\r\n\t\t}\r\n\t}\r\n\r\n\tprotected toBaseHex( t: number, shift: number ) {\r\n\t\treturn Math.max( 0, Math.min( 255, t * 6 * 255 ) ) << shift;\r\n\t}\r\n\r\n\tprotected toBaseColor( t: number ): number {\r\n\t\tif( t <= 0.167 ) {\r\n\t\t\treturn 0xff0000 + this.toBaseHex( t, 8 );\r\n\t\t} else if( t <= 0.333 ) {\r\n\t\t\tt = 0.333 - t;\r\n\t\t\treturn 0x00ff00 + this.toBaseHex( t, 16 );\r\n\t\t} else if( t <= 0.5 ) {\r\n\t\t\tt -= 0.333;\r\n\t\t\treturn 0x00ff00 + this.toBaseHex( t, 0 );\r\n\t\t} else if( t < 0.667 ) {\r\n\t\t\tt = 0.667 - t;\r\n\t\t\treturn 0x0000ff + this.toBaseHex( t, 8 );\r\n\t\t} else if( t < 0.883 ) {\r\n\t\t\tt -= 0.667;\r\n\t\t\treturn 0x0000ff + this.toBaseHex( t, 16 );\r\n\t\t} else {\r\n\t\t\tt = 0.883 - t;\r\n\t\t\treturn 0xff0000 + this.toBaseHex( t, 0 );\r\n\t\t}\r\n\t}\r\n\r\n\tprotected onBasePick( global: Point ) {\r\n\t\tconst point = this._pointerPoint;\r\n\t\tconst padding = this._padding;\r\n\t\tconst theme = this.theme;\r\n\t\tconst mainWidth = theme.getMainWidth();\r\n\t\tthis.toLocal( global, undefined, point );\r\n\t\tconst x = Math.max( 0, Math.min( mainWidth, point.x - padding.getLeft() ) );\r\n\t\tconst basePointerSprite = this._basePointerSprite;\r\n\t\tbasePointerSprite.x = x;\r\n\t\tthis.onColorBase( this.toBaseColor( x / mainWidth ) );\r\n\t}\r\n\r\n\tprotected setColorBase( h: number ) {\r\n\t\tconst theme = this.theme;\r\n\t\tconst mainWidth = theme.getMainWidth();\r\n\t\tconst basePointerSprite = this._basePointerSprite;\r\n\t\tbasePointerSprite.x = Math.max( 0, Math.min( 1, h / 360 ) ) * mainWidth;\r\n\t\tthis.onColorBase( UtilHsv.toRgb( h, 255, 255 ) );\r\n\t}\r\n\r\n\tprotected onColorBase( color: number ) {\r\n\t\tthis._mainSprite.tint = this._base = color;\r\n\r\n\t\tconst mainPointerSprite = this._mainPointerSprite;\r\n\t\tconst theme = this.theme;\r\n\t\tconst mainWidth = theme.getMainWidth();\r\n\t\tconst mainHeight = theme.getMainHeight();\r\n\t\tconst padding = this._padding;\r\n\t\tthis.onColorNew( this.toMainColor(\r\n\t\t\tthis._base,\r\n\t\t\tmainPointerSprite.x - padding.getLeft(),\r\n\t\t\tmainPointerSprite.y - padding.getTop(),\r\n\t\t\tmainWidth,\r\n\t\t\tmainHeight\r\n\t\t));\r\n\t}\r\n\r\n\tprotected onAlphaDown( e: InteractionEvent ): void {\r\n\t\tthis.onAlphaPick( e.data.global );\r\n\r\n\t\tconst layer = DApplications.getLayer( this );\r\n\t\tif( layer ) {\r\n\t\t\tconst stage = layer.stage;\r\n\t\t\tstage.on( UtilPointerEvent.move, this._onAlphaMoveBound );\r\n\t\t\tstage.on( UtilPointerEvent.up, this._onAlphaUpBound );\r\n\t\t}\r\n\t}\r\n\r\n\tprotected onAlphaMove( e: InteractionEvent ): void {\r\n\t\tthis.onAlphaPick( e.data.global );\r\n\t}\r\n\r\n\tprotected onAlphaUp( e: InteractionEvent ): void {\r\n\t\tconst layer = DApplications.getLayer( this );\r\n\t\tif( layer ) {\r\n\t\t\tconst stage = layer.stage;\r\n\t\t\tstage.off( UtilPointerEvent.move, this._onAlphaMoveBound );\r\n\t\t\tstage.off( UtilPointerEvent.up, this._onAlphaUpBound );\r\n\t\t}\r\n\t}\r\n\r\n\tprotected onAlphaPick( global: Point ) {\r\n\t\tconst point = this._pointerPoint;\r\n\t\tconst padding = this._padding;\r\n\t\tconst theme = this.theme;\r\n\t\tconst mainWidth = theme.getMainWidth();\r\n\t\tthis.toLocal( global, undefined, point );\r\n\t\tconst x = Math.max( 0, Math.min( mainWidth, point.x - padding.getLeft() ) );\r\n\t\tthis._alphaPointerSprite.x = x;\r\n\t\tthis.onAlphaNew( x / mainWidth );\r\n\t}\r\n\r\n\tprotected setAlphaNew( alpha: number ): void {\r\n\t\tconst theme = this.theme;\r\n\t\tconst mainWidth = theme.getMainWidth();\r\n\t\tthis._alphaPointerSprite.x = Math.max( 0, Math.min( 1, alpha ) ) * mainWidth;\r\n\t\tthis.onAlphaNew( alpha );\r\n\t}\r\n\r\n\tprotected onAlphaNew( alpha: number ): void {\r\n\t\tconst layer = DApplications.getLayer( this );\r\n\t\tif( layer ) {\r\n\t\t\tlayer.disallowUpdate();\r\n\t\t}\r\n\t\tthis._sampleNewSprite.alpha = this._new.alpha = alpha;\r\n\t\tthis._inputAndLabelAlpha.input.value = Number( alpha.toFixed( 2 ) );\r\n\t\tthis.emit( \"newalphachange\", alpha, this );\r\n\t\tif( layer ) {\r\n\t\t\tlayer.allowUpdate();\r\n\t\t\tlayer.update();\r\n\t\t}\r\n\t}\r\n\r\n\tprotected onRecentChange(): void {\r\n\t\tconst sprites = this._recentColorSprites;\r\n\t\tconst recent = this._recent;\r\n\t\tfor( let i = 0, imax = sprites.length; i < imax; ++i ) {\r\n\t\t\tconst sprite = sprites[ i ];\r\n\t\t\tconst colorAndAlpha = recent.get( i );\r\n\t\t\tif( colorAndAlpha != null ) {\r\n\t\t\t\tsprite.tint = colorAndAlpha.color;\r\n\t\t\t\tsprite.alpha = colorAndAlpha.alpha;\r\n\t\t\t} else {\r\n\t\t\t\tsprite.tint = 0xffffff;\r\n\t\t\t\tsprite.alpha = 0;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprotected getType(): string {\r\n\t\treturn \"DPickerColor\";\r\n\t}\r\n}\r\n"]}