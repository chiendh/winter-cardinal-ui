import { Point } from "pixi.js";
import { buildStep } from "./build-step";
import { toLength } from "./to-length";
import { STEP_VALUES, toStep } from "./to-step";
export var TRIANGLE_VERTEX_COUNT = 7;
export var TRIANGLE_INDEX_COUNT = 3;
export var TRIANGLE_WORLD_SIZE = [0, 0, 0];
var TRIANGLE_WORK_POINT = new Point();
export var buildTriangleClipping = function (clippings, voffset) {
    // Clippings
    var iv = voffset * 3;
    clippings[iv + 0] = 0;
    clippings[iv + 1] = 0;
    clippings[iv + 2] = 0;
    iv += 3;
    clippings[iv + 0] = 1;
    clippings[iv + 1] = 0;
    clippings[iv + 2] = 0;
    iv += 3;
    clippings[iv + 0] = 1;
    clippings[iv + 1] = 0;
    clippings[iv + 2] = 0;
    iv += 3;
    clippings[iv + 0] = 0;
    clippings[iv + 1] = 1;
    clippings[iv + 2] = 0;
    iv += 3;
    clippings[iv + 0] = 0;
    clippings[iv + 1] = 1;
    clippings[iv + 2] = 0;
    iv += 3;
    clippings[iv + 0] = 1;
    clippings[iv + 1] = 0;
    clippings[iv + 2] = 0;
    iv += 3;
    clippings[iv + 0] = 1;
    clippings[iv + 1] = 0;
    clippings[iv + 2] = 0;
};
export var buildTriangleIndex = function (indices, voffset, ioffset) {
    // Indices
    var ii = ioffset * 3;
    indices[ii + 0] = voffset + 0;
    indices[ii + 1] = voffset + 1;
    indices[ii + 2] = voffset + 2;
    indices[ii + 3] = voffset + 0;
    indices[ii + 4] = voffset + 3;
    indices[ii + 5] = voffset + 4;
    indices[ii + 6] = voffset + 0;
    indices[ii + 7] = voffset + 5;
    indices[ii + 8] = voffset + 6;
};
export var buildTriangleVertex = function (vertices, voffset, originX, originY, sizeX, sizeY, strokeAlign, strokeWidth, internalTransform, worldSize) {
    var s = strokeAlign * strokeWidth;
    var sx = sizeX * 0.5 + (0 <= sizeX ? +s : -s);
    var sy = sizeY * 0.5 + (0 <= sizeY ? +s : -s);
    var sz = Math.sqrt(sx * sx + 4 * sy * sy);
    var sw = 2 * sx * sy / (sx + sz);
    var work = TRIANGLE_WORK_POINT;
    work.set(originX, originY - sy);
    internalTransform.apply(work, work);
    var x0 = work.x;
    var y0 = work.y;
    work.set(originX, originY);
    internalTransform.apply(work, work);
    var tx = work.x;
    var ty = work.y;
    work.set(originX + sx, originY);
    internalTransform.apply(work, work);
    var dx = tx - x0;
    var dy = ty - y0;
    var x1 = work.x + dx;
    var y1 = work.y + dy;
    var x2 = tx + (tx - work.x) + dx;
    var y2 = ty + (ty - work.y) + dy;
    work.set(originX, originY + sy - sw); // Incenter of a triangle
    internalTransform.apply(work, work);
    var x3 = work.x;
    var y3 = work.y;
    // World size
    var xb = tx + dx;
    var yb = ty + dy;
    worldSize[0] = toLength(xb, yb, x3, y3);
    worldSize[1] = toLength(x1, y1, xb, yb);
    worldSize[2] = toLength(x0, y0, tx, ty);
    // Vertices
    var iv = voffset << 1;
    vertices[iv + 0] = x3;
    vertices[iv + 1] = y3;
    vertices[iv + 2] = x0;
    vertices[iv + 3] = y0;
    vertices[iv + 4] = x1;
    vertices[iv + 5] = y1;
    vertices[iv + 6] = x1;
    vertices[iv + 7] = y1;
    vertices[iv + 8] = x2;
    vertices[iv + 9] = y2;
    vertices[iv + 10] = x2;
    vertices[iv + 11] = y2;
    vertices[iv + 12] = x0;
    vertices[iv + 13] = y0;
};
export var buildTriangleStep = function (steps, clippings, voffset, vcount, strokeWidth, antialiasWeight, worldSize) {
    toStep(worldSize[0], strokeWidth, antialiasWeight, STEP_VALUES);
    var swc = STEP_VALUES[0];
    var pc0 = STEP_VALUES[1];
    var pc1 = STEP_VALUES[2];
    buildStep(steps, clippings, voffset, vcount, swc, swc, pc0, pc0, pc1, pc1);
};
export var buildTriangleUv = function (uvs, textureUvs, voffset, worldSize) {
    var x0 = textureUvs.x0;
    var x1 = textureUvs.x1;
    var x2 = textureUvs.x2;
    var x3 = textureUvs.x3;
    var y0 = textureUvs.y0;
    var y1 = textureUvs.y1;
    var y2 = textureUvs.y2;
    var y3 = textureUvs.y3;
    var x4 = 0.5 * (x0 + x1);
    var y4 = 0.5 * (y0 + y1);
    var c = 1 - 0.5 * worldSize[0] / worldSize[2];
    var x5 = x4 + c * (x3 - x0);
    var y5 = y4 + c * (y3 - y0);
    var iuv = voffset << 1;
    uvs[iuv + 0] = x5;
    uvs[iuv + 1] = y5;
    uvs[iuv + 2] = x4;
    uvs[iuv + 3] = y4;
    uvs[iuv + 4] = x2;
    uvs[iuv + 5] = y2;
    uvs[iuv + 6] = x2;
    uvs[iuv + 7] = y2;
    uvs[iuv + 8] = x3;
    uvs[iuv + 9] = y3;
    uvs[iuv + 10] = x3;
    uvs[iuv + 11] = y3;
    uvs[iuv + 12] = x4;
    uvs[iuv + 13] = y4;
};
//# sourceMappingURL=build-triangle.js.map