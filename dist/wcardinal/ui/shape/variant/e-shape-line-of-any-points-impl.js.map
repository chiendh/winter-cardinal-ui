{"version":3,"file":"e-shape-line-of-any-points-impl.js","sourceRoot":"","sources":["../../../../../src/main/typescript/wcardinal/ui/shape/variant/e-shape-line-of-any-points-impl.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (C) 2019 Toshiba Corporation\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { Matrix, Point } from \"pixi.js\";\r\nimport { EShape } from \"../e-shape\";\r\nimport { EShapeDefaults } from \"../e-shape-defaults\";\r\nimport { EShapePoints } from \"../e-shape-points\";\r\nimport { EShapePointsStyle } from \"../e-shape-points-style\";\r\nimport { EShapeResourceManagerSerialization } from \"../e-shape-resource-manager-serialization\";\r\nimport {\r\n\tEShapeLineOfAnyPoints, EShapeLineOfAnyPointsHitTester, EShapeLineOfAnyPointsTestRange\r\n} from \"./e-shape-line-of-any-points\";\r\nimport { EShapeLineOfAnyPointsFill } from \"./e-shape-line-of-any-points-fill\";\r\nimport { EShapeLineOfAnyPointsFillImpl } from \"./e-shape-line-of-any-points-fill-impl\";\r\nimport { EShapeLineOfAnyPointsPoint } from \"./e-shape-line-of-any-points-point\";\r\nimport { EShapeLineOfAnyPointsPointImpl } from \"./e-shape-line-of-any-points-point-impl\";\r\nimport { EShapeLineOfAnyPointsStroke } from \"./e-shape-line-of-any-points-stroke\";\r\nimport { EShapeLineOfAnyPointsStrokeImpl } from \"./e-shape-line-of-any-points-stroke-impl\";\r\n\r\nexport class EShapeLineOfAnyPointsImpl implements EShapeLineOfAnyPoints {\r\n\tprotected static WORK_RANGE: [ number, number ] = [ 0, 0 ];\r\n\r\n\tprotected _parent: EShape;\r\n\tprotected _values: number[];\r\n\tprotected _valuesLength: number;\r\n\tprotected _segments: number[];\r\n\tprotected _size: EShapeLineOfAnyPointsPoint;\r\n\tprotected _offset: EShapeLineOfAnyPointsPoint;\r\n\tprotected _fill: EShapeLineOfAnyPointsFill;\r\n\tprotected _stroke: EShapeLineOfAnyPointsStroke;\r\n\tprotected _id: number;\r\n\r\n\tconstructor( parent: EShape ) {\r\n\t\tthis._parent = parent;\r\n\t\tthis._values = [];\r\n\t\tthis._valuesLength = 0;\r\n\t\tthis._segments = [];\r\n\t\tthis._size = new EShapeLineOfAnyPointsPointImpl( this, EShapeDefaults.SIZE_X, EShapeDefaults.SIZE_Y );\r\n\t\tthis._offset = new EShapeLineOfAnyPointsPointImpl( this, 0, 0 );\r\n\t\tthis._fill = new EShapeLineOfAnyPointsFillImpl( parent );\r\n\t\tthis._stroke = new EShapeLineOfAnyPointsStrokeImpl( parent );\r\n\t\tthis._id = 0;\r\n\t}\r\n\r\n\tget length(): number {\r\n\t\treturn this._values.length >> 1;\r\n\t}\r\n\r\n\tget id(): number {\r\n\t\treturn this._id;\r\n\t}\r\n\r\n\tget values(): number[] {\r\n\t\treturn this._values;\r\n\t}\r\n\r\n\tset values( values: number[] ) {\r\n\t\tthis.set( values, undefined, undefined );\r\n\t}\r\n\r\n\tget segments(): number[] {\r\n\t\treturn this._segments;\r\n\t}\r\n\r\n\tset segments( segments: number[] ) {\r\n\t\t// DO NOTHING\r\n\t}\r\n\r\n\tget style(): EShapePointsStyle {\r\n\t\treturn EShapePointsStyle.NONE;\r\n\t}\r\n\r\n\tset style( style: EShapePointsStyle ) {\r\n\t\tthis.set( undefined, undefined, style );\r\n\t}\r\n\r\n\tget size(): EShapeLineOfAnyPointsPoint {\r\n\t\treturn this._size;\r\n\t}\r\n\r\n\tget offset(): EShapeLineOfAnyPointsPoint {\r\n\t\treturn this._offset;\r\n\t}\r\n\r\n\tget fill(): EShapeLineOfAnyPointsFill {\r\n\t\treturn this._fill;\r\n\t}\r\n\r\n\tget stroke(): EShapeLineOfAnyPointsStroke {\r\n\t\treturn this._stroke;\r\n\t}\r\n\r\n\tcopy( source: EShapePoints ): this {\r\n\t\treturn this.set( source.values, source.segments, source.style );\r\n\t}\r\n\r\n\tset( newValues?: number[], newSegments?: number[], newStyle?: EShapePointsStyle ): this {\r\n\t\tlet isDirty = false;\r\n\t\tlet isUpdated = false;\r\n\r\n\t\t// Values\r\n\t\tif( newValues != null ) {\r\n\t\t\tconst values = this._values;\r\n\t\t\tconst valuesLength = this._valuesLength;\r\n\t\t\tconst newValuesLength = newValues.length;\r\n\t\t\tif( values !== newValues ) {\r\n\t\t\t\tconst iupdate = Math.min( valuesLength, newValuesLength );\r\n\r\n\t\t\t\tfor( let i = 0; i < iupdate; ++i ) {\r\n\t\t\t\t\tvalues[ i ] = newValues[ i ];\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor( let i = iupdate; i < newValuesLength; ++i ) {\r\n\t\t\t\t\tvalues.push( newValues[ i ] );\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif( valuesLength !== newValuesLength ) {\r\n\t\t\t\t\tvalues.length = newValuesLength;\r\n\t\t\t\t\tthis._valuesLength = newValuesLength;\r\n\t\t\t\t\tisDirty = true;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tisUpdated = true;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tif( valuesLength !== newValuesLength ) {\r\n\t\t\t\t\tthis._valuesLength = newValuesLength;\r\n\t\t\t\t\tisDirty = true;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tisUpdated = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//\r\n\t\tif( isDirty ) {\r\n\t\t\tthis._id += 1;\r\n\t\t\tconst parent = this._parent;\r\n\t\t\tconst uploaded = parent.uploaded;\r\n\t\t\tif( uploaded ) {\r\n\t\t\t\tif( uploaded.isCompatible( parent ) ) {\r\n\t\t\t\t\tparent.updateUploaded();\r\n\t\t\t\t} else {\r\n\t\t\t\t\tparent.uploaded = undefined;\r\n\t\t\t\t\tparent.toDirty();\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tparent.updateUploaded();\r\n\t\t\t}\r\n\t\t} else if( isUpdated ) {\r\n\t\t\tthis._id += 1;\r\n\t\t\tthis._parent.updateUploaded();\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\tupdateUploaded(): void {\r\n\t\tthis._parent.updateUploaded();\r\n\t}\r\n\r\n\tclone( parent: EShape ): EShapeLineOfAnyPointsImpl {\r\n\t\treturn new EShapeLineOfAnyPointsImpl( parent );\r\n\t}\r\n\r\n\ttoPoints( transform: Matrix ): Point[] {\r\n\t\tconst result: Point[] = [];\r\n\t\tconst values = this.values;\r\n\t\tfor( let i = 0, imax = values.length; i < imax; i += 2 ) {\r\n\t\t\tconst point = new Point( values[ i + 0 ], values[ i + 1 ] );\r\n\t\t\tresult.push( transform.apply( point, point ) );\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\tserialize( manager: EShapeResourceManagerSerialization ): number {\r\n\t\treturn manager.add( `[]` );\r\n\t}\r\n\r\n\tcalcHitPointAbs<RESULT>(\r\n\t\tx: number, y: number,\r\n\t\tthreshold: number,\r\n\t\trange: EShapeLineOfAnyPointsTestRange | null,\r\n\t\ttester: EShapeLineOfAnyPointsHitTester<RESULT>,\r\n\t\tresult: RESULT\r\n\t): boolean {\r\n\t\tconst pointCount = this.length;\r\n\t\tconst pointValues = this._values;\r\n\t\tconst size = this._size;\r\n\t\tconst offset = this._offset;\r\n\t\tlet istart = 0;\r\n\t\tlet iend = pointCount;\r\n\t\tif( range ) {\r\n\t\t\tconst s = size.getLimit() * 0.5;\r\n\t\t\tconst o = offset.getLimit();\r\n\t\t\tconst rangeResult = range( x, y, s, s, o, o, threshold, pointValues, EShapeLineOfAnyPointsImpl.WORK_RANGE );\r\n\t\t\tistart = rangeResult[ 0 ];\r\n\t\t\tiend = rangeResult[ 1 ];\r\n\t\t}\r\n\t\ttester = tester;\r\n\t\tfor( let i = istart, imax = Math.min( iend, pointCount ), iv = istart << 1; i < imax; i += 1, iv += 2 ) {\r\n\t\t\tconst px = pointValues[ iv     ];\r\n\t\t\tconst py = pointValues[ iv + 1 ];\r\n\t\t\tconst sx = size.getX( i ) * 0.5;\r\n\t\t\tconst sy = size.getY( i ) * 0.5;\r\n\t\t\tconst ox = offset.getX( i );\r\n\t\t\tconst oy = offset.getY( i );\r\n\t\t\tif( tester( x, y, sx, sy, ox, oy, px, py, i, threshold, result ) ) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n}\r\n"]}