{"version":3,"file":"e-shape-image-sdf-uploaded.js","sourceRoot":"","sources":["../../../../../src/main/typescript/wcardinal/ui/shape/variant/e-shape-image-sdf-uploaded.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (C) 2019 Toshiba Corporation\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { EShape } from \"../e-shape\";\r\nimport { EShapeBuffer } from \"../e-shape-buffer\";\r\nimport {\r\n\tbuildImageSdfClipping, buildImageSdfIndex, buildImageSdfStep,\r\n\tbuildImageSdfUv, buildImageSdfVertex, IMAGE_SDF_WORLD_SIZE\r\n} from \"./build-image-sdf\";\r\nimport { EShapeTextUploaded } from \"./e-shape-text-uploaded\";\r\n\r\nexport class EShapeImageSdfUploaded extends EShapeTextUploaded {\r\n\tprotected textureWidth: number;\r\n\tprotected textureHeight: number;\r\n\r\n\tconstructor(\r\n\t\tbuffer: EShapeBuffer,\r\n\t\tvoffset: number, ioffset: number,\r\n\t\ttvcount: number, ticount: number,\r\n\t\tvcount: number, icount: number,\r\n\t\tantialiasWeight: number\r\n\t) {\r\n\t\tsuper( buffer, voffset, ioffset, tvcount, ticount, vcount, icount, antialiasWeight );\r\n\r\n\t\tthis.textureWidth = -1;\r\n\t\tthis.textureHeight = -1;\r\n\t}\r\n\r\n\tinit( shape: EShape ): this {\r\n\t\tsuper.init( shape );\r\n\r\n\t\t// Clippings & indices\r\n\t\tconst buffer = this.buffer;\r\n\t\tconst voffset = this.vertexOffset;\r\n\t\tbuffer.updateClippings();\r\n\t\tbuffer.updateIndices();\r\n\t\tbuildImageSdfClipping(\r\n\t\t\tbuffer.clippings,\r\n\t\t\tvoffset\r\n\t\t);\r\n\t\tbuildImageSdfIndex(\r\n\t\t\tbuffer.indices,\r\n\t\t\tvoffset,\r\n\t\t\tthis.indexOffset\r\n\t\t);\r\n\r\n\t\t// Text\r\n\t\tthis.initText();\r\n\r\n\t\tthis.update( shape );\r\n\t\treturn this;\r\n\t}\r\n\r\n\tupdate( shape: EShape ): void {\r\n\t\tconst buffer = this.buffer;\r\n\t\tthis.updateVertexAndStep( buffer, shape );\r\n\t\tthis.updateColor( buffer, shape );\r\n\t\tthis.updateUv( buffer, shape );\r\n\t\tthis.updateText( buffer, shape );\r\n\t}\r\n\r\n\tprotected updateVertexAndStep( buffer: EShapeBuffer, shape: EShape ): void {\r\n\t\tconst size = shape.size;\r\n\t\tconst sizeX = size.x;\r\n\t\tconst sizeY = size.y;\r\n\t\tconst isSizeChanged = ( sizeX !== this.sizeX || sizeY !== this.sizeY );\r\n\r\n\t\tconst transformLocalId = this.toTransformLocalId( shape );\r\n\t\tconst isTransformChanged = ( this.transformLocalId !== transformLocalId );\r\n\r\n\t\tconst stroke = shape.stroke;\r\n\t\tconst strokeWidth = (stroke.enable ? stroke.width : 0);\r\n\t\tconst strokeAlign = stroke.align;\r\n\t\tconst isStrokeChanged = ( this.strokeAlign !== strokeAlign || this.strokeWidth !== strokeWidth );\r\n\r\n\t\tconst texture = this.toTexture( shape );\r\n\t\tconst textureWidth = texture.width * texture.resolution;\r\n\t\tconst textureHeight = texture.height * texture.resolution;\r\n\t\tconst isTextureSizeChanged = ( this.textureWidth !== textureWidth || this.textureHeight !== textureHeight );\r\n\r\n\t\tif( isSizeChanged || isTransformChanged || isStrokeChanged || isTextureSizeChanged ) {\r\n\t\t\tthis.sizeX = sizeX;\r\n\t\t\tthis.sizeY = sizeY;\r\n\t\t\tthis.transformLocalId = transformLocalId;\r\n\t\t\tthis.strokeWidth = strokeWidth;\r\n\t\t\tthis.strokeAlign = strokeAlign;\r\n\t\t\tthis.textureWidth = textureWidth;\r\n\t\t\tthis.textureHeight = textureHeight;\r\n\r\n\t\t\t// Invalidate the text layout to update the text layout.\r\n\t\t\tthis.textSpacingHorizontal = NaN;\r\n\r\n\t\t\t// Vertices\r\n\t\t\tbuffer.updateVertices();\r\n\t\t\tbuildImageSdfVertex(\r\n\t\t\t\tbuffer.vertices,\r\n\t\t\t\tthis.vertexOffset,\r\n\t\t\t\t0, 0,\r\n\t\t\t\tsizeX, sizeY,\r\n\t\t\t\tshape.transform.internalTransform,\r\n\t\t\t\tIMAGE_SDF_WORLD_SIZE\r\n\t\t\t);\r\n\r\n\t\t\t// Steps\r\n\t\t\tbuffer.updateSteps();\r\n\t\t\tbuildImageSdfStep(\r\n\t\t\t\tbuffer.steps,\r\n\t\t\t\tthis.vertexOffset,\r\n\t\t\t\tstrokeAlign,\r\n\t\t\t\tstrokeWidth,\r\n\t\t\t\ttextureWidth,\r\n\t\t\t\ttextureHeight,\r\n\t\t\t\tthis.antialiasWeight,\r\n\t\t\t\tIMAGE_SDF_WORLD_SIZE\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\tprotected updateUv( buffer: EShapeBuffer, shape: EShape ): void {\r\n\t\tconst texture = this.toTexture( shape );\r\n\t\tconst textureTransformId = this.toTextureTransformId( texture );\r\n\t\tif( texture !== this.texture || textureTransformId !== this.textureTransformId ) {\r\n\t\t\tthis.texture = texture;\r\n\t\t\tthis.textureTransformId = textureTransformId;\r\n\r\n\t\t\tbuffer.updateUvs();\r\n\t\t\tbuildImageSdfUv(\r\n\t\t\t\tbuffer.uvs,\r\n\t\t\t\tthis.vertexOffset,\r\n\t\t\t\tthis.toTextureUvs( texture )\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n}\r\n"]}