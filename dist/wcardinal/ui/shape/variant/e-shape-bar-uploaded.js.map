{"version":3,"file":"e-shape-bar-uploaded.js","sourceRoot":"","sources":["../../../../../src/main/typescript/wcardinal/ui/shape/variant/e-shape-bar-uploaded.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (C) 2019 Toshiba Corporation\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { EShape } from \"../e-shape\";\r\nimport { EShapeBuffer } from \"../e-shape-buffer\";\r\nimport { EShapePointsStyle } from \"../e-shape-points-style\";\r\nimport { buildBarClipping, buildBarIndex, buildBarUv, buildBarVertexStepAndColorFill } from \"./build-bar\";\r\nimport { EShapeBar } from \"./e-shape-bar\";\r\nimport { EShapeTextUploaded } from \"./e-shape-text-uploaded\";\r\n\r\nexport class EShapeBarUploaded extends EShapeTextUploaded {\r\n\tprotected pointsId: number;\r\n\tprotected pointsStyle: EShapePointsStyle;\r\n\r\n\tconstructor(\r\n\t\tbuffer: EShapeBuffer,\r\n\t\tvoffset: number, ioffset: number,\r\n\t\ttvcount: number, ticount: number,\r\n\t\tvcount: number, icount: number,\r\n\t\tantialiasWeight: number\r\n\t) {\r\n\t\tsuper( buffer, voffset, ioffset, tvcount, ticount, vcount, icount, antialiasWeight );\r\n\t\tthis.pointsId = NaN;\r\n\t\tthis.pointsStyle = EShapePointsStyle.NONE;\r\n\t}\r\n\r\n\tinit( shape: EShape ): this {\r\n\t\tsuper.init( shape );\r\n\r\n\t\t// Clipping & indices\r\n\t\tconst buffer = this.buffer;\r\n\t\tconst voffset = this.vertexOffset;\r\n\t\tconst ioffset = this.indexOffset;\r\n\t\tbuffer.updateClippings();\r\n\t\tbuffer.updateIndices();\r\n\t\tbuildBarClipping(\r\n\t\t\tbuffer.clippings,\r\n\t\t\tvoffset\r\n\t\t);\r\n\t\tbuildBarIndex(\r\n\t\t\tbuffer.indices,\r\n\t\t\tvoffset,\r\n\t\t\tioffset\r\n\t\t);\r\n\r\n\t\t// Text\r\n\t\tthis.initText();\r\n\r\n\t\t//\r\n\t\tthis.update( shape );\r\n\t\treturn this;\r\n\t}\r\n\r\n\tupdate( shape: EShape ): void {\r\n\t\tconst buffer = this.buffer;\r\n\t\tthis.updateVertexStepAndColorFill( buffer, shape );\r\n\t\tthis.updateColor( buffer, shape );\r\n\t\tthis.updateUv( buffer, shape );\r\n\t\tthis.updateText( buffer, shape );\r\n\t}\r\n\r\n\tprotected updateVertexStepAndColorFill( buffer: EShapeBuffer, shape: EShape ): void {\r\n\t\tif( shape instanceof EShapeBar ) {\r\n\t\t\tconst size = shape.size;\r\n\t\t\tconst sizeX = size.x;\r\n\t\t\tconst sizeY = size.y;\r\n\t\t\tconst isSizeChanged = ( sizeX !== this.sizeX || sizeY !== this.sizeY );\r\n\r\n\t\t\tconst stroke = shape.stroke;\r\n\t\t\tconst strokeWidth = ( stroke.enable ? stroke.width : 0 );\r\n\t\t\tconst isStrokeWidthChanged = ( strokeWidth !== this.strokeWidth );\r\n\r\n\t\t\tconst transformLocalId = this.toTransformLocalId( shape );\r\n\t\t\tconst isTransformChanged = ( this.transformLocalId !== transformLocalId );\r\n\r\n\t\t\tconst points = shape.points;\r\n\t\t\tconst pointsId = points.id;\r\n\t\t\tconst isPointsIdChanged = ( pointsId !== this.pointsId );\r\n\r\n\t\t\tconst pointsStyle = points.style;\r\n\t\t\tconst isPointsStyleChanged = ( pointsStyle !== this.pointsStyle );\r\n\r\n\t\t\tif( isSizeChanged || isTransformChanged || isStrokeWidthChanged || isPointsIdChanged || isPointsStyleChanged ) {\r\n\t\t\t\tthis.sizeX = sizeX;\r\n\t\t\t\tthis.sizeY = sizeY;\r\n\t\t\t\tthis.strokeWidth = strokeWidth;\r\n\t\t\t\tthis.transformLocalId = transformLocalId;\r\n\t\t\t\tthis.pointsId = pointsId;\r\n\t\t\t\tthis.pointsStyle = pointsStyle;\r\n\r\n\t\t\t\tif( isSizeChanged || isTransformChanged ) {\r\n\t\t\t\t\t// Invalidate the text layout to update the text layout.\r\n\t\t\t\t\tthis.textSpacingHorizontal = NaN;\r\n\t\t\t\t}\r\n\t\t\t\tif( isPointsIdChanged ) {\r\n\t\t\t\t\t// Invalidate the texture transform ID to update the UVs\r\n\t\t\t\t\tthis.textureTransformId = NaN;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbuffer.updateVertices();\r\n\t\t\t\tbuffer.updateSteps();\r\n\t\t\t\tbuffer.updateColorFills();\r\n\t\t\t\tbuildBarVertexStepAndColorFill(\r\n\t\t\t\t\tbuffer.vertices,\r\n\t\t\t\t\tbuffer.steps,\r\n\t\t\t\t\tbuffer.colorFills,\r\n\t\t\t\t\tthis.vertexOffset,\r\n\t\t\t\t\tpoints.values,\r\n\t\t\t\t\tpointsStyle,\r\n\t\t\t\t\tpoints.size,\r\n\t\t\t\t\tstrokeWidth,\r\n\t\t\t\t\tshape.transform.internalTransform\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprotected updateColorFillAndStroke( buffer: EShapeBuffer, shape: EShape, vertexCount: number ): void {\r\n\t\tthis.updateColorStroke( buffer, shape, vertexCount );\r\n\t}\r\n\r\n\tprotected updateUv( buffer: EShapeBuffer, shape: EShape ): void {\r\n\t\tconst texture = this.toTexture( shape );\r\n\t\tconst textureTransformId = this.toTextureTransformId( texture );\r\n\t\tif( texture !== this.texture || textureTransformId !== this.textureTransformId ) {\r\n\t\t\tthis.texture = texture;\r\n\t\t\tthis.textureTransformId = textureTransformId;\r\n\r\n\t\t\tbuildBarUv(\r\n\t\t\t\tbuffer.uvs,\r\n\t\t\t\tthis.vertexOffset,\r\n\t\t\t\tthis.toTextureUvs( texture )\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n}\r\n"]}