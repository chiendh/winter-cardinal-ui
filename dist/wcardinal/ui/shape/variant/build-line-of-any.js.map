{"version":3,"file":"build-line-of-any.js","sourceRoot":"","sources":["../../../../../src/main/typescript/wcardinal/ui/shape/variant/build-line-of-any.ts"],"names":[],"mappings":"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","sourcesContent":["import { buildColor } from \"./build-color\";\r\nimport { EShapeLineOfAnyPointsFill } from \"./e-shape-line-of-any-points-fill\";\r\nimport { EShapeLineOfAnyPointsStroke } from \"./e-shape-line-of-any-points-stroke\";\r\n\r\nexport const toLineOfAnyPointCount = ( pointCount: number ): number => {\r\n\treturn (Math.ceil( pointCount / 12 ) * 12);\r\n};\r\n\r\nexport const buildLineOfAnyColor = (\r\n\tvoffset: number,\r\n\tvcountPerPoint: number,\r\n\tpoint: EShapeLineOfAnyPointsStroke | EShapeLineOfAnyPointsFill,\r\n\tpointCount: number,\r\n\tcolors: Float32Array,\r\n\tisEnabled: boolean,\r\n\tcolorDef: number,\r\n\talphaDef: number\r\n): void => {\r\n\tif( isEnabled ) {\r\n\t\tif( point.isStaticColor() ) {\r\n\t\t\tconst color = point.getColor( 0, colorDef );\r\n\t\t\tif( point.isStaticAlpha() ) {\r\n\t\t\t\tconst alpha = point.getAlpha( 0, alphaDef );\r\n\t\t\t\tbuildColor( color, alpha, voffset, vcountPerPoint * pointCount, colors );\r\n\t\t\t} else {\r\n\t\t\t\tfor( let i = 0, iv = voffset; i < pointCount; i += 1, iv += vcountPerPoint ) {\r\n\t\t\t\t\tconst alpha = point.getAlpha( i, alphaDef );\r\n\t\t\t\t\tbuildColor( color, alpha, iv, vcountPerPoint, colors );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif( point.isStaticAlpha() ) {\r\n\t\t\t\tconst alpha = point.getAlpha( 0, alphaDef );\r\n\t\t\t\tfor( let i = 0, iv = voffset; i < pointCount; i += 1, iv += vcountPerPoint ) {\r\n\t\t\t\t\tconst color = point.getColor( i, colorDef );\r\n\t\t\t\t\tbuildColor( color, alpha, iv, vcountPerPoint, colors );\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tfor( let i = 0, iv = voffset; i < pointCount; i += 1, iv += vcountPerPoint ) {\r\n\t\t\t\t\tconst color = point.getColor( i, colorDef );\r\n\t\t\t\t\tconst alpha = point.getAlpha( i, alphaDef );\r\n\t\t\t\t\tbuildColor( color, alpha, iv, vcountPerPoint, colors );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t} else {\r\n\t\tif( point.isStaticColor() ) {\r\n\t\t\tconst color = point.getColor( 0, colorDef );\r\n\t\t\tbuildColor( color, 0, voffset, vcountPerPoint * pointCount, colors );\r\n\t\t} else {\r\n\t\t\tfor( let i = 0, iv = voffset; i < pointCount; i += 1, iv += vcountPerPoint ) {\r\n\t\t\t\tconst color = point.getColor( i, colorDef );\r\n\t\t\t\tbuildColor( color, 0, iv, vcountPerPoint, colors );\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n};\r\n"]}