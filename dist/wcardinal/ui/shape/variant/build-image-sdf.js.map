{"version":3,"file":"build-image-sdf.js","sourceRoot":"","sources":["../../../../../src/main/typescript/wcardinal/ui/shape/variant/build-image-sdf.ts"],"names":[],"mappings":"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AAE,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,GAAG,GAAG,CAAC;IAChC,GAAG,CAAE,EAAE,GAAG,CAAC,CAAE,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,GAAG,GAAG,CAAC;IAChC,GAAG,CAAE,EAAE,GAAG,CAAC,CAAE,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,GAAG,GAAG,CAAC;IAChC,GAAG,CAAE,EAAE,GAAG,CAAC,CAAE,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,GAAG,GAAG,CAAC;IAChC,GAAG,CAAE,EAAE,GAAG,CAAC,CAAE,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,GAAG,GAAG,CAAC;IAChC,GAAG,CAAE,EAAE,GAAG,CAAC,CAAE,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,GAAG,GAAG,CAAC;IAChC,EAAE,IAAI,CAAC,CAAC;IAER,GAAG,CAAE,EAAE,GAAG,CAAC,CAAE,GAAG,EAAE,CAAC;IACnB,GAAG,CAAE,EAAE,GAAG,CAAC,CAAE,GAAG,EAAE,CAAC;IACnB,GAAG,CAAE,EAAE,GAAG,CAAC,CAAE,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,GAAG,GAAG,CAAC;IAChC,GAAG,CAAE,EAAE,GAAG,CAAC,CAAE,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,GAAG,GAAG,CAAC;IAChC,GAAG,CAAE,EAAE,GAAG,CAAC,CAAE,GAAG,EAAE,CAAC;IACnB,GAAG,CAAE,EAAE,GAAG,CAAC,CAAE,GAAG,EAAE,CAAC;AACpB,CAAC,CAAC","sourcesContent":["import { Matrix, Point, TextureUvs } from \"pixi.js\";\r\nimport { toLength } from \"./to-length\";\r\n\r\nexport const IMAGE_SDF_VERTEX_COUNT = 9;\r\nexport const IMAGE_SDF_INDEX_COUNT = 8;\r\nexport const IMAGE_SDF_WORLD_SIZE: [ number, number ] = [ 0, 0 ];\r\nconst IMAGE_SDF_FMIN: number = 0.00001;\r\nconst IMAGE_SDF_SDF_WINDOW: number = 12;\r\nconst IMAGE_SDF_WORK_POINT: Point = new Point();\r\n\r\nexport const buildImageSdfClipping = (\r\n\tclippings: Float32Array,\r\n\tvoffset: number\r\n): void => {\r\n\tfor( let ic = voffset * 3, imax = (voffset + IMAGE_SDF_VERTEX_COUNT) * 3; ic < imax; ic += 3 ) {\r\n\t\tclippings[ ic + 0 ] = 0;\r\n\t\tclippings[ ic + 1 ] = 0;\r\n\t\tclippings[ ic + 2 ] = 2;\r\n\t}\r\n};\r\n\r\nexport const buildImageSdfIndex = (\r\n\tindices: Uint16Array | Uint32Array,\r\n\tvoffset: number,\r\n\tioffset: number\r\n): void => {\r\n\tlet ii = ioffset * 3;\r\n\tindices[ ii + 0 ] = voffset + 0;\r\n\tindices[ ii + 1 ] = voffset + 1;\r\n\tindices[ ii + 2 ] = voffset + 3;\r\n\tindices[ ii + 3 ] = voffset + 1;\r\n\tindices[ ii + 4 ] = voffset + 4;\r\n\tindices[ ii + 5 ] = voffset + 3;\r\n\tii += 6;\r\n\r\n\tindices[ ii + 0 ] = voffset + 1;\r\n\tindices[ ii + 1 ] = voffset + 2;\r\n\tindices[ ii + 2 ] = voffset + 4;\r\n\tindices[ ii + 3 ] = voffset + 2;\r\n\tindices[ ii + 4 ] = voffset + 5;\r\n\tindices[ ii + 5 ] = voffset + 4;\r\n\tii += 6;\r\n\r\n\tindices[ ii + 0 ] = voffset + 3;\r\n\tindices[ ii + 1 ] = voffset + 4;\r\n\tindices[ ii + 2 ] = voffset + 6;\r\n\tindices[ ii + 3 ] = voffset + 4;\r\n\tindices[ ii + 4 ] = voffset + 7;\r\n\tindices[ ii + 5 ] = voffset + 6;\r\n\tii += 6;\r\n\r\n\tindices[ ii + 0 ] = voffset + 4;\r\n\tindices[ ii + 1 ] = voffset + 5;\r\n\tindices[ ii + 2 ] = voffset + 7;\r\n\tindices[ ii + 3 ] = voffset + 5;\r\n\tindices[ ii + 4 ] = voffset + 8;\r\n\tindices[ ii + 5 ] = voffset + 7;\r\n};\r\n\r\nexport const buildImageSdfStep = (\r\n\tsteps: Float32Array,\r\n\tvoffset: number,\r\n\tstrokeAlign: number,\r\n\tstrokeWidth: number,\r\n\ttextureWidth: number,\r\n\ttextureHeight: number,\r\n\tantialiasWeight: number,\r\n\tworldSize: [ number, number ]\r\n): void => {\r\n\tconst scaleBase = (0.333 / IMAGE_SDF_SDF_WINDOW) * antialiasWeight;\r\n\tconst scaleX = scaleBase * ( textureWidth / worldSize[ 0 ] );\r\n\tconst scaleY = scaleBase * ( textureHeight / worldSize[ 1 ] );\r\n\tconst scaleZ = (scaleX + scaleY) * 0.5;\r\n\tconst outlineLimit = 0.4;\r\n\tconst strokeWidthMax = ( outlineLimit / 0.5 ) * IMAGE_SDF_SDF_WINDOW;\r\n\tconst strokeWidthRatio = Math.max( 0.0, Math.min( 1.0, strokeWidth / strokeWidthMax ));\r\n\tconst outlineWidth = strokeWidthRatio * outlineLimit;\r\n\tconst outlinePosition = -outlineWidth * (1 - strokeAlign);\r\n\r\n\tlet is = voffset * 6;\r\n\tsteps[ is + 0 ] = scaleZ;\r\n\tsteps[ is + 1 ] = outlineWidth;\r\n\tsteps[ is + 2 ] = outlinePosition;\r\n\tsteps[ is + 3 ] = IMAGE_SDF_FMIN;\r\n\tsteps[ is + 4 ] = IMAGE_SDF_FMIN;\r\n\tsteps[ is + 5 ] = IMAGE_SDF_FMIN;\r\n\tis += 6;\r\n\r\n\tsteps[ is + 0 ] = scaleY;\r\n\tsteps[ is + 1 ] = outlineWidth;\r\n\tsteps[ is + 2 ] = outlinePosition;\r\n\tsteps[ is + 3 ] = IMAGE_SDF_FMIN;\r\n\tsteps[ is + 4 ] = IMAGE_SDF_FMIN;\r\n\tsteps[ is + 5 ] = IMAGE_SDF_FMIN;\r\n\tis += 6;\r\n\r\n\tsteps[ is + 0 ] = scaleZ;\r\n\tsteps[ is + 1 ] = outlineWidth;\r\n\tsteps[ is + 2 ] = outlinePosition;\r\n\tsteps[ is + 3 ] = IMAGE_SDF_FMIN;\r\n\tsteps[ is + 4 ] = IMAGE_SDF_FMIN;\r\n\tsteps[ is + 5 ] = IMAGE_SDF_FMIN;\r\n\tis += 6;\r\n\r\n\tsteps[ is + 0 ] = scaleX;\r\n\tsteps[ is + 1 ] = outlineWidth;\r\n\tsteps[ is + 2 ] = outlinePosition;\r\n\tsteps[ is + 3 ] = IMAGE_SDF_FMIN;\r\n\tsteps[ is + 4 ] = IMAGE_SDF_FMIN;\r\n\tsteps[ is + 5 ] = IMAGE_SDF_FMIN;\r\n\tis += 6;\r\n\r\n\tsteps[ is + 0 ] = scaleZ;\r\n\tsteps[ is + 1 ] = outlineWidth;\r\n\tsteps[ is + 2 ] = outlinePosition;\r\n\tsteps[ is + 3 ] = IMAGE_SDF_FMIN;\r\n\tsteps[ is + 4 ] = IMAGE_SDF_FMIN;\r\n\tsteps[ is + 5 ] = IMAGE_SDF_FMIN;\r\n\tis += 6;\r\n\r\n\tsteps[ is + 0 ] = scaleX;\r\n\tsteps[ is + 1 ] = outlineWidth;\r\n\tsteps[ is + 2 ] = outlinePosition;\r\n\tsteps[ is + 3 ] = IMAGE_SDF_FMIN;\r\n\tsteps[ is + 4 ] = IMAGE_SDF_FMIN;\r\n\tsteps[ is + 5 ] = IMAGE_SDF_FMIN;\r\n\tis += 6;\r\n\r\n\tsteps[ is + 0 ] = scaleZ;\r\n\tsteps[ is + 1 ] = outlineWidth;\r\n\tsteps[ is + 2 ] = outlinePosition;\r\n\tsteps[ is + 3 ] = IMAGE_SDF_FMIN;\r\n\tsteps[ is + 4 ] = IMAGE_SDF_FMIN;\r\n\tsteps[ is + 5 ] = IMAGE_SDF_FMIN;\r\n\tis += 6;\r\n\r\n\tsteps[ is + 0 ] = scaleY;\r\n\tsteps[ is + 1 ] = outlineWidth;\r\n\tsteps[ is + 2 ] = outlinePosition;\r\n\tsteps[ is + 3 ] = IMAGE_SDF_FMIN;\r\n\tsteps[ is + 4 ] = IMAGE_SDF_FMIN;\r\n\tsteps[ is + 5 ] = IMAGE_SDF_FMIN;\r\n\tis += 6;\r\n\r\n\tsteps[ is + 0 ] = scaleY;\r\n\tsteps[ is + 1 ] = outlineWidth;\r\n\tsteps[ is + 2 ] = outlinePosition;\r\n\tsteps[ is + 3 ] = IMAGE_SDF_FMIN;\r\n\tsteps[ is + 4 ] = IMAGE_SDF_FMIN;\r\n\tsteps[ is + 5 ] = IMAGE_SDF_FMIN;\r\n\tis += 6;\r\n};\r\n\r\nexport const buildImageSdfVertex = (\r\n\tvertices: Float32Array,\r\n\tvoffset: number,\r\n\toriginX: number,\r\n\toriginY: number,\r\n\tsizeX: number,\r\n\tsizeY: number,\r\n\tinternalTransform: Matrix,\r\n\tworldSize: [ number, number ]\r\n): void => {\r\n\t// Calculate the transformed positions\r\n\t//\r\n\t// 0       1       2\r\n\t// |-------|-------|\r\n\t// |       |       |\r\n\t// 3-------4-------5\r\n\t// |       |       |\r\n\t// |-------|-------|\r\n\t// 6       7       8\r\n\t//\r\n\tconst work = IMAGE_SDF_WORK_POINT;\r\n\tconst sx = sizeX * 0.5;\r\n\tconst sy = sizeY * 0.5;\r\n\twork.set( originX - sx, originY - sy );\r\n\tinternalTransform.apply( work, work );\r\n\tconst x0 = work.x;\r\n\tconst y0 = work.y;\r\n\twork.set( originX + sx, originY - sy );\r\n\tinternalTransform.apply( work, work );\r\n\tconst x2 = work.x;\r\n\tconst y2 = work.y;\r\n\twork.set( originX + sx, originY + sy );\r\n\tinternalTransform.apply( work, work );\r\n\tconst x8 = work.x;\r\n\tconst y8 = work.y;\r\n\tconst x6 = x0 + (x8 - x2);\r\n\tconst y6 = y0 + (y8 - y2);\r\n\r\n\t// Vertices\r\n\tlet iv = voffset << 1;\r\n\tvertices[ iv + 0 ] = x0;\r\n\tvertices[ iv + 1 ] = y0;\r\n\tvertices[ iv + 2 ] = (x0 + x2) * 0.5;\r\n\tvertices[ iv + 3 ] = (y0 + y2) * 0.5;\r\n\tvertices[ iv + 4 ] = x2;\r\n\tvertices[ iv + 5 ] = y2;\r\n\tiv += 6;\r\n\r\n\tvertices[ iv + 0 ] = (x0 + x6) * 0.5;\r\n\tvertices[ iv + 1 ] = (y0 + y6) * 0.5;\r\n\tvertices[ iv + 2 ] = (x0 + x8) * 0.5;\r\n\tvertices[ iv + 3 ] = (y0 + y8) * 0.5;\r\n\tvertices[ iv + 4 ] = (x2 + x8) * 0.5;\r\n\tvertices[ iv + 5 ] = (y2 + y8) * 0.5;\r\n\tiv += 6;\r\n\r\n\tvertices[ iv + 0 ] = x6;\r\n\tvertices[ iv + 1 ] = y6;\r\n\tvertices[ iv + 2 ] = (x6 + x8) * 0.5;\r\n\tvertices[ iv + 3 ] = (y6 + y8) * 0.5;\r\n\tvertices[ iv + 4 ] = x8;\r\n\tvertices[ iv + 5 ] = y8;\r\n\r\n\tworldSize[ 0 ] = toLength( x0, y0, x2, y2 ) * 0.5;\r\n\tworldSize[ 1 ] = toLength( x0, y0, x6, y6 ) * 0.5;\r\n};\r\n\r\nexport const buildImageSdfUv = (\r\n\tuvs: Float32Array,\r\n\tvoffset: number,\r\n\ttextureUv: TextureUvs\r\n): void => {\r\n\tconst x0 = textureUv.x0;\r\n\tconst y0 = textureUv.y0;\r\n\tconst x1 = textureUv.x1;\r\n\tconst y1 = textureUv.y1;\r\n\tconst x2 = textureUv.x2;\r\n\tconst y2 = textureUv.y2;\r\n\tconst x3 = textureUv.x3;\r\n\tconst y3 = textureUv.y3;\r\n\r\n\tlet iv = voffset << 1;\r\n\tuvs[ iv + 0 ] = x0;\r\n\tuvs[ iv + 1 ] = y0;\r\n\tuvs[ iv + 2 ] = (x1 + x0) * 0.5;\r\n\tuvs[ iv + 3 ] = (y1 + y0) * 0.5;\r\n\tuvs[ iv + 4 ] = x1;\r\n\tuvs[ iv + 5 ] = y1;\r\n\tiv += 6;\r\n\r\n\tuvs[ iv + 0 ] = (x0 + x3) * 0.5;\r\n\tuvs[ iv + 1 ] = (y0 + y3) * 0.5;\r\n\tuvs[ iv + 2 ] = (x0 + x2) * 0.5;\r\n\tuvs[ iv + 3 ] = (y0 + y2) * 0.5;\r\n\tuvs[ iv + 4 ] = (x1 + x2) * 0.5;\r\n\tuvs[ iv + 5 ] = (y1 + y2) * 0.5;\r\n\tiv += 6;\r\n\r\n\tuvs[ iv + 0 ] = x3;\r\n\tuvs[ iv + 1 ] = y3;\r\n\tuvs[ iv + 2 ] = (x3 + x2) * 0.5;\r\n\tuvs[ iv + 3 ] = (y3 + y2) * 0.5;\r\n\tuvs[ iv + 4 ] = x2;\r\n\tuvs[ iv + 5 ] = y2;\r\n};\r\n"]}