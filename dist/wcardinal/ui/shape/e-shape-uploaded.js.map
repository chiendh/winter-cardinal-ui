{"version":3,"file":"e-shape-uploaded.js","sourceRoot":"","sources":["../../../../src/main/typescript/wcardinal/ui/shape/e-shape-uploaded.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (C) 2019 Toshiba Corporation\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { Texture, TextureUvs } from \"pixi.js\";\r\nimport { EShape } from \"./e-shape\";\r\nimport { EShapeBuffer } from \"./e-shape-buffer\";\r\nimport { EShapeBufferUnitBuilder } from \"./e-shape-buffer-unit-builder\";\r\nimport { EShapeCorner } from \"./e-shape-corner\";\r\nimport { buildColor } from \"./variant/build-color\";\r\n\r\nexport interface EShapeUploaded {\r\n\tupdate( shape: EShape ): void;\r\n\tisCompatible( shape: EShape ): boolean;\r\n\tgetBuffer(): EShapeBuffer;\r\n\tgetVertexOffset(): number;\r\n\tgetVertexCount(): number;\r\n\tgetIndexOffset(): number;\r\n\tgetIndexCount(): number;\r\n\tbuildUnit( builder: EShapeBufferUnitBuilder ): void;\r\n}\r\n\r\nexport abstract class EShapeUploadedBase implements EShapeUploaded {\r\n\tprotected buffer: EShapeBuffer;\r\n\r\n\tprotected transformLocalId: number;\r\n\r\n\tprotected vertexOffset: number;\r\n\tprotected vertexCount: number;\r\n\tprotected indexOffset: number;\r\n\tprotected indexCount: number;\r\n\r\n\tprotected colorFill: number;\r\n\tprotected alphaFill: number;\r\n\tprotected colorStroke: number;\r\n\tprotected alphaStroke: number;\r\n\r\n\tprotected sizeX: number;\r\n\tprotected sizeY: number;\r\n\tprotected strokeWidth: number;\r\n\tprotected strokeAlign: number;\r\n\tprotected strokeSide: number;\r\n\tprotected radius: number;\r\n\tprotected corner: EShapeCorner;\r\n\r\n\tprotected texture: Texture | null;\r\n\tprotected textureTransformId: number;\r\n\r\n\tprotected antialiasWeight: number;\r\n\r\n\tconstructor(\r\n\t\tbuffer: EShapeBuffer,\r\n\t\tvoffset: number, ioffset: number,\r\n\t\tvcount: number, icount: number,\r\n\t\tantialiasWeight: number\r\n\t) {\r\n\t\tthis.buffer = buffer;\r\n\r\n\t\tthis.transformLocalId = -1;\r\n\r\n\t\tthis.vertexOffset = voffset;\r\n\t\tthis.vertexCount = vcount;\r\n\t\tthis.indexOffset = ioffset;\r\n\t\tthis.indexCount = icount;\r\n\r\n\t\tthis.colorFill = NaN;\r\n\t\tthis.alphaFill = -1;\r\n\t\tthis.colorStroke = NaN;\r\n\t\tthis.alphaStroke = -1;\r\n\r\n\t\tthis.sizeX = NaN;\r\n\t\tthis.sizeY = NaN;\r\n\t\tthis.strokeWidth = NaN;\r\n\t\tthis.strokeAlign = NaN;\r\n\t\tthis.strokeSide = NaN;\r\n\t\tthis.radius = NaN;\r\n\t\tthis.corner = NaN;\r\n\r\n\t\tthis.texture = null;\r\n\t\tthis.textureTransformId = NaN;\r\n\r\n\t\tthis.antialiasWeight = antialiasWeight;\r\n\t}\r\n\r\n\tinit( shape: EShape ): this {\r\n\t\tshape.uploaded = this;\r\n\t\treturn this;\r\n\t}\r\n\r\n\tabstract update( shape: EShape ): void;\r\n\r\n\tisCompatible( shape: EShape ): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\tgetBuffer(): EShapeBuffer {\r\n\t\treturn this.buffer;\r\n\t}\r\n\r\n\tgetVertexOffset(): number {\r\n\t\treturn this.vertexOffset;\r\n\t}\r\n\r\n\tgetVertexCount(): number {\r\n\t\treturn this.vertexCount;\r\n\t}\r\n\r\n\tgetIndexOffset(): number {\r\n\t\treturn this.indexOffset;\r\n\t}\r\n\r\n\tgetIndexCount(): number {\r\n\t\treturn this.indexCount;\r\n\t}\r\n\r\n\tprotected toTransformLocalId( shape: EShape ) {\r\n\t\tshape.updateTransform();\r\n\t\treturn shape.transform.getLocalId();\r\n\t}\r\n\r\n\tprotected toTexture( shape: EShape ) {\r\n\t\treturn shape.texture || Texture.WHITE;\r\n\t}\r\n\r\n\tprotected toTextureTransformId( texture: Texture ): number {\r\n\t\tconst textureAny = texture as any;\r\n\t\tif( textureAny._uvs == null ) {\r\n\t\t\ttexture.updateUvs();\r\n\t\t}\r\n\t\treturn textureAny._updateID;\r\n\t}\r\n\r\n\tprotected toTextureUvs( texture: Texture ): TextureUvs {\r\n\t\treturn (texture as any)._uvs;\r\n\t}\r\n\r\n\tprotected updateColorFill( buffer: EShapeBuffer, shape: EShape, vertexCount: number ) {\r\n\t\tconst fill = shape.fill;\r\n\t\tconst isEnabled = shape.visible && fill.enable;\r\n\t\tconst color = fill.color;\r\n\t\tconst alpha = (isEnabled ? fill.alpha : 0);\r\n\t\tif( color !== this.colorFill || alpha !== this.alphaFill ) {\r\n\t\t\tthis.colorFill = color;\r\n\t\t\tthis.alphaFill = alpha;\r\n\t\t\tbuffer.updateColorFills();\r\n\r\n\t\t\tbuildColor(\r\n\t\t\t\tcolor, alpha,\r\n\t\t\t\tthis.vertexOffset,\r\n\t\t\t\tvertexCount,\r\n\t\t\t\tbuffer.colorFills\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\tprotected updateColorStroke( buffer: EShapeBuffer, shape: EShape, vertexCount: number ) {\r\n\t\tconst stroke = shape.stroke;\r\n\t\tconst isEnabled = shape.visible && stroke.enable && 0 < stroke.width;\r\n\t\tconst color = stroke.color;\r\n\t\tconst alpha = (isEnabled ? stroke.alpha : 0);\r\n\t\tif( color !== this.colorStroke || alpha !== this.alphaStroke ) {\r\n\t\t\tthis.colorStroke = color;\r\n\t\t\tthis.alphaStroke = alpha;\r\n\t\t\tbuffer.updateColorStrokes();\r\n\r\n\t\t\tbuildColor(\r\n\t\t\t\tcolor, alpha,\r\n\t\t\t\tthis.vertexOffset,\r\n\t\t\t\tvertexCount,\r\n\t\t\t\tbuffer.colorStrokes\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\tprotected updateColorFillAndStroke( buffer: EShapeBuffer, shape: EShape, vertexCount: number ) {\r\n\t\tthis.updateColorFill( buffer, shape, vertexCount );\r\n\t\tthis.updateColorStroke( buffer, shape, vertexCount );\r\n\t}\r\n\r\n\tbuildUnit( builder: EShapeBufferUnitBuilder ) {\r\n\t\tconst texture = this.texture || Texture.WHITE;\r\n\t\tconst baseTexture = texture.baseTexture;\r\n\t\tif( baseTexture !== builder.baseTexture ) {\r\n\t\t\tbuilder.baseTexture = baseTexture;\r\n\t\t\tconst indexOffset = this.indexOffset;\r\n\t\t\tbuilder.push( texture, indexOffset );\r\n\t\t}\r\n\t}\r\n}\r\n"]}