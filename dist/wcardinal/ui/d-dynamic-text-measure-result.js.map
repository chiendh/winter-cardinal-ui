{"version":3,"file":"d-dynamic-text-measure-result.js","sourceRoot":"","sources":["../../../src/main/typescript/wcardinal/ui/d-dynamic-text-measure-result.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,kCAAkC,EAAE,MAAM,2CAA2C,CAAC;AAG/F;IAUC;QACC,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;QACf,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;QACf,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;QAChB,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;QACrB,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;QAErB,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;QACX,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;IACZ,CAAC;IAED,yCAAK,GAAL;QACC,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;QACf,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;QACf,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;QAChB,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;QAErB,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;QACX,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;IACZ,CAAC;IAED,wCAAI,GAAJ,UAAM,SAAoC;QACzC,IAAM,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;QACjB,IAAI,CAAC,CAAC,IAAI,SAAS,CAAC,OAAO,CAAC;QAC5B,IAAM,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;QACjB,IAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QACzB,IAAM,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;QACnC,IAAI,KAAK,GAAG,UAAU,CAAC,MAAM,EAAG;YAC/B,UAAU,CAAE,KAAK,CAAE,CAAC,GAAG,CAAE,CAAC,EAAE,CAAC,EAAE,SAAS,CAAE,CAAC;SAC3C;aAAM;YACN,UAAU,CAAC,IAAI,CAAE,IAAI,kCAAkC,CAAE,CAAC,EAAE,CAAC,EAAE,SAAS,CAAE,CAAE,CAAC;SAC7E;QACD,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC;IACjB,CAAC;IAED,2CAAO,GAAP,UAAS,UAAkB;QAC1B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,GAAG,CAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC,CAAE,CAAC;QAC5C,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;QACX,IAAI,CAAC,CAAC,IAAI,UAAU,CAAC;IACtB,CAAC;IAED,uCAAG,GAAH;QACC,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC,EAAG;YAChB,IAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;YACzB,IAAM,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;YACnC,IAAI,CAAC,GAAG,KAAK,EAAG;gBACf,IAAM,SAAS,GAAG,UAAU,CAAE,KAAK,GAAG,CAAC,CAAE,CAAC;gBAC1C,IAAI,CAAC,CAAC,IAAI,SAAS,CAAC,SAAS,CAAC,OAAO,CAAC;gBACtC,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC;gBAChB,OAAO,IAAI,CAAC;aACZ;SACD;QACD,OAAO,KAAK,CAAC;IACd,CAAC;IAED,uCAAG,GAAH,UAAK,UAAkB;QACtB,IAAI,CAAC,OAAO,CAAE,UAAU,CAAE,CAAC;QAC3B,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,CAAC,CAAC;IACtB,CAAC;IACF,gCAAC;AAAD,CAAC,AArED,IAqEC","sourcesContent":["import { DDynamicTextMeasureResultCharacter } from \"./d-dynamic-text-measure-result-character\";\r\nimport { DynamicFontAtlasCharacter } from \"./util/dynamic-font-atlas-character\";\r\n\r\nexport class DDynamicTextMeasureResult {\r\n\tcount: number;\r\n\twidth: number;\r\n\theight: number;\r\n\tcharacters: DDynamicTextMeasureResultCharacter[];\r\n\tclipped: boolean;\r\n\r\n\tx: number;\r\n\ty: number;\r\n\r\n\tconstructor() {\r\n\t\tthis.count = 0;\r\n\t\tthis.width = 0;\r\n\t\tthis.height = 0;\r\n\t\tthis.characters = [];\r\n\t\tthis.clipped = false;\r\n\r\n\t\tthis.x = 0;\r\n\t\tthis.y = 0;\r\n\t}\r\n\r\n\tstart(): void {\r\n\t\tthis.count = 0;\r\n\t\tthis.width = 0;\r\n\t\tthis.height = 0;\r\n\t\tthis.clipped = false;\r\n\r\n\t\tthis.x = 0;\r\n\t\tthis.y = 0;\r\n\t}\r\n\r\n\tpush( character: DynamicFontAtlasCharacter ): void {\r\n\t\tconst x = this.x;\r\n\t\tthis.x += character.advance;\r\n\t\tconst y = this.y;\r\n\t\tconst count = this.count;\r\n\t\tconst characters = this.characters;\r\n\t\tif( count < characters.length ) {\r\n\t\t\tcharacters[ count ].set( x, y, character );\r\n\t\t} else {\r\n\t\t\tcharacters.push( new DDynamicTextMeasureResultCharacter( x, y, character ) );\r\n\t\t}\r\n\t\tthis.count += 1;\r\n\t}\r\n\r\n\tnewLine( lineHeight: number ): void {\r\n\t\tthis.width = Math.max( this.width, this.x );\r\n\t\tthis.x = 0;\r\n\t\tthis.y += lineHeight;\r\n\t}\r\n\r\n\tpop(): boolean {\r\n\t\tif( 0 < this.x ) {\r\n\t\t\tconst count = this.count;\r\n\t\t\tconst characters = this.characters;\r\n\t\t\tif( 0 < count ) {\r\n\t\t\t\tconst character = characters[ count - 1 ];\r\n\t\t\t\tthis.x -= character.character.advance;\r\n\t\t\t\tthis.count -= 1;\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tend( lineHeight: number ): void {\r\n\t\tthis.newLine( lineHeight );\r\n\t\tthis.height = this.y;\r\n\t}\r\n}\r\n"]}