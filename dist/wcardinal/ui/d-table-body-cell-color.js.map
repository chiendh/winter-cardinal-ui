{"version":3,"file":"d-table-body-cell-color.js","sourceRoot":"","sources":["../../../src/main/typescript/wcardinal/ui/d-table-body-cell-color.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (C) 2019 Toshiba Corporation\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { DBaseState } from \"./d-base-state\";\r\nimport { DButtonColor, DButtonColorOptions, DThemeButtonColor } from \"./d-button-color\";\r\nimport { DColorAndAlpha } from \"./d-color\";\r\nimport { DTableBodyCell, DTableBodyCellOptions } from \"./d-table-body-cell\";\r\nimport { DTableBodyCells } from \"./d-table-body-cells\";\r\nimport { DTableColumn } from \"./d-table-column\";\r\nimport { isNumber } from \"./util/is-number\";\r\nimport { isString } from \"./util/is-string\";\r\n\r\nexport interface DTableBodyCellColorOptions<\r\n\tROW = unknown,\r\n\tTHEME extends DThemeTableBodyCellColor = DThemeTableBodyCellColor\r\n> extends DButtonColorOptions<THEME>, DTableBodyCellOptions<ROW> {\r\n}\r\n\r\nexport interface DThemeTableBodyCellColor extends DThemeButtonColor {\r\n\r\n}\r\n\r\nconst clone = ( value: DColorAndAlpha ): DColorAndAlpha => {\r\n\treturn {\r\n\t\tcolor: value.color,\r\n\t\talpha: value.alpha\r\n\t};\r\n};\r\n\r\nconst hasColor = ( value: any ): value is { color: unknown } => {\r\n\treturn ( \"color\" in value );\r\n};\r\n\r\nconst hasAlpha = ( value: any ): value is { alpha: unknown } => {\r\n\treturn ( \"alpha\" in value );\r\n};\r\n\r\nexport class DTableBodyCellColor<\r\n\tROW = unknown,\r\n\tTHEME extends DThemeTableBodyCellColor = DThemeTableBodyCellColor,\r\n\tOPTIONS extends DTableBodyCellColorOptions<ROW, THEME> = DTableBodyCellColorOptions<ROW, THEME>\r\n> extends DButtonColor<THEME, OPTIONS> implements DTableBodyCell<ROW> {\r\n\tprotected _row?: ROW;\r\n\tprotected _rowIndex!: number;\r\n\tprotected _columnIndex!: number;\r\n\tprotected _columnData!: DTableColumn<ROW>;\r\n\r\n\tconstructor( options: OPTIONS ) {\r\n\t\tsuper( options );\r\n\t}\r\n\r\n\tprotected init( options: OPTIONS ) {\r\n\t\tsuper.init( options );\r\n\t\tthis._rowIndex = 0;\r\n\t\tthis._columnIndex = options.column.index;\r\n\t\tthis._columnData = options.column.data;\r\n\r\n\t\tthis.on( \"change\", ( newValue: DColorAndAlpha, oldValue: DColorAndAlpha ): void => {\r\n\t\t\tconst row = this._row;\r\n\t\t\tif( row !== undefined ) {\r\n\t\t\t\tconst newValueCloned = clone( newValue );\r\n\t\t\t\tconst oldValueCloned = clone( oldValue );\r\n\t\t\t\tconst rowIndex = this._rowIndex;\r\n\t\t\t\tconst columnIndex = this._columnIndex;\r\n\t\t\t\tthis._columnData.setter( row, columnIndex, newValueCloned );\r\n\t\t\t\tthis.emit( \"cellchange\", newValueCloned, oldValueCloned, row, rowIndex, columnIndex, this );\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tprotected mergeState( stateLocal: DBaseState, stateParent: DBaseState ): DBaseState {\r\n\t\treturn super.mergeState( stateLocal, stateParent ) |\r\n\t\t\t( stateParent & DBaseState.HOVERED ? DBaseState.HOVERED : DBaseState.NONE );\r\n\t}\r\n\r\n\tset(\r\n\t\tnewValue: unknown, row: ROW, supplimental: unknown,\r\n\t\trowIndex: number, columnIndex: number,\r\n\t\tforcibly?: boolean\r\n\t): void {\r\n\t\tthis._row = row;\r\n\t\tthis._rowIndex = rowIndex;\r\n\t\tconst value = this._value;\r\n\t\tif( isNumber( newValue ) ) {\r\n\t\t\tvalue.color = newValue;\r\n\t\t\tvalue.alpha = 1;\r\n\t\t} else if( isString( newValue ) ) {\r\n\t\t\tconst parsed = Number( newValue );\r\n\t\t\tif( parsed === parsed ) {\r\n\t\t\t\tvalue.color = parsed;\r\n\t\t\t} else {\r\n\t\t\t\tvalue.color = 0xffffff;\r\n\t\t\t}\r\n\t\t\tvalue.alpha = 1;\r\n\t\t} else if( newValue != null ) {\r\n\t\t\tif( hasColor( newValue ) ) {\r\n\t\t\t\tvalue.color = Number( newValue.color );\r\n\t\t\t} else {\r\n\t\t\t\tvalue.color = 0xffffff;\r\n\t\t\t}\r\n\t\t\tif( hasAlpha( newValue ) ) {\r\n\t\t\t\tvalue.alpha = Number( newValue.alpha );\r\n\t\t\t} else {\r\n\t\t\t\tvalue.alpha = 1;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tvalue.color = 0xffffff;\r\n\t\t\tvalue.alpha = 1;\r\n\t\t}\r\n\r\n\t\tconst columnData = this._columnData;\r\n\t\tDTableBodyCells.setReadOnly( this, row, columnIndex, columnData );\r\n\t\tDTableBodyCells.setRenderable( this, row, columnIndex, columnData );\r\n\t}\r\n\r\n\tunset(): void {\r\n\t\tthis._row = undefined;\r\n\t}\r\n\r\n\tprotected getType(): string {\r\n\t\treturn \"DTableBodyCellColor\";\r\n\t}\r\n}\r\n"]}