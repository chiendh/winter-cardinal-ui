{"version":3,"file":"d-canvas-container.js","sourceRoot":"","sources":["../../../src/main/typescript/wcardinal/ui/d-canvas-container.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (C) 2019 Toshiba Corporation\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { interaction, Point } from \"pixi.js\";\r\nimport { DApplications } from \"./d-applications\";\r\nimport { DBase, DBaseOnOptions, DBaseOptions, DThemeBase } from \"./d-base\";\r\nimport { DBaseOverflowMask } from \"./d-base-overflow-mask\";\r\nimport { DCanvas } from \"./d-canvas\";\r\nimport { DView, DViewOptions } from \"./d-view\";\r\nimport { DViewImpl } from \"./d-view-impl\";\r\nimport { UtilWheelEventDeltas } from \"./util/util-wheel-event\";\r\n\r\nexport interface DCanvasContainerOnOptions<CANVAS> extends DBaseOnOptions {\r\n\t/**\r\n\t * Triggered when a canvas is removed.\r\n\t *\r\n\t * @param canvas a removed canvas\r\n\t * @param self a canvas container\r\n\t */\r\n\tunset?: ( canvas: CANVAS, self: any ) => void;\r\n\r\n\t/**\r\n\t * Triggered when a canvas is set.\r\n\t *\r\n\t * @param canvas a new canvas\r\n\t * @param self a canvas container\r\n\t */\r\n\tset?: ( canvas: CANVAS, self: any ) => void;\r\n}\r\n\r\nexport interface DCanvasContainerOptions<\r\n\tCANVAS extends DBase = DCanvas,\r\n\tTHEME extends DThemeCanvasContainer = DThemeCanvasContainer\r\n> extends DBaseOptions<THEME> {\r\n\tmask?: boolean;\r\n\tview?: DViewOptions;\r\n\tcanvas?: CANVAS;\r\n\ton?: DCanvasContainerOnOptions<CANVAS>;\r\n}\r\n\r\nexport interface DThemeCanvasContainer extends DThemeBase {\r\n\tisOverflowMaskEnabled(): boolean;\r\n}\r\n\r\nconst isOverflowMaskEnabled = <\r\n\tCANVAS extends DBase,\r\n\tTHEME extends DThemeCanvasContainer\r\n>( theme: THEME, options?: DCanvasContainerOptions<CANVAS, THEME> ): boolean => {\r\n\tif( options && options.mask != null ) {\r\n\t\treturn options.mask;\r\n\t}\r\n\treturn theme.isOverflowMaskEnabled();\r\n};\r\n\r\nexport class DCanvasContainer<\r\n\tCANVAS extends DBase = DCanvas,\r\n\tTHEME extends DThemeCanvasContainer = DThemeCanvasContainer,\r\n\tOPTIONS extends DCanvasContainerOptions<CANVAS, THEME> = DCanvasContainerOptions<CANVAS, THEME>\r\n> extends DBase<THEME, OPTIONS> {\r\n\tprotected _canvas!: CANVAS | null;\r\n\tprotected _overflowMask!: DBaseOverflowMask | null;\r\n\tprotected _view!: DViewImpl;\r\n\r\n\tprotected init( options?: OPTIONS ) {\r\n\t\tsuper.init( options );\r\n\r\n\t\tthis._canvas = null;\r\n\t\tconst theme = this.theme;\r\n\t\tthis._view = new DViewImpl( this, () => this._canvas, options && options.view );\r\n\r\n\t\t// Canvas\r\n\t\tthis.canvas = ( options && options.canvas ? options.canvas : null );\r\n\r\n\t\t// Overflow mask\r\n\t\tthis._overflowMask = null;\r\n\t\tif( isOverflowMaskEnabled( theme, options ) ) {\r\n\t\t\tthis.mask = this.getOrCreateOverflowMask();\r\n\t\t}\r\n\t}\r\n\r\n\tprotected getType(): string {\r\n\t\treturn \"DCanvasContainer\";\r\n\t}\r\n\r\n\tonResize( newWidth: number, newHeight: number, oldWidth: number, oldHeight: number ): void {\r\n\t\tsuper.onResize( newWidth, newHeight, oldWidth, oldHeight );\r\n\t\tthis.updateContentSize( newWidth, newHeight, oldWidth, oldHeight );\r\n\t}\r\n\r\n\tget canvas(): CANVAS | null {\r\n\t\treturn this._canvas;\r\n\t}\r\n\r\n\tset canvas( canvas: CANVAS | null ) {\r\n\t\tconst previous = this._canvas;\r\n\t\tif( previous != null ) {\r\n\t\t\tthis._canvas = null;\r\n\t\t\tthis.removeChild( previous );\r\n\t\t\tthis.emit( \"unset\", previous, this );\r\n\t\t\tprevious.destroy();\r\n\t\t}\r\n\r\n\t\tthis._canvas = canvas;\r\n\t\tif( canvas != null ) {\r\n\t\t\tthis.addChild( canvas );\r\n\t\t\tthis._view.reset( 0 );\r\n\t\t\tthis.emit( \"set\", canvas, this );\r\n\t\t} else {\r\n\t\t\tDApplications.update( this );\r\n\t\t}\r\n\t}\r\n\r\n\tprotected getOrCreateOverflowMask(): DBaseOverflowMask {\r\n\t\tif( this._overflowMask == null ) {\r\n\t\t\tthis._overflowMask = new DBaseOverflowMask( this );\r\n\t\t\tthis.addReflowable( this._overflowMask );\r\n\t\t\tthis.toDirty();\r\n\t\t}\r\n\t\treturn this._overflowMask;\r\n\t}\r\n\r\n\tprotected updateContentSize( newWidth: number, newHeight: number, oldWidth: number, oldHeight: number ): void {\r\n\t\tconst canvas = this._canvas;\r\n\t\tif( canvas != null ) {\r\n\t\t\tconst canvasX = canvas.x + (newWidth - oldWidth) * 0.5;\r\n\t\t\tconst canvasY = canvas.y + (newHeight - oldHeight) * 0.5;\r\n\t\t\tcanvas.position.set( canvasX, canvasY );\r\n\t\t}\r\n\t}\r\n\r\n\tget view(): DView {\r\n\t\treturn this._view;\r\n\t}\r\n\r\n\tonWheel( e: WheelEvent, deltas: UtilWheelEventDeltas, global: Point ): boolean {\r\n\t\tconst vresult = this._view.onWheel( e, deltas, global );\r\n\t\tconst sresult = super.onWheel( e, deltas, global );\r\n\t\treturn vresult || sresult;\r\n\t}\r\n\r\n\tonDblClick( e: MouseEvent | TouchEvent, interactionManager: interaction.InteractionManager ): boolean {\r\n\t\tconst vresult = this._view.onDblClick( e, interactionManager );\r\n\t\tconst sresult = super.onDblClick( e, interactionManager );\r\n\t\treturn vresult || sresult;\r\n\t}\r\n\r\n\tprotected onDown( e: interaction.InteractionEvent ): void {\r\n\t\tthis._view.onDown( e );\r\n\t\tsuper.onDown( e );\r\n\t}\r\n\r\n\tdestroy(): void {\r\n\t\t// Overflow mask\r\n\t\tconst overflowMask = this._overflowMask;\r\n\t\tif( overflowMask != null ) {\r\n\t\t\tthis._overflowMask = null;\r\n\t\t\toverflowMask.destroy();\r\n\t\t}\r\n\t\t(this as any).mask = null;\r\n\r\n\t\tsuper.destroy();\r\n\t}\r\n}\r\n"]}