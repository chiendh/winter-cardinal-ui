{"version":3,"file":"d-chart-series-container-impl.js","sourceRoot":"","sources":["../../../src/main/typescript/wcardinal/ui/d-chart-series-container-impl.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (C) 2019 Toshiba Corporation\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { IPoint } from \"pixi.js\";\r\nimport { DChartCoordinate } from \"./d-chart-coordinate\";\r\nimport { DChartPlotArea } from \"./d-chart-plot-area\";\r\nimport { DChartRegion } from \"./d-chart-region\";\r\nimport { DChartRegionImpl } from \"./d-chart-region-impl\";\r\nimport { DChartSelection } from \"./d-chart-selection\";\r\nimport { DChartSeries, DChartSeriesHitResult } from \"./d-chart-series\";\r\nimport { DChartSeriesContainer, DChartSeriesContainerOptions } from \"./d-chart-series-container\";\r\nimport { DChartSeriesFillComputed, DChartSeriesFillComputedOptions } from \"./d-chart-series-fill-computed\";\r\nimport { DChartSeriesFillComputedImpl } from \"./d-chart-series-fill-computed-impl\";\r\nimport { DChartSeriesFillImpl } from \"./d-chart-series-fill-impl\";\r\nimport { DChartSeriesPaddingComputed, DChartSeriesPaddingComputedOptions } from \"./d-chart-series-padding-computed\";\r\nimport { DChartSeriesPaddingComputedImpl } from \"./d-chart-series-padding-computed-impl\";\r\nimport { DChartSeriesPaddingImpl } from \"./d-chart-series-padding-impl\";\r\nimport { DChartSeriesPointComputed, DChartSeriesPointComputedOptions } from \"./d-chart-series-point-computed\";\r\nimport { DChartSeriesPointComputedImpl } from \"./d-chart-series-point-computed-impl\";\r\nimport { DChartSeriesPointImpl } from \"./d-chart-series-point-impl\";\r\nimport { DChartSeriesStrokeComputed, DChartSeriesStrokeComputedOptions } from \"./d-chart-series-stroke-computed\";\r\nimport { DChartSeriesStrokeComputedImpl } from \"./d-chart-series-stroke-computed-impl\";\r\nimport { DChartSeriesStrokeImpl } from \"./d-chart-series-stroke-impl\";\r\n\r\nexport class DChartSeriesContainerImpl implements DChartSeriesContainer {\r\n\tprotected static WORK_CALCHITPOINT: DChartSeriesHitResult = new DChartSeriesHitResult();\r\n\r\n\tprotected _plotArea: DChartPlotArea;\r\n\tprotected _list: DChartSeries[];\r\n\tprotected _domain: DChartRegionImpl;\r\n\tprotected _range: DChartRegionImpl;\r\n\tprotected _selection: DChartSelection | null;\r\n\r\n\tprotected _fill: DChartSeriesFillImpl;\r\n\tprotected _stroke: DChartSeriesStrokeImpl;\r\n\tprotected _size: DChartSeriesPointImpl;\r\n\tprotected _offset: DChartSeriesPointImpl;\r\n\tprotected _padding: DChartSeriesPaddingImpl;\r\n\r\n\tconstructor( plotArea: DChartPlotArea, options?: DChartSeriesContainerOptions ) {\r\n\t\tthis._plotArea = plotArea;\r\n\t\tthis._domain = new DChartRegionImpl( NaN, NaN );\r\n\t\tthis._range = new DChartRegionImpl( NaN, NaN );\r\n\t\tthis._selection = (options && options.selection ) || null;\r\n\r\n\t\tthis._fill = new DChartSeriesFillImpl( options && options.fill );\r\n\t\tthis._stroke = new DChartSeriesStrokeImpl( options && options.stroke );\r\n\t\tthis._size = new DChartSeriesPointImpl( options && options.size );\r\n\t\tthis._offset = new DChartSeriesPointImpl( options && options.offset );\r\n\t\tthis._padding = new DChartSeriesPaddingImpl( options && options.padding );\r\n\r\n\t\tthis._list = [];\r\n\t\tconst list = options && options.list;\r\n\t\tif( list ) {\r\n\t\t\tconst listLength = list.length;\r\n\t\t\tif( 0 < listLength ) {\r\n\t\t\t\tfor( let i = 0; i < listLength; ++i ) {\r\n\t\t\t\t\tthis.add( list[ i ] );\r\n\t\t\t\t}\r\n\t\t\t\tthis.update();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tnewFill(\r\n\t\tindex: number,\r\n\t\toptions: DChartSeriesFillComputedOptions | undefined\r\n\t): DChartSeriesFillComputed {\r\n\t\treturn DChartSeriesFillComputedImpl.from( this._fill, index, options );\r\n\t}\r\n\r\n\tnewStroke(\r\n\t\tindex: number,\r\n\t\toptions: DChartSeriesStrokeComputedOptions | undefined\r\n\t): DChartSeriesStrokeComputed {\r\n\t\treturn DChartSeriesStrokeComputedImpl.from( this._stroke, index, options );\r\n\t}\r\n\r\n\tnewSize(\r\n\t\tindex: number,\r\n\t\toptions: DChartSeriesPointComputedOptions | undefined,\r\n\t\tx: number, y: number\r\n\t): DChartSeriesPointComputed {\r\n\t\treturn DChartSeriesPointComputedImpl.from( this._size, index, options, x, y );\r\n\t}\r\n\r\n\tnewOffset(\r\n\t\tindex: number,\r\n\t\toptions: DChartSeriesPointComputedOptions | undefined,\r\n\t\tx: number, y: number\r\n\t): DChartSeriesPointComputed {\r\n\t\treturn DChartSeriesPointComputedImpl.from( this._offset, index, options, x, y );\r\n\t}\r\n\r\n\tnewPadding(\r\n\t\tindex: number,\r\n\t\toptions: DChartSeriesPaddingComputedOptions | undefined\r\n\t): DChartSeriesPaddingComputed {\r\n\t\treturn DChartSeriesPaddingComputedImpl.from( this._padding, index, options );\r\n\t}\r\n\r\n\tget plotArea(): DChartPlotArea {\r\n\t\treturn this._plotArea;\r\n\t}\r\n\r\n\tget selection(): DChartSelection | null {\r\n\t\treturn this._selection;\r\n\t}\r\n\r\n\tupdate(): void {\r\n\t\tconst list = this._list;\r\n\t\tfor( let i = 0, imax = list.length; i < imax; ++i ) {\r\n\t\t\tlist[ i ].update();\r\n\t\t}\r\n\t\tconst selection = this._selection;\r\n\t\tif( selection ) {\r\n\t\t\tselection.update();\r\n\t\t}\r\n\t}\r\n\r\n\tadd( series: DChartSeries ): void {\r\n\t\tconst list = this._list;\r\n\t\tseries.bind( this, list.length );\r\n\t\tlist.push( series );\r\n\t}\r\n\r\n\tget( index: number ): DChartSeries | null {\r\n\t\tconst list = this._list;\r\n\t\tif( 0 <= index && index < list.length ) {\r\n\t\t\treturn list[ index ];\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tindexOf( series: DChartSeries ): number {\r\n\t\treturn this._list.indexOf( series );\r\n\t}\r\n\r\n\tclear(): this {\r\n\t\tconst list = this._list;\r\n\t\tfor( let i = 0, imax = list.length; i < imax; ++i ) {\r\n\t\t\tlist[ i ].destroy();\r\n\t\t}\r\n\t\tlist.length = 0;\r\n\t\treturn this;\r\n\t}\r\n\r\n\tsize(): number {\r\n\t\treturn this._list.length;\r\n\t}\r\n\r\n\tdestroy(): void {\r\n\t\tthis.clear();\r\n\t\tconst selection = this._selection;\r\n\t\tif( selection ) {\r\n\t\t\tselection.unbind();\r\n\t\t}\r\n\t}\r\n\r\n\tgetDomain( coordinate: DChartCoordinate, result: DChartRegion ): DChartRegion {\r\n\t\tresult.clear();\r\n\r\n\t\tconst list = this._list;\r\n\t\tfor( let i = 0, imax = list.length; i < imax; ++i ) {\r\n\t\t\tconst series = list[ i ];\r\n\t\t\tif( series.coordinate.x === coordinate ) {\r\n\t\t\t\tconst domain = series.domain;\r\n\t\t\t\tresult.add( domain.from, domain.to );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\tgetRange( coordinate: DChartCoordinate, result: DChartRegion ): DChartRegion {\r\n\t\tresult.clear();\r\n\r\n\t\tconst list = this._list;\r\n\t\tfor( let i = 0, imax = list.length; i < imax; ++i ) {\r\n\t\t\tconst series = list[ i ];\r\n\t\t\tif( series.coordinate.y === coordinate ) {\r\n\t\t\t\tconst range = series.range;\r\n\t\t\t\tresult.add( range.from, range.to );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\tget domain(): DChartRegion {\r\n\t\tconst result = this._domain;\r\n\t\tresult.clear();\r\n\r\n\t\tconst list = this._list;\r\n\t\tfor( let i = 0, imax = list.length; i < imax; ++i ) {\r\n\t\t\tconst domain = list[ i ].domain;\r\n\t\t\tresult.add( domain.from, domain.to );\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\tget range(): DChartRegion {\r\n\t\tconst result = this._range;\r\n\t\tresult.clear();\r\n\r\n\t\tconst list = this._list;\r\n\t\tfor( let i = 0, imax = list.length; i < imax; ++i ) {\r\n\t\t\tconst range = list[ i ].range;\r\n\t\t\tresult.add( range.from, range.to );\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\thitTest( global: IPoint ): DChartSeries | null {\r\n\t\tconst list = this._list;\r\n\t\tfor( let i = list.length - 1; 0 <= i; --i ) {\r\n\t\t\tconst series = list[ i ];\r\n\t\t\tif( series.hitTest( global ) ) {\r\n\t\t\t\treturn series;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tcalcHitPoint( global: IPoint, result: DChartSeriesHitResult ): DChartSeries | null {\r\n\t\tlet tmp1 = result;\r\n\t\tlet tmp2 = DChartSeriesContainerImpl.WORK_CALCHITPOINT;\r\n\t\tconst list = this._list;\r\n\t\tlet closest: DChartSeries | null = null;\r\n\t\ttmp2.distance = +Infinity;\r\n\t\tfor( let i = list.length - 1; 0 <= i; --i ) {\r\n\t\t\tconst series = list[ i ];\r\n\t\t\tif( series.calcHitPoint( global, tmp1 ) ) {\r\n\t\t\t\tif( tmp1.distance < tmp2.distance ) {\r\n\t\t\t\t\tclosest = series;\r\n\t\t\t\t\tconst tmp = tmp1;\r\n\t\t\t\t\ttmp1 = tmp2;\r\n\t\t\t\t\ttmp2 = tmp;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif( closest && tmp2 !== result ) {\r\n\t\t\tresult.copyFrom( tmp2 );\r\n\t\t}\r\n\t\treturn closest;\r\n\t}\r\n}\r\n"]}