{"version":3,"file":"e-snapper-grid.js","sourceRoot":"","sources":["../../../../src/main/typescript/wcardinal/ui/snapper/e-snapper-grid.ts"],"names":[],"mappings":"AAAA;;;GAGG;;AAEH,OAAO,EAAE,KAAK,EAAE,MAAM,SAAS,CAAC;AAIhC;IAAkC,gCAAkB;IAInD;QAAA,YACC,iBAAO,SAGP;QAFA,KAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QACvB,KAAI,CAAC,KAAK,GAAG,EAAE,CAAC;;IACjB,CAAC;IAED,6BAAM,GAAN;QACC,IAAI,CAAC,UAAU,GAAG,CAAE,IAAI,CAAC,UAAU,CAAC;QACpC,IAAI,CAAC,IAAI,CAAE,QAAQ,EAAE,IAAI,CAAE,CAAC;QAC5B,OAAO,IAAI,CAAC,UAAU,CAAC;IACxB,CAAC;IAED,6BAAM,GAAN;QACC,IAAI,IAAI,CAAC,UAAU,KAAK,IAAI,EAAG;YAC9B,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;YACvB,IAAI,CAAC,IAAI,CAAE,QAAQ,EAAE,IAAI,CAAE,CAAC;SAC5B;IACF,CAAC;IAED,8BAAO,GAAP;QACC,IAAI,IAAI,CAAC,UAAU,KAAK,KAAK,EAAG;YAC/B,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;YACxB,IAAI,CAAC,IAAI,CAAE,QAAQ,EAAE,IAAI,CAAE,CAAC;SAC5B;IACF,CAAC;IAED,gCAAS,GAAT;QACC,OAAO,IAAI,CAAC,UAAU,CAAC;IACxB,CAAC;IAED,sBAAI,8BAAI;aAAR;YACC,OAAO,IAAI,CAAC,KAAK,CAAC;QACnB,CAAC;aAED,UAAU,IAAY;YACrB,IAAI,IAAI,CAAC,KAAK,KAAK,IAAI,EAAG;gBACzB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;gBAClB,IAAI,CAAC,IAAI,CAAE,QAAQ,EAAE,IAAI,EAAE,IAAI,CAAE,CAAC;aAClC;QACF,CAAC;;;OAPA;IASD,2BAAI,GAAJ,UAAM,KAAa,EAAE,MAAsB;QAC1C,IAAI,IAAI,CAAC,UAAU,EAAG;YACrB,IAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC;YACxB,MAAM,CAAC,GAAG,CAAE,KAAK,EAAE,IAAI,CAAC,KAAK,CAAE,KAAK,GAAG,IAAI,CAAE,GAAG,IAAI,CAAE,CAAC;SACvD;IACF,CAAC;IAED,4BAAK,GAAL;QACC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QACvB,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;QAChB,IAAI,CAAC,IAAI,CAAE,QAAQ,EAAE,IAAI,CAAE,CAAC;IAC7B,CAAC;IAED,gCAAS,GAAT;QACC,OAAO;YACN,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACzB,IAAI,CAAC,KAAK;SACV,CAAC;IACH,CAAC;IAED,kCAAW,GAAX,UAAa,UAAsC;QAClD,IAAI,UAAU,CAAE,CAAC,CAAE,KAAK,CAAC,EAAG;YAC3B,IAAI,CAAC,MAAM,EAAE,CAAC;SACd;aAAM;YACN,IAAI,CAAC,OAAO,EAAE,CAAC;SACf;QAED,IAAI,CAAC,IAAI,GAAG,UAAU,CAAE,CAAC,CAAE,CAAC;IAC7B,CAAC;IACF,mBAAC;AAAD,CAAC,AA1ED,CAAkC,KAAK,CAAC,YAAY,GA0EnD","sourcesContent":["/*\r\n * Copyright (C) 2019 Toshiba Corporation\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { utils } from \"pixi.js\";\r\nimport { DDiagramSerializedSnapGrid } from \"../d-diagram-serialized\";\r\nimport { ESnapperResult } from \"./e-snapper-result\";\r\n\r\nexport class ESnapperGrid extends utils.EventEmitter {\r\n\tprotected _isEnabled: boolean;\r\n\tprotected _size: number;\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis._isEnabled = true;\r\n\t\tthis._size = 10;\r\n\t}\r\n\r\n\ttoggle(): boolean {\r\n\t\tthis._isEnabled = ! this._isEnabled;\r\n\t\tthis.emit( \"change\", this );\r\n\t\treturn this._isEnabled;\r\n\t}\r\n\r\n\tenable(): void {\r\n\t\tif( this._isEnabled !== true ) {\r\n\t\t\tthis._isEnabled = true;\r\n\t\t\tthis.emit( \"change\", this );\r\n\t\t}\r\n\t}\r\n\r\n\tdisable(): void {\r\n\t\tif( this._isEnabled !== false ) {\r\n\t\t\tthis._isEnabled = false;\r\n\t\t\tthis.emit( \"change\", this );\r\n\t\t}\r\n\t}\r\n\r\n\tisEnabled(): boolean {\r\n\t\treturn this._isEnabled;\r\n\t}\r\n\r\n\tget size(): number {\r\n\t\treturn this._size;\r\n\t}\r\n\r\n\tset size( size: number ) {\r\n\t\tif( this._size !== size ) {\r\n\t\t\tthis._size = size;\r\n\t\t\tthis.emit( \"change\", size, this );\r\n\t\t}\r\n\t}\r\n\r\n\tsnap( value: number, result: ESnapperResult ): void {\r\n\t\tif( this._isEnabled ) {\r\n\t\t\tconst size = this._size;\r\n\t\t\tresult.set( value, Math.round( value / size ) * size );\r\n\t\t}\r\n\t}\r\n\r\n\treset(): void {\r\n\t\tthis._isEnabled = true;\r\n\t\tthis._size = 10;\r\n\t\tthis.emit( \"change\", this );\r\n\t}\r\n\r\n\tserialize(): DDiagramSerializedSnapGrid {\r\n\t\treturn [\r\n\t\t\t(this._isEnabled ? 1 : 0),\r\n\t\t\tthis._size\r\n\t\t];\r\n\t}\r\n\r\n\tdeserialize( serialized: DDiagramSerializedSnapGrid ): void {\r\n\t\tif( serialized[ 0 ] !== 0 ) {\r\n\t\t\tthis.enable();\r\n\t\t} else {\r\n\t\t\tthis.disable();\r\n\t\t}\r\n\r\n\t\tthis.size = serialized[ 1 ];\r\n\t}\r\n}\r\n"]}