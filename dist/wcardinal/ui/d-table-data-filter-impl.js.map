{"version":3,"file":"d-table-data-filter-impl.js","sourceRoot":"","sources":["../../../src/main/typescript/wcardinal/ui/d-table-data-filter-impl.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (C) 2019 Toshiba Corporation\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { utils } from \"pixi.js\";\r\nimport { DTableDataFilter, DTableDataFilterFunction, DTableDataFilterObject } from \"./d-table-data-filter\";\r\nimport { DTableDataSorter } from \"./d-table-data-sorter\";\r\nimport { isFunction } from \"./util/is-function\";\r\n\r\ninterface DTableDataFilterImplParent<ROW> {\r\n\treadonly sorter: DTableDataSorter<ROW>;\r\n\treadonly rows: ROW[];\r\n\tupdate(): void;\r\n}\r\n\r\nexport class DTableDataFilterImpl<ROW> extends utils.EventEmitter implements DTableDataFilter<ROW> {\r\n\tprotected _id: number;\r\n\tprotected _idUpdated: number;\r\n\tprotected _isApplied: boolean;\r\n\tprotected _sorterId: number;\r\n\tprotected _parent: DTableDataFilterImplParent<ROW>;\r\n\tprotected _filter: DTableDataFilterFunction<ROW> | DTableDataFilterObject<ROW> | null;\r\n\tprotected _filtered: number[] | null;\r\n\r\n\tconstructor( parent: DTableDataFilterImplParent<ROW> ) {\r\n\t\tsuper();\r\n\r\n\t\tthis._id = 0;\r\n\t\tthis._idUpdated = -1;\r\n\t\tthis._isApplied = false;\r\n\t\tthis._sorterId = -1;\r\n\r\n\t\tthis._parent = parent;\r\n\t\tthis._filter = null;\r\n\t\tthis._filtered = null;\r\n\t}\r\n\r\n\tget id(): number {\r\n\t\treturn this._id;\r\n\t}\r\n\r\n\tapply(): void {\r\n\t\tthis._isApplied = true;\r\n\t\tthis._id += 1;\r\n\t\tthis._parent.update();\r\n\t}\r\n\r\n\tunapply(): void {\r\n\t\tif( this._isApplied ) {\r\n\t\t\tthis._isApplied = false;\r\n\t\t\tthis._id += 1;\r\n\t\t\tthis._parent.update();\r\n\t\t}\r\n\t}\r\n\r\n\tisApplied(): boolean {\r\n\t\treturn this._isApplied;\r\n\t}\r\n\r\n\tprotected newFiltered(): number[] | null {\r\n\t\tconst filter = this._filter;\r\n\t\tif( filter != null ) {\r\n\t\t\tconst filtered: number[] = [];\r\n\t\t\tconst parent = this._parent;\r\n\t\t\tconst sorter = parent.sorter;\r\n\t\t\tconst rows = parent.rows;\r\n\t\t\tif( isFunction( filter ) ) {\r\n\t\t\t\tconst indicesSorted = sorter.indices;\r\n\t\t\t\tif( indicesSorted ) {\r\n\t\t\t\t\tfor( let i = 0, imax = indicesSorted.length; i < imax; ++i ) {\r\n\t\t\t\t\t\tconst indexSorted = indicesSorted[ i ];\r\n\t\t\t\t\t\tif( filter( rows[ indexSorted ], indexSorted ) ) {\r\n\t\t\t\t\t\t\tfiltered.push( i );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tfor( let i = 0, imax = rows.length; i < imax; ++i ) {\r\n\t\t\t\t\t\tif( filter( rows[ i ], i ) ) {\r\n\t\t\t\t\t\t\tfiltered.push( i );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tconst indicesSorted = sorter.indices;\r\n\t\t\t\tif( indicesSorted ) {\r\n\t\t\t\t\tfor( let i = 0, imax = indicesSorted.length; i < imax; ++i ) {\r\n\t\t\t\t\t\tconst indexSorted = indicesSorted[ i ];\r\n\t\t\t\t\t\tif( filter.test( rows[ indexSorted ], indexSorted ) ) {\r\n\t\t\t\t\t\t\tfiltered.push( i );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tfor( let i = 0, imax = rows.length; i < imax; ++i ) {\r\n\t\t\t\t\t\tif( filter.test( rows[ i ], i ) ) {\r\n\t\t\t\t\t\t\tfiltered.push( i );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn filtered;\r\n\t\t} else {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n\tget(): DTableDataFilterFunction<ROW> | DTableDataFilterObject<ROW> | null {\r\n\t\treturn this._filter;\r\n\t}\r\n\r\n\tset( filter: DTableDataFilterFunction<ROW> | DTableDataFilterObject<ROW> | null ): void {\r\n\t\tif( this._filter !== filter ) {\r\n\t\t\tthis._filter = filter;\r\n\t\t}\r\n\t}\r\n\r\n\ttoDirty(): void {\r\n\t\tthis._id += 1;\r\n\t}\r\n\r\n\tupdate(): void {\r\n\t\tif( this._id !== this._idUpdated || this._parent.sorter.id !== this._sorterId ) {\r\n\t\t\tthis._idUpdated = this._id;\r\n\t\t\tthis._sorterId = this._parent.sorter.id;\r\n\t\t\tif( this._isApplied ) {\r\n\t\t\t\tthis._filtered = this.newFiltered();\r\n\t\t\t\tthis.emit( \"change\", this );\r\n\t\t\t} else if( this._filtered != null ) {\r\n\t\t\t\tthis._filtered = null;\r\n\t\t\t\tthis.emit( \"change\", this );\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tget indices(): number[] | null {\r\n\t\tthis.update();\r\n\t\treturn this._filtered;\r\n\t}\r\n\r\n\tmap( sortedIndex: number ): number | null {\r\n\t\tlet result = sortedIndex;\r\n\r\n\t\tconst indicesFiltered = this.indices;\r\n\t\tif( indicesFiltered ) {\r\n\t\t\tconst index = indicesFiltered.indexOf( result );\r\n\t\t\tif( 0 <= index ) {\r\n\t\t\t\tresult = index;\r\n\t\t\t} else {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\tunmap( index: number ): number {\r\n\t\tlet result = index;\r\n\r\n\t\tconst indicesFiltered = this.indices;\r\n\t\tif( indicesFiltered ) {\r\n\t\t\tresult = indicesFiltered[ result ];\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n}\r\n"]}