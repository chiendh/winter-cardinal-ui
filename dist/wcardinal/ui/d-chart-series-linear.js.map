{"version":3,"file":"d-chart-series-linear.js","sourceRoot":"","sources":["../../../src/main/typescript/wcardinal/ui/d-chart-series-linear.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (C) 2019 Toshiba Corporation\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { IPoint, Point } from \"pixi.js\";\r\nimport { DApplications } from \"./d-applications\";\r\nimport { DBaseStates } from \"./d-base-states\";\r\nimport { DChartCoordinate } from \"./d-chart-coordinate\";\r\nimport { DChartSeriesHitResult } from \"./d-chart-series\";\r\nimport { DChartSeriesBase, DChartSeriesBaseOptions } from \"./d-chart-series-base\";\r\nimport { DChartSeriesContainer } from \"./d-chart-series-container\";\r\nimport { DChartSeriesLinearParameters, DChartSeriesLinearParametersOptions } from \"./d-chart-series-linear-parameters\";\r\nimport { DChartSeriesExpressionParametersImpl } from \"./d-chart-series-linear-parameters-impl\";\r\nimport { DChartSeriesStrokeComputed, DChartSeriesStrokeComputedOptions } from \"./d-chart-series-stroke-computed\";\r\nimport { EShapeLine } from \"./shape/variant/e-shape-line\";\r\n\r\n/**\r\n * {@link DChartSeriesLinear} options.\r\n */\r\nexport interface DChartSeriesLinearOptions extends DChartSeriesLinearParametersOptions, DChartSeriesBaseOptions {\r\n\tstroke?: DChartSeriesStrokeComputedOptions;\r\n}\r\n\r\n/**\r\n * A series represents a linear equation `a (x - x0) === b (y - y0)`.\r\n */\r\nexport class DChartSeriesLinear extends DChartSeriesBase {\r\n\tprotected static WORK: Point = new Point();\r\n\tprotected _line: EShapeLine | null;\r\n\tprotected _options?: DChartSeriesLinearOptions;\r\n\tprotected _plotAreaSizeXUpdated: number;\r\n\tprotected _plotAreaSizeYUpdated: number;\r\n\tprotected _parameters: DChartSeriesExpressionParametersImpl;\r\n\tprotected _stroke?: DChartSeriesStrokeComputed;\r\n\r\n\tconstructor( options?: DChartSeriesLinearOptions ) {\r\n\t\tsuper( options );\r\n\t\tthis._line = null;\r\n\t\tthis._options = options;\r\n\t\tthis._plotAreaSizeXUpdated = NaN;\r\n\t\tthis._plotAreaSizeYUpdated = NaN;\r\n\t\tthis._parameters = DChartSeriesExpressionParametersImpl.from( options );\r\n\t}\r\n\r\n\tbind( container: DChartSeriesContainer, index: number ): void {\r\n\t\tlet line = this._line;\r\n\t\tif( ! line ) {\r\n\t\t\tconst stroke = this._stroke = container.newStroke( index, this._options?.stroke );\r\n\t\t\tline = this._line = new EShapeLine([], [], stroke.width, stroke.style);\r\n\t\t\tline.stroke.color = stroke.color;\r\n\t\t\tline.stroke.alpha = stroke.alpha;\r\n\t\t}\r\n\t\tline.attach( container.plotArea.container, index );\r\n\t\tthis._parameters.toDirty();\r\n\t\tthis._plotAreaSizeXUpdated = NaN;\r\n\t\tthis._plotAreaSizeYUpdated = NaN;\r\n\t\tsuper.bind( container, index );\r\n\t}\r\n\r\n\tunbind(): void {\r\n\t\tconst line = this._line;\r\n\t\tif( line ) {\r\n\t\t\tline.detach();\r\n\t\t}\r\n\t\tsuper.unbind();\r\n\t}\r\n\r\n\tget shape(): EShapeLine | null {\r\n\t\treturn this._line;\r\n\t}\r\n\r\n\tget parameters(): DChartSeriesLinearParameters {\r\n\t\treturn this._parameters;\r\n\t}\r\n\r\n\ttoDirty(): void {\r\n\t\tthis._parameters.toDirty();\r\n\t}\r\n\r\n\tupdate(): void {\r\n\t\tconst line = this._line;\r\n\t\tconst container = this._container;\r\n\t\tif( line && container ) {\r\n\t\t\tconst plotArea = container.plotArea;\r\n\t\t\tconst coordinate = this._coordinate;\r\n\t\t\tconst coordinateX = coordinate.x;\r\n\t\t\tconst coordinateY = coordinate.y;\r\n\t\t\tif( coordinateX && coordinateY ) {\r\n\t\t\t\tconst plotAreaWidth = plotArea.width;\r\n\t\t\t\tconst plotAreaHeight = plotArea.height;\r\n\r\n\t\t\t\tconst parameters = this._parameters;\r\n\t\t\t\tconst isParametersChanged = parameters.isDirty();\r\n\t\t\t\tconst isCoordinateChanged = coordinate.isDirty( coordinateX, coordinateY );\r\n\t\t\t\tconst isCoordinateTransformChanged = coordinate.isTransformDirty( coordinateX, coordinateY );\r\n\t\t\t\tconst isPlotAreaSizeChagned = ( plotAreaWidth !== this._plotAreaSizeXUpdated ||\r\n\t\t\t\t\tplotAreaHeight !== this._plotAreaSizeYUpdated );\r\n\t\t\t\tif( isParametersChanged || isCoordinateChanged || isCoordinateTransformChanged || isPlotAreaSizeChagned ) {\r\n\t\t\t\t\tparameters.toClean();\r\n\t\t\t\t\tthis._plotAreaSizeXUpdated = plotAreaWidth;\r\n\t\t\t\t\tthis._plotAreaSizeYUpdated = plotAreaHeight;\r\n\t\t\t\t\tthis.updateLine(\r\n\t\t\t\t\t\tline,\r\n\t\t\t\t\t\tcoordinateX,\r\n\t\t\t\t\t\tcoordinateY,\r\n\t\t\t\t\t\tplotAreaWidth,\r\n\t\t\t\t\t\tplotAreaHeight\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprotected updateLine(\r\n\t\tline: EShapeLine,\r\n\t\txcoordinate: DChartCoordinate,\r\n\t\tycoordinate: DChartCoordinate,\r\n\t\tplotAreaSizeX: number,\r\n\t\tplotAreaSizeY: number\r\n\t): void {\r\n\t\tconst values = line.points.values;\r\n\t\tconst segments = line.points.segments;\r\n\r\n\t\tconst parameters = this._parameters;\r\n\t\tconst a = parameters.a;\r\n\t\tconst b = parameters.b;\r\n\t\tconst x0 = parameters.x0;\r\n\t\tconst y0 = parameters.y0;\r\n\t\tconst aabs = Math.abs( a );\r\n\t\tconst babs = Math.abs( b );\r\n\r\n\t\tlet p0x = NaN;\r\n\t\tlet p0y = NaN;\r\n\t\tlet p1x = NaN;\r\n\t\tlet p1y = NaN;\r\n\r\n\t\tconst threshold = 0.00001;\r\n\t\tif( babs <= aabs ) {\r\n\t\t\tconst xfrom0 = xcoordinate.unmap(\r\n\t\t\t\txcoordinate.transform.unmap( 0 )\r\n\t\t\t);\r\n\t\t\tconst xto0 = xcoordinate.unmap(\r\n\t\t\t\txcoordinate.transform.unmap( plotAreaSizeX )\r\n\t\t\t);\r\n\t\t\tp0x = Math.min( xfrom0, xto0 );\r\n\t\t\tp1x = Math.max( xfrom0, xto0 );\r\n\r\n\t\t\tif( threshold < aabs ) {\r\n\t\t\t\tconst yfrom = ycoordinate.unmap(\r\n\t\t\t\t\tycoordinate.transform.unmap( 0 )\r\n\t\t\t\t);\r\n\t\t\t\tconst yto = ycoordinate.unmap(\r\n\t\t\t\t\tycoordinate.transform.unmap( plotAreaSizeY )\r\n\t\t\t\t);\r\n\t\t\t\tconst xfrom1 = b * (yfrom - y0) / a + x0;\r\n\t\t\t\tconst xto1 = b * (yto - y0) / a + x0;\r\n\t\t\t\tconst p2x = Math.min( xfrom1, xto1 );\r\n\t\t\t\tconst p3x = Math.max( xfrom1, xto1 );\r\n\r\n\t\t\t\tif( p0x < p2x ) {\r\n\t\t\t\t\tp0x = p2x;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif( p3x < p1x ) {\r\n\t\t\t\t\tp1x = p3x;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tp0y = a * (p0x - x0) + b * y0;\r\n\t\t\tp1y = a * (p1x - x0) + b * y0;\r\n\t\t} else {\r\n\t\t\tconst yfrom0 = ycoordinate.unmap(\r\n\t\t\t\tycoordinate.transform.unmap( 0 )\r\n\t\t\t);\r\n\t\t\tconst yto0 = ycoordinate.unmap(\r\n\t\t\t\tycoordinate.transform.unmap( plotAreaSizeY )\r\n\t\t\t);\r\n\t\t\tp0y = Math.min( yfrom0, yto0 );\r\n\t\t\tp1y = Math.max( yfrom0, yto0 );\r\n\r\n\t\t\tif( threshold < babs ) {\r\n\t\t\t\tconst xfrom = xcoordinate.unmap(\r\n\t\t\t\t\txcoordinate.transform.unmap( 0 )\r\n\t\t\t\t);\r\n\t\t\t\tconst xto = xcoordinate.unmap(\r\n\t\t\t\t\txcoordinate.transform.unmap( plotAreaSizeX )\r\n\t\t\t\t);\r\n\t\t\t\tconst yfrom1 = a * (xfrom - x0) / b + y0;\r\n\t\t\t\tconst yto1 = a * (xto - x0) / b + y0;\r\n\t\t\t\tconst p2y = Math.min( yfrom1, yto1 );\r\n\t\t\t\tconst p3y = Math.max( yfrom1, yto1 );\r\n\r\n\t\t\t\tif( p0y < p2y ) {\r\n\t\t\t\t\tp0y = p2y;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif( p3y < p1y ) {\r\n\t\t\t\t\tp1y = p3y;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tp0x = b * (p0y - y0) + a * x0;\r\n\t\t\tp1x = b * (p1y - y0) + a * x0;\r\n\t\t}\r\n\r\n\t\tp0x = xcoordinate.transform.map( xcoordinate.map( p0x ) );\r\n\t\tp0y = ycoordinate.transform.map( ycoordinate.map( p0y ) );\r\n\t\tp1x = xcoordinate.transform.map( xcoordinate.map( p1x ) );\r\n\t\tp1y = ycoordinate.transform.map( ycoordinate.map( p1y ) );\r\n\r\n\t\tconst cx = ( p0x + p1x ) * 0.5;\r\n\t\tconst cy = ( p0y + p1y ) * 0.5;\r\n\t\tconst sx = Math.abs( p1x - p0x );\r\n\t\tconst sy = Math.abs( p1y - p0y );\r\n\r\n\t\tp0x -= cx;\r\n\t\tp0y -= cy;\r\n\t\tp1x -= cx;\r\n\t\tp1y -= cy;\r\n\r\n\t\tif( values.length !== 4 ) {\r\n\t\t\tvalues.length = 0;\r\n\t\t\tvalues.push( p0x, p0y, p1x, p1y );\r\n\t\t} else {\r\n\t\t\tvalues[ 0 ] = p0x;\r\n\t\t\tvalues[ 1 ] = p0y;\r\n\t\t\tvalues[ 2 ] = p1x;\r\n\t\t\tvalues[ 3 ] = p1y;\r\n\t\t}\r\n\t\tif( segments.length !== 0 ) {\r\n\t\t\tsegments.length = 0;\r\n\t\t}\r\n\t\tline.disallowUploadedUpdate();\r\n\t\tline.points.set( values, segments );\r\n\t\tline.size.set( sx, sy );\r\n\t\tline.transform.position.set( cx, cy );\r\n\t\tline.allowUploadedUpdate();\r\n\t\tDApplications.update( line );\r\n\t}\r\n\r\n\tprotected updateRegion(): void {\r\n\t\t// DO NOTHING\r\n\t}\r\n\r\n\tdestroy(): void {\r\n\t\tconst line = this._line;\r\n\t\tif( line ) {\r\n\t\t\tthis._line = null;\r\n\t\t\tline.detach();\r\n\t\t\tline.destroy();\r\n\t\t}\r\n\t\tsuper.destroy();\r\n\t}\r\n\r\n\thitTest( global: IPoint ): boolean {\r\n\t\tconst line = this._line;\r\n\t\tif( line ) {\r\n\t\t\tconst work = DChartSeriesLinear.WORK;\r\n\t\t\tconst local = line.toLocal( global, undefined, work );\r\n\t\t\treturn line.contains( local ) != null;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tcalcHitPoint( global: IPoint, result: DChartSeriesHitResult ): boolean {\r\n\t\tconst line = this._line;\r\n\t\tif( line ) {\r\n\t\t\tconst work = DChartSeriesLinear.WORK;\r\n\t\t\tconst local = line.toLocal( global, undefined, work );\r\n\t\t\tresult.shape = line;\r\n\t\t\treturn line.calcHitPoint( local, this.toThreshold, null, this.calcHitPointHitTester, result );\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tprotected toThreshold( this: unknown, strokeWidth: number, strokeScale: number ): number {\r\n\t\treturn +Infinity;\r\n\t}\r\n\r\n\tcalcHitPointHitTester(\r\n\t\tthis: unknown,\r\n\t\tx: number, y: number,\r\n\t\tp0x: number, p0y: number,\r\n\t\tp1x: number, p1y: number,\r\n\t\tindex: number,\r\n\t\tthreshold: number,\r\n\t\tresult: DChartSeriesHitResult\r\n\t): boolean {\r\n\t\tif( p0x <= x && x < p1x ) {\r\n\t\t\tconst l = p1x - p0x;\r\n\t\t\tif( 0.0001 < Math.abs( l ) ) {\r\n\t\t\t\tconst t = (x - p0x) / l;\r\n\t\t\t\tconst p2x = x;\r\n\t\t\t\tconst p2y = p0y + t * (p1y - p0y);\r\n\t\t\t\tconst distance = Math.abs(p2y - y);\r\n\t\t\t\tif( distance < threshold ) {\r\n\t\t\t\t\tconst position = result.shape!.transform.position;\r\n\t\t\t\t\tconst px = position.x;\r\n\t\t\t\t\tconst py = position.y;\r\n\t\t\t\t\tresult.x = result.p0x = result.p1x = px + p2x;\r\n\t\t\t\t\tresult.y = result.p0y = result.p1y = py + p2y;\r\n\t\t\t\t\tresult.t = t;\r\n\t\t\t\t\tresult.index = index;\r\n\t\t\t\t\tresult.distance = distance;\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tprotected onStateChange( newState: number, oldState: number ) {\r\n\t\tconst isActive = DBaseStates.isActive( newState );\r\n\t\tconst wasActive = DBaseStates.isActive( oldState );\r\n\t\tif( isActive !== wasActive ) {\r\n\t\t\tconst line = this._line;\r\n\t\t\tconst stroke = this._stroke;\r\n\t\t\tif( line && stroke ) {\r\n\t\t\t\tline.stroke.width = stroke.width * ( isActive ? 2 : 1 );\r\n\t\t\t}\r\n\t\t}\r\n\t\tsuper.onStateChange( newState, oldState );\r\n\t}\r\n}\r\n"]}