{"version":3,"file":"d-map-coordinate.js","sourceRoot":"","sources":["../../../src/main/typescript/wcardinal/ui/d-map-coordinate.ts"],"names":[],"mappings":"AAAA;;;GAGG","sourcesContent":["/*\r\n * Copyright (C) 2019 Toshiba Corporation\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nexport interface DMapPoint {\r\n\tx: number;\r\n\ty: number;\r\n}\r\n\r\nexport interface DMapCoordinate {\r\n\tgetTileSize(): number;\r\n\r\n\t/**\r\n\t * Converts the given (lon, lat) point in WGS84 to (x, y) in EPSG:900913.\r\n\t * The origin of the converted point (x, y) is at the middle-left corner.\r\n\t * The `meters` can be the same instance that is passed in as the `lonlat`.\r\n\t *\r\n\t * @param lonlat (lon, lat) point\r\n\t * @param meters (x, y) point in meters converted from the given lonlat.\r\n\t * @return (x, y) point in meters\r\n\t * @see https://www.maptiler.com/google-maps-coordinates-tile-bounds-projection/\r\n\t * @see https://qiita.com/MALORGIS/items/1a9114dd090e5b891bf7\r\n\t */\r\n\tlonLatToMeters( lonlat: DMapPoint, meters: DMapPoint ): DMapPoint;\r\n\r\n\t/**\r\n\t * The `lonlat` can be the same instance that is passed in as the `meters`.\r\n\t *\r\n\t * @param meters\r\n\t * @param lonlat\r\n\t */\r\n\tmetersToLonLat( meters: DMapPoint, lonlat: DMapPoint ): DMapPoint;\r\n\r\n\t/**\r\n\t * Converts pixel coordinates in given zoom level of pyramid to EPSG:900913.\r\n\t * The origin of the `pixels` is the top-left corner.\r\n\t * The `meters` can be the same instance that is passed in as the `pixels`.\r\n\t */\r\n\tpixelsToMeters( pixels: DMapPoint, tz: number, tileSize: number, meters: DMapPoint ): DMapPoint;\r\n\r\n\t/**\r\n\t * Converts EPSG:900913 to pyramid pixel coordinates in given zoom level.\r\n\t * The origin of the pixels is the top-left corner.\r\n\t * The `pixels` can be the same instance that is passed in as the `meters`.\r\n\t */\r\n\tmetersToPixels( meters: DMapPoint, tz: number, tileSize: number, pixels: DMapPoint ): DMapPoint;\r\n\r\n\t/**\r\n\t * Returns a tile covering region in given pixel coordinates.\r\n\t * The origin of the tile is the top-left corner.\r\n\t * The `tile` can be the same instance that is passed in as the `pixels`.\r\n\t */\r\n\tpixelsToTile( pixels: DMapPoint, tileSize: number, tile: DMapPoint ): DMapPoint;\r\n\r\n\t/**\r\n\t * The origin of the tile is the top-left corner.\r\n\t * The `tile` can be the same instance that is passed in as the `meters`.\r\n\t */\r\n\tmetersToTile( meters: DMapPoint, tz: number, tile: DMapPoint ): DMapPoint;\r\n\r\n\tlonLatToTile( lonlat: DMapPoint, tz: number, tile: DMapPoint ): DMapPoint;\r\n\r\n\tlonLatToPixels( lonlat: DMapPoint, tz: number, tileSize: number, pixels: DMapPoint ): DMapPoint;\r\n\r\n\tpixelsToLonLat( pixels: DMapPoint, tz: number, tileSize: number, lonlat: DMapPoint ): DMapPoint;\r\n\r\n\t/**\r\n\t * The `pixels` can be the same instance that is passed in as the `tile`.\r\n\t */\r\n\ttileToPixels( tile: DMapPoint, tileSize: number, pixels: DMapPoint ): DMapPoint;\r\n\r\n\t/**\r\n\t * Returns bounds of the given tile in EPSG:900913 coordinates\r\n\t * The `meters` can be the same instance that is passed in as the `tile`.\r\n\t */\r\n\ttileToMeters( tile: DMapPoint, tz: number, meters: DMapPoint ): DMapPoint;\r\n\r\n\ttoTileCount( tz: number ): number;\r\n\r\n\ttoTileCode( tz: number, tx: number, ty: number ): number;\r\n}\r\n"]}