{"version":3,"file":"d-table-data-sorter.js","sourceRoot":"","sources":["../../../src/main/typescript/wcardinal/ui/d-table-data-sorter.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAiBH;;GAEG;AACH,MAAM,CAAN,IAAY,eAGX;AAHD,WAAY,eAAe;IAC1B,+DAAS,CAAA;IACT,iEAAU,CAAA;AACX,CAAC,EAHW,eAAe,KAAf,eAAe,QAG1B","sourcesContent":["/*\r\n * Copyright (C) 2019 Toshiba Corporation\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { utils } from \"pixi.js\";\r\n\r\n/**\r\n * A row comparator function.\r\n */\r\nexport type DTableDataComparatorFunction<ROW> =\r\n\t( rowA: ROW, rowB: ROW, indexA: number, indexB: number ) => number;\r\n\r\n/**\r\n * A row comparator object.\r\n */\r\nexport interface DTableDataComparatorObject<ROW> {\r\n\tcompare( rowA: ROW, rowB: ROW, indexA: number, indexB: number ): number;\r\n}\r\n\r\n/**\r\n * A sort order.\r\n */\r\nexport enum DTableDataOrder {\r\n\tASCENDING,\r\n\tDESCENDING\r\n}\r\n\r\n/**\r\n * Table data sorter.\r\n */\r\nexport interface DTableDataSorter<ROW> extends utils.EventEmitter {\r\n\treadonly id: number;\r\n\r\n\t/**\r\n\t * An indices of sorted rows.\r\n\t * Must not change this indices directly.\r\n\t */\r\n\treadonly indices: number[] | null;\r\n\r\n\t/**\r\n\t * A sort order.\r\n\t */\r\n\torder: DTableDataOrder;\r\n\r\n\t/**\r\n\t * Applys a sorting.\r\n\t */\r\n\tapply(): void;\r\n\r\n\t/**\r\n\t * Unapplys a sorting.\r\n\t */\r\n\tunapply(): void;\r\n\r\n\t/**\r\n\t * Returns true if a sorting is applied.\r\n\t */\r\n\tisApplied(): boolean;\r\n\r\n\t/**\r\n\t * Returns a current comparator.\r\n\t */\r\n\tget(): DTableDataComparatorFunction<ROW> | DTableDataComparatorObject<ROW> | null;\r\n\r\n\t/**\r\n\t * Sets to the given comparator.\r\n\t *\r\n\t * @param comparator A comparator\r\n\t */\r\n\tset( comparator: DTableDataComparatorFunction<ROW> | DTableDataComparatorObject<ROW> | null ): void;\r\n\r\n\t/**\r\n\t * Returns a sorted index of the specified unmapped index.\r\n\t *\r\n\t * @param unmappedIndex an unmapped index\r\n\t */\r\n\tmap( unmappedIndex: number ): number | null;\r\n\r\n\t/**\r\n\t * Returns an unmapped index of the specified sorted index.\r\n\t *\r\n\t * @param index a mapped index\r\n\t */\r\n\tunmap( index: number ): number;\r\n}\r\n"]}