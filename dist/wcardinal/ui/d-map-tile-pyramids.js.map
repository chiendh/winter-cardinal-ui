{"version":3,"file":"d-map-tile-pyramids.js","sourceRoot":"","sources":["../../../src/main/typescript/wcardinal/ui/d-map-tile-pyramids.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAIH,OAAO,EAAE,eAAe,EAAE,MAAM,qBAAqB,CAAC;AAEtD,OAAO,EAAE,mBAAmB,EAAE,MAAM,2BAA2B,CAAC;AAGhE,MAAM,CAAC,IAAM,wBAAwB,GAAuB,UAAE,EAAU,EAAE,EAAU,EAAE,EAAU;IAC/F,IAAI,CAAC,IAAI,EAAE,EAAG;QACb,OAAO,+CAA6C,EAAE,SAAI,EAAE,SAAI,EAAE,SAAM,CAAC;KACzE;SAAM,IAAI,CAAC,IAAI,EAAE,EAAG;QACpB,OAAO,8CAA4C,EAAE,SAAI,EAAE,SAAI,EAAE,SAAM,CAAC;KACxE;SAAM;QACN,OAAO,yDAAuD,EAAE,SAAI,EAAE,SAAI,EAAE,SAAM,CAAC;KACnF;AACF,CAAC,CAAC;AAEF,MAAM,CAAC,IAAM,qBAAqB,GAAuB,UAAE,EAAU,EAAE,EAAU,EAAE,EAAU;IAC5F,OAAO,aAAW,KAAK,CAAC,CAAE,EAAE,GAAG,EAAE,CAAE,GAAG,CAAC,CAAC,gCAA2B,EAAE,SAAI,EAAE,SAAI,EAAE,SAAM,CAAC;AACzF,CAAC,CAAC;AAEF,MAAM,CAAC,IAAM,uBAAuB,GAAuB,UAAE,EAAU,EAAE,EAAU,EAAE,EAAU;IAC9F,OAAO,qCAAmC,EAAE,SAAI,EAAE,SAAI,EAAE,SAAM,CAAC;AAChE,CAAC,CAAC;AASF;IAAA;IA+BA,CAAC;IA1BiB,+BAAc,GAA/B,UAAiC,OAAoC;QACpE,IAAM,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;QAC5B,IAAI,KAAK,EAAG;YACX,OAAO;gBACN,GAAG,EAAE,CAAE,KAAK,CAAC,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAE;gBACjD,GAAG,EAAE,CAAE,KAAK,CAAC,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAE;gBACjD,QAAQ,EAAE,CAAE,KAAK,CAAC,QAAQ,IAAI,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAE;aACrE,CAAC;SACF;aAAM;YACN,OAAO;gBACN,GAAG,EAAE,IAAI,CAAC,GAAG;gBACb,GAAG,EAAE,IAAI,CAAC,GAAG;gBACb,QAAQ,EAAE,IAAI,CAAC,QAAQ;aACvB,CAAC;SACF;IACF,CAAC;IAEM,qBAAI,GAAX,UAAa,OAAoC;QAChD,OAAO,IAAI,mBAAmB,CAAC;YAC9B,MAAM,EAAE,OAAO,CAAC,MAAM;YACtB,OAAO,EAAE,OAAO,CAAC,OAAO,IAAI,uBAAuB;YACnD,OAAO,EAAE,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO;YACpC,UAAU,EAAE,OAAO,CAAC,UAAU,IAAI,eAAe,CAAC,OAAO;YACzD,KAAK,EAAE,IAAI,CAAC,cAAc,CAAE,OAAO,CAAE;SACrC,CAAC,CAAC;IACJ,CAAC;IA7BgB,oBAAG,GAAW,CAAC,CAAC;IAChB,oBAAG,GAAW,EAAE,CAAC;IACjB,yBAAQ,GAAW,GAAG,CAAC;IA4BzC,uBAAC;CAAA,AA/BD,IA+BC;SA/BY,gBAAgB","sourcesContent":["/*\r\n * Copyright (C) 2019 Toshiba Corporation\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { DDiagramCanvasBase } from \"./d-diagram-canvas-base\";\r\nimport { DMapCoordinate } from \"./d-map-coordinate\";\r\nimport { DMapCoordinates } from \"./d-map-coordinates\";\r\nimport { DMapTilePyramid, DMapTilePyramidPlaneOptions } from \"./d-map-tile-pyramid\";\r\nimport { DMapTilePyramidImpl } from \"./d-map-tile-pyramid-impl\";\r\nimport { DMapTileUrlBuilder } from \"./d-map-tile-url-builder\";\r\n\r\nexport const DMapTileUrlBuilderKokudo: DMapTileUrlBuilder = ( tz: number, tx: number, ty: number ): string => {\r\n\tif( 5 <= tz ) {\r\n\t\treturn `https://cyberjapandata.gsi.go.jp/xyz/pale/${tz}/${tx}/${ty}.png`;\r\n\t} else if( 2 <= tz ) {\r\n\t\treturn `https://cyberjapandata.gsi.go.jp/xyz/std/${tz}/${tx}/${ty}.png`;\r\n\t} else {\r\n\t\treturn `https://cyberjapandata.gsi.go.jp/xyz/earthhillshade/${tz}/${tx}/${ty}.png`;\r\n\t}\r\n};\r\n\r\nexport const DMapTileUrlBuilderOsm: DMapTileUrlBuilder = ( tz: number, tx: number, ty: number ): string => {\r\n\treturn `https://${\"abc\"[( tx + ty ) % 3]}.tile.openstreetmap.org/${tz}/${tx}/${ty}.png`;\r\n};\r\n\r\nexport const DMapTileUrlBuilderOsmfj: DMapTileUrlBuilder = ( tz: number, tx: number, ty: number ): string => {\r\n\treturn `https://j.tile.openstreetmap.jp/${tz}/${tx}/${ty}.png`;\r\n};\r\n\r\nexport interface DMapTilePyramidsFromOptions {\r\n\tcanvas: DDiagramCanvasBase<any, any>;\r\n\tbuilder?: DMapTileUrlBuilder;\r\n\tcoordinate?: DMapCoordinate;\r\n\tplane?: Partial<DMapTilePyramidPlaneOptions>;\r\n}\r\n\r\nexport class DMapTilePyramids {\r\n\tprotected static MIN: number = 0;\r\n\tprotected static MAX: number = 18;\r\n\tprotected static THROTTLE: number = 333;\r\n\r\n\tprotected static toPlaneOptions( options: DMapTilePyramidsFromOptions ) {\r\n\t\tconst plane = options.plane;\r\n\t\tif( plane ) {\r\n\t\t\treturn {\r\n\t\t\t\tmin: ( plane.min != null ? plane.min : this.MIN ),\r\n\t\t\t\tmax: ( plane.max != null ? plane.max : this.MAX ),\r\n\t\t\t\tthrottle: ( plane.throttle != null ? plane.throttle : this.THROTTLE )\r\n\t\t\t};\r\n\t\t} else {\r\n\t\t\treturn {\r\n\t\t\t\tmin: this.MIN,\r\n\t\t\t\tmax: this.MAX,\r\n\t\t\t\tthrottle: this.THROTTLE\r\n\t\t\t};\r\n\t\t}\r\n\t}\r\n\r\n\tstatic from( options: DMapTilePyramidsFromOptions ): DMapTilePyramid {\r\n\t\treturn new DMapTilePyramidImpl({\r\n\t\t\tcanvas: options.canvas,\r\n\t\t\tbuilder: options.builder || DMapTileUrlBuilderOsmfj,\r\n\t\t\tmapping: options.canvas.tile.mapping,\r\n\t\t\tcoordinate: options.coordinate || DMapCoordinates.DEFAULT,\r\n\t\t\tplane: this.toPlaneOptions( options )\r\n\t\t});\r\n\t}\r\n}\r\n"]}