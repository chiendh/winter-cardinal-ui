{"version":3,"file":"d-table-data-selection-impl.js","sourceRoot":"","sources":["../../../src/main/typescript/wcardinal/ui/d-table-data-selection-impl.ts"],"names":[],"mappings":"AAAA;;;GAGG;;AAEH,OAAO,EAAE,KAAK,EAAE,MAAM,SAAS,CAAC;AAEhC,OAAO,EAAmD,uBAAuB,EAAE,MAAM,0BAA0B,CAAC;AACpH,OAAO,EAAE,QAAQ,EAAE,MAAM,kBAAkB,CAAC;AAE5C,IAAM,UAAU,GAAG,UAAE,CAAoB,EAAE,CAAoB;IAC9D,OAAO,CAAC,CAAE,CAAC,CAAE,GAAG,CAAC,CAAE,CAAC,CAAE,CAAC;AACxB,CAAC,CAAC;AAMF;IAAkD,2CAAkB;IAKnE,iCAAa,MAA0C,EAAE,OAAoC;QAA7F,YACC,iBAAO,SAKP;QAHA,KAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,KAAI,CAAC,KAAK,GAAG,KAAI,CAAC,MAAM,CAAE,OAAO,CAAE,CAAC;QACpC,KAAI,CAAC,QAAQ,GAAG,IAAI,GAAG,EAAU,CAAC;;IACnC,CAAC;IAES,wCAAM,GAAhB,UAAkB,OAAoC;QACrD,OAAO,CAAE,OAAO,IAAI,OAAO,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC;YACzC,CAAE,QAAQ,CAAE,OAAO,CAAC,IAAI,CAAE,CAAC,CAAC,CAAC,uBAAuB,CAAE,OAAO,CAAC,IAAI,CAAE,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAE,CAAC,CAAC;YACvF,uBAAuB,CAAC,IAAI,CAC5B,CAAC;IACH,CAAC;IAED,sBAAI,yCAAI;aAAR;YACC,OAAO,IAAI,CAAC,KAAK,CAAC;QACnB,CAAC;;;OAAA;IAES,0CAAQ,GAAlB;QACC,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC;QACtB,IAAI,CAAC,IAAI,CAAE,QAAQ,EAAE,IAAI,CAAE,CAAC;IAC7B,CAAC;IAED,wCAAM,GAAN,UAAQ,QAAgB;QACvB,IAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC9B,IAAI,OAAO,CAAC,GAAG,CAAE,QAAQ,CAAE,EAAG;YAC7B,OAAO,CAAC,MAAM,CAAE,QAAQ,CAAE,CAAC;SAC3B;aAAM;YACN,OAAO,CAAC,GAAG,CAAE,QAAQ,CAAE,CAAC;SACxB;QACD,IAAI,CAAC,QAAQ,EAAE,CAAC;IACjB,CAAC;IAED,qCAAG,GAAH,UAAK,QAAgB;QACpB,IAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC9B,IAAM,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC;QAC7B,OAAO,CAAC,GAAG,CAAE,QAAQ,CAAE,CAAC;QACxB,IAAM,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC;QAC7B,IAAI,OAAO,KAAK,OAAO,EAAG;YACzB,IAAI,CAAC,QAAQ,EAAE,CAAC;SAChB;IACF,CAAC;IAED,sBAAI,0CAAK;aAAT;YACC,IAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC;YAC9B,IAAI,CAAC,GAAG,OAAO,CAAC,IAAI,EAAG;gBACtB,IAAI,QAAM,GAAW,GAAG,CAAC;gBACzB,OAAO,CAAC,OAAO,CAAC,UAAE,KAAa;oBAC9B,IAAI,QAAM,KAAK,QAAM,EAAG;wBACvB,QAAM,GAAG,KAAK,CAAC;qBACf;gBACF,CAAC,CAAC,CAAC;gBACH,OAAO,QAAM,CAAC;aACd;YACD,OAAO,IAAI,CAAC;QACb,CAAC;;;OAAA;IAED,sBAAI,yCAAI;aAAR;YACC,IAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC;YAC9B,IAAI,CAAC,GAAG,OAAO,CAAC,IAAI,EAAG;gBACtB,IAAI,QAAM,GAAW,CAAC,CAAC;gBACvB,OAAO,CAAC,OAAO,CAAC,UAAE,KAAa;oBAC9B,QAAM,GAAG,KAAK,CAAC;gBAChB,CAAC,CAAC,CAAC;gBACH,OAAO,QAAM,CAAC;aACd;YACD,OAAO,IAAI,CAAC;QACb,CAAC;;;OAAA;IAED,uCAAK,GAAL,UAAO,QAAgB;QACtB,IAAM,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC;QAC/B,IAAI,YAAY,IAAI,IAAI,EAAG;YAC1B,IAAI,CAAC,QAAQ,CAAE,YAAY,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,CAAE,CAAC;SACrD;IACF,CAAC;IAED,0CAAQ,GAAR,UAAU,IAAY,EAAE,WAAoB,EAAE,EAAU,EAAE,SAAkB;QAC3E,IAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC9B,IAAM,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC;QAC7B,IAAI,IAAI,GAAG,EAAE,EAAG;YACf,KAAK,IAAI,CAAC,GAAG,IAAI,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,GAAG,EAAE,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,IAAI,EAAE,EAAE,CAAC,EAAG;gBAC3F,OAAO,CAAC,GAAG,CAAE,CAAC,CAAE,CAAC;aACjB;SACD;aAAM;YACN,KAAK,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,GAAG,IAAI,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,IAAI,EAAE,EAAE,CAAC,EAAG;gBAC3F,OAAO,CAAC,GAAG,CAAE,CAAC,CAAE,CAAC;aACjB;SACD;QACD,IAAM,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC;QAC7B,IAAI,OAAO,KAAK,OAAO,EAAG;YACzB,IAAI,CAAC,QAAQ,EAAE,CAAC;SAChB;IACF,CAAC;IAED,wCAAM,GAAN,UAAQ,UAAoB;QAC3B,IAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC9B,IAAM,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC;QAC7B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,IAAI,GAAG,UAAU,CAAC,MAAM,EAAE,CAAC,GAAG,IAAI,EAAE,EAAE,CAAC,EAAG;YACzD,OAAO,CAAC,GAAG,CAAE,UAAU,CAAE,CAAC,CAAE,CAAE,CAAC;SAC/B;QACD,IAAM,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC;QAC7B,IAAI,OAAO,KAAK,OAAO,EAAG;YACzB,IAAI,CAAC,QAAQ,EAAE,CAAC;SAChB;IACF,CAAC;IAED,0CAAQ,GAAR,UAAU,QAAgB;QACzB,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAE,QAAQ,CAAE,CAAC;IACtC,CAAC;IAED,wCAAM,GAAN,UAAQ,QAAgB;QACvB,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAE,QAAQ,CAAE,EAAG;YACtC,IAAI,CAAC,QAAQ,EAAE,CAAC;SAChB;IACF,CAAC;IAED,uCAAK,GAAL;QACC,IAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC9B,IAAI,CAAC,GAAG,OAAO,CAAC,IAAI,EAAG;YACtB,OAAO,CAAC,KAAK,EAAE,CAAC;YAChB,IAAI,CAAC,QAAQ,EAAE,CAAC;SAChB;IACF,CAAC;IAED,6CAAW,GAAX,UAAa,QAAgB;QAC5B,IAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC9B,IAAI,CAAE,OAAO,CAAC,GAAG,CAAE,QAAQ,CAAE,IAAI,OAAO,CAAC,IAAI,KAAK,CAAC,EAAG;YACrD,OAAO,CAAC,KAAK,EAAE,CAAC;YAChB,OAAO,CAAC,GAAG,CAAE,QAAQ,CAAE,CAAC;YACxB,IAAI,CAAC,QAAQ,EAAE,CAAC;SAChB;IACF,CAAC;IAED,gDAAc,GAAd,UAAgB,UAAoB;QACnC,IAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC9B,IAAI,CAAC,GAAG,OAAO,CAAC,IAAI,IAAI,CAAC,GAAG,UAAU,CAAC,MAAM,EAAG;YAC/C,OAAO,CAAC,KAAK,EAAE,CAAC;YAChB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,IAAI,GAAG,UAAU,CAAC,MAAM,EAAE,CAAC,GAAG,IAAI,EAAE,EAAE,CAAC,EAAG;gBACzD,OAAO,CAAC,GAAG,CAAE,UAAU,CAAE,CAAC,CAAE,CAAE,CAAC;aAC/B;YACD,IAAI,CAAC,QAAQ,EAAE,CAAC;SAChB;IACF,CAAC;IAED,uCAAK,GAAL,UAAO,QAAgB,EAAE,MAAc;QACtC,IAAM,OAAO,GAAa,EAAE,CAAC;QAC7B,IAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC9B,OAAO,CAAC,OAAO,CAAC,UAAE,KAAa;YAC9B,IAAI,QAAQ,IAAI,KAAK,EAAG;gBACvB,OAAO,CAAC,IAAI,CAAE,KAAK,CAAE,CAAC;aACtB;QACF,CAAC,CAAC,CAAC;QACH,IAAM,aAAa,GAAG,OAAO,CAAC,MAAM,CAAC;QACrC,IAAI,CAAC,GAAG,aAAa,EAAG;YACvB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,IAAI,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,GAAG,IAAI,EAAE,EAAE,CAAC,EAAG;gBACtD,OAAO,CAAC,MAAM,CAAE,OAAO,CAAE,CAAC,CAAE,CAAE,CAAC;aAC/B;YACD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,IAAI,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,GAAG,IAAI,EAAE,EAAE,CAAC,EAAG;gBACtD,OAAO,CAAC,GAAG,CAAE,OAAO,CAAE,CAAC,CAAE,GAAG,MAAM,CAAE,CAAC;aACrC;YACD,IAAI,CAAC,QAAQ,EAAE,CAAC;SAChB;IACF,CAAC;IAED,sCAAI,GAAJ;QACC,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;IAC3B,CAAC;IAED,yCAAO,GAAP;QACC,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,KAAK,CAAC,CAAC;IACjC,CAAC;IAMD,sBAAI,4CAAO;QAJX;;;WAGG;aACH;YACC,IAAM,MAAM,GAAa,EAAE,CAAC;YAC5B,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAE,KAAa;gBACpC,MAAM,CAAC,IAAI,CAAE,KAAK,CAAE,CAAC;YACtB,CAAC,CAAC,CAAC;YACH,OAAO,MAAM,CAAC;QACf,CAAC;;;OAAA;IAMD,sBAAI,yCAAI;QAJR;;;WAGG;aACH;YACC,IAAM,MAAM,GAAU,EAAE,CAAC;YACzB,IAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC;YAC5B,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAE,KAAa;gBACpC,MAAM,CAAC,IAAI,CAAE,MAAM,CAAC,GAAG,CAAE,KAAK,CAAG,CAAE,CAAC;YACrC,CAAC,CAAC,CAAC;YACH,OAAO,MAAM,CAAC;QACf,CAAC;;;OAAA;IAED;;;OAGG;IACH,yCAAO,GAAP;QACC,IAAM,MAAM,GAA2B,EAAE,CAAC;QAC1C,IAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC;QAC5B,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAE,KAAa;YACpC,MAAM,CAAC,IAAI,CAAC,CAAE,KAAK,EAAE,MAAM,CAAC,GAAG,CAAE,KAAK,CAAG,CAAE,CAAC,CAAC;QAC9C,CAAC,CAAC,CAAC;QACH,OAAO,MAAM,CAAC;IACf,CAAC;IAED;;OAEG;IACH,+CAAa,GAAb;QACC,OAAO,IAAI,CAAC,OAAO,EAAE,CAAC,IAAI,CAAE,UAAU,CAAE,CAAC;IAC1C,CAAC;IAED,0CAAQ,GAAR;QACC,IAAM,MAAM,GAA2B,EAAE,CAAC;QAC1C,IAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC;QAC5B,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAE,KAAa;YACpC,MAAM,CAAE,KAAK,CAAE,GAAG,MAAM,CAAC,GAAG,CAAE,KAAK,CAAG,CAAC;QACxC,CAAC,CAAC,CAAC;QACH,OAAO,MAAM,CAAC;IACf,CAAC;IAED,uCAAK,GAAL;QACC,IAAM,MAAM,GAAqB,IAAI,GAAG,EAAe,CAAC;QACxD,IAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC;QAC5B,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAE,KAAa;YACpC,MAAM,CAAC,GAAG,CAAE,KAAK,EAAE,MAAM,CAAC,GAAG,CAAE,KAAK,CAAG,CAAE,CAAC;QAC3C,CAAC,CAAC,CAAC;QACH,OAAO,MAAM,CAAC;IACf,CAAC;IACF,8BAAC;AAAD,CAAC,AAhPD,CAAkD,KAAK,CAAC,YAAY,GAgPnE","sourcesContent":["/*\r\n * Copyright (C) 2019 Toshiba Corporation\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { utils } from \"pixi.js\";\r\nimport { DTableData } from \"./d-table-data\";\r\nimport { DTableDataSelection, DTableDataSelectionOptions, DTableDataSelectionType } from \"./d-table-data-selection\";\r\nimport { isString } from \"./util/is-string\";\r\n\r\nconst COMPARATOR = ( a: [number, unknown], b: [number, unknown] ): number => {\r\n\treturn a[ 0 ] - b[ 0 ];\r\n};\r\n\r\nexport interface DTableDataSelectionImplParent<ROW> extends DTableData<ROW> {\r\n\tupdate(): void;\r\n}\r\n\r\nexport class DTableDataSelectionImpl<ROW> extends utils.EventEmitter implements DTableDataSelection<ROW> {\r\n\tprotected _parent: DTableDataSelectionImplParent<ROW>;\r\n\tprotected _type: DTableDataSelectionType;\r\n\tprotected _indices: Set<number>;\r\n\r\n\tconstructor( parent: DTableDataSelectionImplParent<ROW>, options?: DTableDataSelectionOptions ) {\r\n\t\tsuper();\r\n\r\n\t\tthis._parent = parent;\r\n\t\tthis._type = this.toType( options );\r\n\t\tthis._indices = new Set<number>();\r\n\t}\r\n\r\n\tprotected toType( options?: DTableDataSelectionOptions ): DTableDataSelectionType {\r\n\t\treturn ( options && options.type != null ?\r\n\t\t\t( isString( options.type ) ? DTableDataSelectionType[ options.type ] : options.type ) :\r\n\t\t\tDTableDataSelectionType.NONE\r\n\t\t);\r\n\t}\r\n\r\n\tget type(): DTableDataSelectionType {\r\n\t\treturn this._type;\r\n\t}\r\n\r\n\tprotected onChange(): void {\r\n\t\tthis._parent.update();\r\n\t\tthis.emit( \"change\", this );\r\n\t}\r\n\r\n\ttoggle( rowIndex: number ): void {\r\n\t\tconst indices = this._indices;\r\n\t\tif( indices.has( rowIndex ) ) {\r\n\t\t\tindices.delete( rowIndex );\r\n\t\t} else {\r\n\t\t\tindices.add( rowIndex );\r\n\t\t}\r\n\t\tthis.onChange();\r\n\t}\r\n\r\n\tadd( rowIndex: number ): void {\r\n\t\tconst indices = this._indices;\r\n\t\tconst oldSize = indices.size;\r\n\t\tindices.add( rowIndex );\r\n\t\tconst newSize = indices.size;\r\n\t\tif( oldSize !== newSize ) {\r\n\t\t\tthis.onChange();\r\n\t\t}\r\n\t}\r\n\r\n\tget first(): number | null {\r\n\t\tconst indices = this._indices;\r\n\t\tif( 0 < indices.size ) {\r\n\t\t\tlet result: number = NaN;\r\n\t\t\tindices.forEach(( index: number ): void => {\r\n\t\t\t\tif( result !== result ) {\r\n\t\t\t\t\tresult = index;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\treturn result;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tget last(): number | null {\r\n\t\tconst indices = this._indices;\r\n\t\tif( 0 < indices.size ) {\r\n\t\t\tlet result: number = 0;\r\n\t\t\tindices.forEach(( index: number ): void => {\r\n\t\t\t\tresult = index;\r\n\t\t\t});\r\n\t\t\treturn result;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\taddTo( rowIndex: number ): void {\r\n\t\tconst lastRowIndex = this.last;\r\n\t\tif( lastRowIndex != null ) {\r\n\t\t\tthis.addRange( lastRowIndex, false, rowIndex, true );\r\n\t\t}\r\n\t}\r\n\r\n\taddRange( from: number, includeFrom: boolean, to: number, includeTo: boolean ): void {\r\n\t\tconst indices = this._indices;\r\n\t\tconst oldSize = indices.size;\r\n\t\tif( from < to ) {\r\n\t\t\tfor( let i = from + (includeFrom ? 0 : 1), imax = to + (includeTo ? 1 : 0); i < imax; ++i ) {\r\n\t\t\t\tindices.add( i );\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tfor( let i = to + (includeTo ? 0 : 1), imax = from + (includeFrom ? 1 : 0); i < imax; ++i ) {\r\n\t\t\t\tindices.add( i );\r\n\t\t\t}\r\n\t\t}\r\n\t\tconst newSize = indices.size;\r\n\t\tif( oldSize !== newSize ) {\r\n\t\t\tthis.onChange();\r\n\t\t}\r\n\t}\r\n\r\n\taddAll( rowIndices: number[] ): void {\r\n\t\tconst indices = this._indices;\r\n\t\tconst oldSize = indices.size;\r\n\t\tfor( let i = 0, imax = rowIndices.length; i < imax; ++i ) {\r\n\t\t\tindices.add( rowIndices[ i ] );\r\n\t\t}\r\n\t\tconst newSize = indices.size;\r\n\t\tif( oldSize !== newSize ) {\r\n\t\t\tthis.onChange();\r\n\t\t}\r\n\t}\r\n\r\n\tcontains( rowIndex: number ): boolean {\r\n\t\treturn this._indices.has( rowIndex );\r\n\t}\r\n\r\n\tremove( rowIndex: number ): void {\r\n\t\tif( this._indices.delete( rowIndex ) ) {\r\n\t\t\tthis.onChange();\r\n\t\t}\r\n\t}\r\n\r\n\tclear(): void {\r\n\t\tconst indices = this._indices;\r\n\t\tif( 0 < indices.size ) {\r\n\t\t\tindices.clear();\r\n\t\t\tthis.onChange();\r\n\t\t}\r\n\t}\r\n\r\n\tclearAndAdd( rowIndex: number ): void {\r\n\t\tconst indices = this._indices;\r\n\t\tif( ! indices.has( rowIndex ) || indices.size !== 1 ) {\r\n\t\t\tindices.clear();\r\n\t\t\tindices.add( rowIndex );\r\n\t\t\tthis.onChange();\r\n\t\t}\r\n\t}\r\n\r\n\tclearAndAddAll( rowIndices: number[] ): void {\r\n\t\tconst indices = this._indices;\r\n\t\tif( 0 < indices.size || 0 < rowIndices.length ) {\r\n\t\t\tindices.clear();\r\n\t\t\tfor( let i = 0, imax = rowIndices.length; i < imax; ++i ) {\r\n\t\t\t\tindices.add( rowIndices[ i ] );\r\n\t\t\t}\r\n\t\t\tthis.onChange();\r\n\t\t}\r\n\t}\r\n\r\n\tshift( rowIndex: number, amount: number ): void {\r\n\t\tconst shifted: number[] = [];\r\n\t\tconst indices = this._indices;\r\n\t\tindices.forEach(( index: number ): void => {\r\n\t\t\tif( rowIndex <= index ) {\r\n\t\t\t\tshifted.push( index );\r\n\t\t\t}\r\n\t\t});\r\n\t\tconst shiftedLength = shifted.length;\r\n\t\tif( 0 < shiftedLength ) {\r\n\t\t\tfor( let i = 0, imax = shifted.length; i < imax; ++i ) {\r\n\t\t\t\tindices.delete( shifted[ i ] );\r\n\t\t\t}\r\n\t\t\tfor( let i = 0, imax = shifted.length; i < imax; ++i ) {\r\n\t\t\t\tindices.add( shifted[ i ] + amount );\r\n\t\t\t}\r\n\t\t\tthis.onChange();\r\n\t\t}\r\n\t}\r\n\r\n\tsize(): number {\r\n\t\treturn this._indices.size;\r\n\t}\r\n\r\n\tisEmpty(): boolean {\r\n\t\treturn this._indices.size === 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a copy of an index array of selected rows.\r\n\t * The order of indices is an insertion order.\r\n\t */\r\n\tget indices(): number[] {\r\n\t\tconst result: number[] = [];\r\n\t\tthis._indices.forEach(( index: number ): void => {\r\n\t\t\tresult.push( index );\r\n\t\t});\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a copy of an array of selected row value.\r\n\t * The order is an insertion order.\r\n\t */\r\n\tget rows(): ROW[] {\r\n\t\tconst result: ROW[] = [];\r\n\t\tconst parent = this._parent;\r\n\t\tthis._indices.forEach(( index: number ): void => {\r\n\t\t\tresult.push( parent.get( index )! );\r\n\t\t});\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an array of the (index, row value) pairs of selected rows.\r\n\t * The order of pairs is an insertion order.\r\n\t */\r\n\ttoArray(): Array<[ number, ROW ]> {\r\n\t\tconst result: Array<[ number, ROW ]> = [];\r\n\t\tconst parent = this._parent;\r\n\t\tthis._indices.forEach(( index: number ): void => {\r\n\t\t\tresult.push([ index, parent.get( index )! ]);\r\n\t\t});\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an sorted array of the (index, row value) pairs of selected rows.\r\n\t */\r\n\ttoSortedArray(): Array<[ number, ROW ]> {\r\n\t\treturn this.toArray().sort( COMPARATOR );\r\n\t}\r\n\r\n\ttoObject(): {[index: number]: ROW} {\r\n\t\tconst result: {[index: number]: ROW} = {};\r\n\t\tconst parent = this._parent;\r\n\t\tthis._indices.forEach(( index: number ): void => {\r\n\t\t\tresult[ index ] = parent.get( index )!;\r\n\t\t});\r\n\t\treturn result;\r\n\t}\r\n\r\n\ttoMap(): Map<number, ROW> {\r\n\t\tconst result: Map<number, ROW> = new Map<number, ROW>();\r\n\t\tconst parent = this._parent;\r\n\t\tthis._indices.forEach(( index: number ): void => {\r\n\t\t\tresult.set( index, parent.get( index )! );\r\n\t\t});\r\n\t\treturn result;\r\n\t}\r\n}\r\n"]}