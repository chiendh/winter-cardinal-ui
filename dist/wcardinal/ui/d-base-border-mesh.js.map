{"version":3,"file":"d-base-border-mesh.js","sourceRoot":"","sources":["../../../src/main/typescript/wcardinal/ui/d-base-border-mesh.ts"],"names":[],"mappings":"AAAA;;;GAGG;;AAEH,OAAO,EAAE,IAAI,EAAE,YAAY,EAAqB,MAAM,SAAS,CAAC;AAChE,OAAO,EAAE,uBAAuB,EAAE,MAAM,+BAA+B,CAAC;AAIxE;IAAqC,mCAAI;IAIxC,yBAAa,OAAgB,EAAE,UAAkB,EAAE,UAAuB,EAAE,UAAuB;eAClG,kBACC,IAAI,uBAAuB,CAAE,OAAO,EAAE,GAAG,EAAE,GAAG,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,CAAE,EACpF,IAAI,YAAY,CAAE,OAAO,CAAE,CAC3B;IACF,CAAC;IAED,sBAAI,oCAAO;aAAX;YACC,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;QAC5B,CAAC;aAED,UAAa,OAAgB;YAC5B,IAAI,IAAI,CAAC,MAAM,CAAC,OAAO,KAAK,OAAO,EAAG;gBACrC,IAAI,CAAC,MAAM,CAAC,OAAO,GAAG,OAAO,CAAC;gBAC9B,IAAI,CAAC,QAAQ,CAAC,OAAO,GAAG,OAAO,CAAC;aAChC;QACF,CAAC;;;OAPA;IASD,sBAAI,kCAAK;aAAT;YACC,OAAO,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC;QAC5B,CAAC;aAED,UAAW,KAAa;YACvB,IAAI,CAAC,QAAQ,CAAC,KAAK,GAAG,KAAK,CAAC;QAC7B,CAAC;;;OAJA;IAMD,sBAAI,mCAAM;aAAV;YACC,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;QAC7B,CAAC;aAED,UAAY,MAAc;YACzB,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,MAAM,CAAC;QAC/B,CAAC;;;OAJA;IAMD,sBAAI,uCAAU;aAAd;YACC,OAAO,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC;QACjC,CAAC;aAED,UAAgB,UAAkB;YACjC,IAAI,CAAC,QAAQ,CAAC,UAAU,GAAG,UAAU,CAAC;QACvC,CAAC;;;OAJA;IAMD,sBAAI,uCAAU;aAAd;YACC,OAAO,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC;QACjC,CAAC;aAED,UAAgB,UAAuB;YACtC,IAAI,CAAC,QAAQ,CAAC,UAAU,GAAG,UAAU,CAAC;QACvC,CAAC;;;OAJA;IAMD,sBAAI,uCAAU;aAAd;YACC,OAAO,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC;QACjC,CAAC;aAED,UAAgB,UAAuB;YACtC,IAAI,CAAC,QAAQ,CAAC,UAAU,GAAG,UAAU,CAAC;QACvC,CAAC;;;OAJA;IAMS,iCAAO,GAAjB,UAAmB,QAAkB;QACpC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC;QACvB,iBAAM,OAAO,YAAE,QAAQ,CAAE,CAAC;IAC3B,CAAC;IAED,gCAAM,GAAN;QACC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC;IACxB,CAAC;IACF,sBAAC;AAAD,CAAC,AAtED,CAAqC,IAAI,GAsExC","sourcesContent":["/*\r\n * Copyright (C) 2019 Toshiba Corporation\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { Mesh, MeshMaterial, Renderer, Texture } from \"pixi.js\";\r\nimport { DBaseBorderMeshGeometry } from \"./d-base-border-mesh-geometry\";\r\nimport { DBorderMask } from \"./d-border-mask\";\r\nimport { DCornerMask } from \"./d-corner-mask\";\r\n\r\nexport class DBaseBorderMesh extends Mesh {\r\n\tgeometry!: DBaseBorderMeshGeometry;\r\n\tshader!: MeshMaterial;\r\n\r\n\tconstructor( texture: Texture, borderSize: number, borderMask: DBorderMask, cornerMask: DCornerMask ) {\r\n\t\tsuper(\r\n\t\t\tnew DBaseBorderMeshGeometry( texture, 100, 100, borderSize, borderMask, cornerMask ),\r\n\t\t\tnew MeshMaterial( texture )\r\n\t\t);\r\n\t}\r\n\r\n\tget texture() {\r\n\t\treturn this.shader.texture;\r\n\t}\r\n\r\n\tset texture( texture: Texture ) {\r\n\t\tif( this.shader.texture !== texture ) {\r\n\t\t\tthis.shader.texture = texture;\r\n\t\t\tthis.geometry.texture = texture;\r\n\t\t}\r\n\t}\r\n\r\n\tget width(): number {\r\n\t\treturn this.geometry.width;\r\n\t}\r\n\r\n\tset width( width: number ) {\r\n\t\tthis.geometry.width = width;\r\n\t}\r\n\r\n\tget height(): number {\r\n\t\treturn this.geometry.height;\r\n\t}\r\n\r\n\tset height( height: number ) {\r\n\t\tthis.geometry.height = height;\r\n\t}\r\n\r\n\tget borderSize(): number {\r\n\t\treturn this.geometry.borderSize;\r\n\t}\r\n\r\n\tset borderSize( borderSize: number ) {\r\n\t\tthis.geometry.borderSize = borderSize;\r\n\t}\r\n\r\n\tget borderMask(): DBorderMask {\r\n\t\treturn this.geometry.borderMask;\r\n\t}\r\n\r\n\tset borderMask( borderMask: DBorderMask ) {\r\n\t\tthis.geometry.borderMask = borderMask;\r\n\t}\r\n\r\n\tget cornerMask(): DCornerMask {\r\n\t\treturn this.geometry.cornerMask;\r\n\t}\r\n\r\n\tset cornerMask( cornerMask: DCornerMask ) {\r\n\t\tthis.geometry.cornerMask = cornerMask;\r\n\t}\r\n\r\n\tprotected _render( renderer: Renderer ): void {\r\n\t\tthis.geometry.update();\r\n\t\tsuper._render( renderer );\r\n\t}\r\n\r\n\tupdate(): void {\r\n\t\tthis.geometry.update();\r\n\t}\r\n}\r\n"]}