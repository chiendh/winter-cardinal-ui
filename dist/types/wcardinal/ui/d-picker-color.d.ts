import { interaction, Point, Sprite, Texture } from "pixi.js";
import InteractionEvent = interaction.InteractionEvent;
import { DBase, DBaseOptions, DThemeBase } from "./d-base";
import { DColorAndAlpha } from "./d-color";
import { DInputRealAndLabel } from "./d-input-real-and-label";
import { DInputTextAndLabel } from "./d-input-text-and-label";
import { DPickerColorAndAlpha } from "./d-picker-color-and-alpha";
import { DPickerColorRecent } from "./d-picker-color-recent";
export interface DPickerColorOptions<THEME extends DThemePickerColor = DThemePickerColor> extends DBaseOptions<THEME> {
}
export interface DThemePickerColor extends DThemeBase {
    getMainWidth(): number;
    getMainHeight(): number;
    getMainTexture(): Texture;
    getMainPointerTexture(): Texture;
    getMainPointerColor(): number;
    getMainPointerAlpha(): number;
    getBaseHeight(): number;
    getBaseMargin(): number;
    getBaseTexture(): Texture;
    getBasePointerTexture(): Texture;
    getBasePointerColor(): number;
    getBasePointerAlpha(): number;
    getAlphaHeight(): number;
    getAlphaMargin(): number;
    getAlphaTexture(): Texture;
    getAlphaCheckerboardTexture(): Texture;
    getAlphaPointerTexture(): Texture;
    getAlphaPointerColor(): number;
    getAlphaPointerAlpha(): number;
    getRecentMargin(): number;
    getRecentColorMargin(): number;
    getRecentColorWidth(): number;
    getRecentColorHeight(): number;
    getRecentColorCount(): number;
    getRecentCheckerboardTexture(): Texture;
    getRecents(): DColorAndAlpha[];
    getInputMargin(): number;
    getInputLabelWidth(): number;
    getSampleWidth(): number;
    getSampleHeight(): number;
    getSampleCheckerboardTexture(): Texture;
}
export declare class DPickerColor<THEME extends DThemePickerColor = DThemePickerColor, OPTIONS extends DPickerColorOptions<THEME> = DPickerColorOptions<THEME>> extends DBase<THEME, OPTIONS> {
    protected static RECENT_COLORS: DPickerColorRecent | null;
    protected _mainBaseSprite: Sprite;
    protected _mainSprite: Sprite;
    protected _mainPointerSprite: Sprite;
    protected _pointerPoint: Point;
    protected _onMainMoveBound: (e: InteractionEvent) => void;
    protected _onMainUpBound: (e: InteractionEvent) => void;
    protected _baseSprite: Sprite;
    protected _basePointerSprite: Sprite;
    protected _onBaseMoveBound: (e: InteractionEvent) => void;
    protected _onBaseUpBound: (e: InteractionEvent) => void;
    protected _alphaCheckerboardSprite: Sprite;
    protected _alphaSprite: Sprite;
    protected _alphaPointerSprite: Sprite;
    protected _onAlphaMoveBound: (e: InteractionEvent) => void;
    protected _onAlphaUpBound: (e: InteractionEvent) => void;
    protected _recentColorSprites: Sprite[];
    protected _recent: DPickerColorRecent;
    protected _inputAndLabelColor: DInputTextAndLabel;
    protected _inputAndLabelAlpha: DInputRealAndLabel;
    protected _sampleCurrentCheckerboardSprite: Sprite;
    protected _sampleCurrentSprite: Sprite;
    protected _sampleNewCheckerboardSprite: Sprite;
    protected _sampleNewSprite: Sprite;
    protected _current: DColorAndAlpha;
    protected _currentPicker: DPickerColorAndAlpha;
    protected _base: number;
    protected _new: DColorAndAlpha;
    protected _newPicker: DPickerColorAndAlpha;
    get current(): DColorAndAlpha;
    get new(): DColorAndAlpha;
    get recent(): DPickerColorRecent;
    protected init(options?: OPTIONS): void;
    protected onMainDown(e: InteractionEvent): void;
    protected onMainMove(e: InteractionEvent): void;
    protected onMainUp(e: InteractionEvent): void;
    protected toMainHex(b: number, w0: number, w1: number, shift: number): number;
    protected toMainColor(base: number, tx: number, ty: number, width: number, height: number): number;
    protected onMainPick(global: Point): void;
    protected setColorCurrent(color: number): void;
    protected setAlphaCurrent(alpha: number): void;
    protected setColorNew(color: number): void;
    protected onColorNew(color: number): void;
    protected onBaseDown(e: InteractionEvent): void;
    protected onBaseMove(e: InteractionEvent): void;
    protected onBaseUp(e: InteractionEvent): void;
    protected toBaseHex(t: number, shift: number): number;
    protected toBaseColor(t: number): number;
    protected onBasePick(global: Point): void;
    protected setColorBase(h: number): void;
    protected onColorBase(color: number): void;
    protected onAlphaDown(e: InteractionEvent): void;
    protected onAlphaMove(e: InteractionEvent): void;
    protected onAlphaUp(e: InteractionEvent): void;
    protected onAlphaPick(global: Point): void;
    protected setAlphaNew(alpha: number): void;
    protected onAlphaNew(alpha: number): void;
    protected onRecentChange(): void;
    protected getType(): string;
}
