import { Matrix, Point, Rectangle, Renderer } from "pixi.js";
import { DApplicationLayerLike } from "../../d-application-layer-like";
import { EShape } from "../e-shape";
declare type OnChange = (shape: EShape, value: string) => void;
declare type OnInput = (shape: EShape, value: string) => void;
export declare class EShapeActionRuntimeMiscInputData {
    protected input: HTMLInputElement | null;
    protected shape: EShape | null;
    protected value: string;
    protected onChange?: OnChange;
    protected onInput?: OnInput;
    protected point: Point;
    protected rect: Rectangle;
    protected _onInputKeyDownBound: (e: KeyboardEvent) => void;
    protected _onInputBlurBound: (e: FocusEvent) => void;
    protected _updateInputBound: () => void;
    protected _onInputChangeBound: (e: Event) => void;
    protected _onInputInputBound: (e: Event) => void;
    protected _updateInputBoundRenderer: Renderer | null;
    constructor();
    protected getInput(layer: DApplicationLayerLike): HTMLInputElement | null;
    protected createInput(): HTMLInputElement;
    protected getInputType(): string;
    protected initInput(shape: EShape, input: HTMLInputElement, value: string): void;
    protected getInputStyleBackground(): string;
    protected getInputStyleBorder(): string;
    protected getInputStylePadding(shape: EShape, scale: number): string;
    protected getInputStyleOutline(): string;
    protected getInputStylePosition(rect: Rectangle, matrix: Matrix): string;
    protected getInputStyleText(shape: EShape, rect: Rectangle, scale: number): string;
    protected getInputStyleMargin(shape: EShape, rect: Rectangle, scale: number): string;
    protected getInputStyle(shape: EShape): string;
    protected onInputKeyDown(e: KeyboardEvent): void;
    protected onInputBlur(e: FocusEvent): void;
    protected onInputInput(e: Event): void;
    protected updateInput(): void;
    isShown(shape: EShape): boolean;
    show(newShape: EShape, value: string, onChange?: OnChange, onInput?: OnInput): void;
    hide(): void;
    onInputChange(): void;
}
export {};
