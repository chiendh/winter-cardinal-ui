import { EShapeResourceManagerDeserialization } from "../e-shape-resource-manager-deserialization";
import { EShapeResourceManagerSerialization } from "../e-shape-resource-manager-serialization";
import { EShapeTag } from "../e-shape-tag";
import { EShapeTagValue } from "../e-shape-tag-value";
import { EShapeTagValueRange } from "../e-shape-tag-value-range";
import { EShapeTagValueRangeImpl } from "./e-shape-tag-value-range-impl";
export declare class EShapeTagImpl implements EShapeTag {
    static RANGE_DUMMY: EShapeTagValueRangeImpl;
    static EMPTY_ARRAY: never[];
    protected _values: EShapeTagValue[];
    isChanged: boolean;
    inherited?: EShapeTagValue;
    constructor();
    get id(): string;
    get initial(): string;
    get format(): string;
    get range(): EShapeTagValueRange;
    get value(): unknown;
    set value(value: unknown);
    get nvalue(): number;
    get time(): number;
    set time(time: number);
    get values(): unknown[];
    set values(newValues: unknown[]);
    get times(): number[];
    set times(newTimes: number[]);
    get capacity(): number;
    set capacity(capacity: number);
    add(value: EShapeTagValue, index?: number): void;
    set(index: number, value: EShapeTagValue): EShapeTagValue | null;
    remove(index: number): void;
    indexOf(target: EShapeTagValue): number;
    get(index: number): EShapeTagValue | null;
    size(): number;
    swap(indexA: number, indexB: number): void;
    copy(target: EShapeTag): this;
    serialize(manager: EShapeResourceManagerSerialization): number;
    deserialize(target: number, manager: EShapeResourceManagerDeserialization): void;
}
