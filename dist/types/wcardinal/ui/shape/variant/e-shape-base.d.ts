import { DisplayObject, IPoint, Matrix, Point, Rectangle, Texture, utils } from "pixi.js";
import { DBaseState } from "../../d-base-state";
import { DDiagramSerializedItem } from "../../d-diagram-serialized";
import { EShapeAction } from "../action/e-shape-action";
import { EShape, EShapeCopyPart } from "../e-shape";
import { EShapeContainer } from "../e-shape-container";
import { EShapeCorner } from "../e-shape-corner";
import { EShapeEditor } from "../e-shape-editor";
import { EShapeFill } from "../e-shape-fill";
import { EShapeGradientLike } from "../e-shape-gradient";
import { EShapeLayout } from "../e-shape-layout";
import { EShapePoints } from "../e-shape-points";
import { EShapeResourceManagerSerialization } from "../e-shape-resource-manager-serialization";
import { EShapeRuntime } from "../e-shape-runtime";
import { EShapeStroke } from "../e-shape-stroke";
import { EShapeTag } from "../e-shape-tag";
import { EShapeText } from "../e-shape-text";
import { EShapeTransform } from "../e-shape-transform";
import { EShapeType } from "../e-shape-type";
import { EShapeUploaded } from "../e-shape-uploaded";
export declare abstract class EShapeBase extends utils.EventEmitter implements EShape {
    protected static WORK_RECT: Rectangle;
    id: string;
    readonly type: EShapeType;
    abstract readonly size: IPoint;
    abstract readonly fill: EShapeFill;
    abstract readonly stroke: EShapeStroke;
    readonly transform: EShapeTransform;
    abstract radius: number;
    abstract corner: EShapeCorner;
    points?: EShapePoints;
    image?: HTMLImageElement;
    imageSrc?: string;
    texture?: Texture;
    abstract gradient?: EShapeGradientLike;
    abstract readonly text: EShapeText;
    abstract readonly tag: EShapeTag;
    readonly action: EShapeAction;
    abstract cursor: string;
    interactive: boolean;
    shortcut?: string;
    title?: string;
    protected _visible: boolean;
    protected _onTransformChangeLock: number;
    protected _isOnTransformChanged: boolean;
    protected _uploadedUpdateLock: number;
    protected _isUploadedUpdated: boolean;
    protected _isUploadedUpdatedRecursively: boolean;
    protected _bounds?: Rectangle;
    protected _boundsTransformId: number;
    protected _boundsInternal?: Rectangle;
    protected _boundsInternalTransformId: number;
    protected _boundsLocal?: Rectangle;
    protected _boundsLocalTransformId: number;
    protected _state: DBaseState;
    protected _stateLocal: DBaseState;
    parent: EShapeContainer | EShape | null;
    children: EShape[];
    layout?: EShapeLayout;
    index: number;
    selected: boolean;
    reference: number;
    runtime?: EShapeRuntime;
    editor?: EShapeEditor;
    uploaded?: EShapeUploaded;
    constructor(type: EShapeType);
    protected newTransform(): EShapeTransform;
    onSizeChange(): void;
    onTransformChange(): void;
    protected onTransformChange_(): void;
    disallowOnTransformChange(): void;
    allowOnTransformChange(invokeOnTransformChange: boolean): void;
    onChildTransformChange(): void;
    disallowUploadedUpdate(): void;
    allowUploadedUpdate(): void;
    updateUploadedRecursively(): void;
    updateUploaded(): void;
    get root(): EShape;
    get visible(): boolean;
    set visible(visible: boolean);
    abstract clone(): EShape;
    toDirty(): void;
    attach(parent: EShapeContainer | EShape, at?: number): this;
    detach(): this;
    updateTransform(): void;
    serializeChildren(manager: EShapeResourceManagerSerialization): DDiagramSerializedItem[];
    serializeImage(manager: EShapeResourceManagerSerialization): number;
    serializeGradient(manager: EShapeResourceManagerSerialization): number;
    serialize(manager: EShapeResourceManagerSerialization): DDiagramSerializedItem;
    toLocalRect(point: IPoint, result: Rectangle): Rectangle;
    contains(point: Point): EShape | null;
    protected containsText(x: number, y: number, work: Point): EShape | null;
    protected containsChildren(x: number, y: number, work: Point): EShape | null;
    containsBBox(point: IPoint): boolean;
    containsAbs(x: number, y: number, ax: number, ay: number): boolean;
    containsAbsBBox(x: number, y: number, ax: number, ay: number): boolean;
    select(point: Point): boolean;
    toGlobal(position: IPoint, result: Point, skipUpdate?: boolean): Point;
    toLocal(position: IPoint, from?: DisplayObject, result?: Point, skipUpdate?: boolean): Point;
    getBounds(work: Point, skipUpdate: boolean, result: Rectangle): Rectangle;
    getBoundsInternal(work: Point, skipUpdate: boolean, result: Rectangle): Rectangle;
    getBoundsLocal(work: Point, skipUpdate: boolean, result: Rectangle): Rectangle;
    protected getBoundsSize(): IPoint;
    protected getBounds_(transform: Matrix, work: Point, result: Rectangle): Rectangle;
    destroy(): void;
    protected updateState(): void;
    protected mergeState(stateLocal: DBaseState, stateParent: DBaseState): DBaseState;
    protected onStateChange(newState: number, oldState: number): void;
    protected onParentStateChange(newStateParent: number, oldStateParent: number): void;
    getState(): DBaseState;
    setState(state: DBaseState, isOn: boolean): this;
    hasState(state: DBaseState): boolean;
    focus(): this;
    blur(): this;
    get hovered(): boolean;
    set hovered(isHovered: boolean);
    get active(): boolean;
    set active(isActive: boolean);
    get readonly(): boolean;
    set readonly(isReadOnly: boolean);
    get enabled(): boolean;
    get disabled(): boolean;
    set disabled(isDisabled: boolean);
    get dragging(): boolean;
    set dragging(isDragging: boolean);
    get focused(): boolean;
    set focused(focused: boolean);
    get focusedin(): boolean;
    get unfocusable(): boolean;
    set unfocusable(unforcusable: boolean);
    get clicked(): boolean;
    get pressed(): boolean;
    get down(): boolean;
    get up(): boolean;
    get shadowed(): boolean;
    onDblClick(e: MouseEvent): boolean;
    onShortcut(e: KeyboardEvent): void;
    onKeyDown(e: KeyboardEvent): boolean;
    onKeyUp(e: KeyboardEvent): boolean;
    update(time: number): void;
    updateRecursively(time: number): void;
    copy(source: EShape, part?: EShapeCopyPart): this;
}
