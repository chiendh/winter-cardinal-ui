import { Texture } from "pixi.js";
import { DeepPartial } from "../../util/deep-partial";
import { EShapeResourceManagerDeserialization } from "../e-shape-resource-manager-deserialization";
import { EShapeResourceManagerSerialization } from "../e-shape-resource-manager-serialization";
import { EShapeText, EShapeTextAtlas, EShapeTextLike, EShapeTextStyle, EShapeTextWeight } from "../e-shape-text";
import { EShapeTextAlign } from "../e-shape-text-align";
import { EShapeTextDirection } from "../e-shape-text-direction";
import { EShapeTextOffset } from "../e-shape-text-offset";
import { EShapeTextOutline } from "../e-shape-text-outline";
import { EShapeTextImplParent } from "./e-shape-text-impl-parent";
export declare class EShapeTextImpl implements EShapeText {
    protected _parent: EShapeTextImplParent;
    protected _enable: boolean;
    protected _value: string;
    protected _family: string;
    protected _color: number;
    protected _alpha: number;
    protected _size: number;
    protected _weight: EShapeTextWeight;
    readonly align: EShapeTextAlign;
    readonly offset: EShapeTextOffset;
    protected _style: EShapeTextStyle;
    readonly outline: EShapeTextOutline;
    readonly spacing: EShapeTextOffset;
    protected _direction: EShapeTextDirection;
    readonly padding: EShapeTextOffset;
    protected _clipping: boolean;
    texture?: Texture;
    atlas?: EShapeTextAtlas;
    world?: Float32Array;
    constructor(parent: EShapeTextImplParent, value: string, color: number, alpha: number, family: string, size: number);
    get enable(): boolean;
    set enable(enable: boolean);
    get value(): string;
    set value(value: string);
    get family(): string;
    set family(family: string);
    get color(): number;
    set color(color: number);
    get alpha(): number;
    set alpha(alpha: number);
    get size(): number;
    set size(size: number);
    get weight(): EShapeTextWeight;
    set weight(weight: EShapeTextWeight);
    get style(): EShapeTextStyle;
    set style(style: EShapeTextStyle);
    get direction(): EShapeTextDirection;
    set direction(direction: EShapeTextDirection);
    get clipping(): boolean;
    set clipping(clipping: boolean);
    copy(target?: DeepPartial<EShapeTextLike>): this;
    set(value?: string, color?: number, alpha?: number, family?: string, size?: number, weight?: EShapeTextWeight, style?: EShapeTextStyle, direction?: EShapeTextDirection, clipping?: boolean): this;
    toObject(): EShapeTextLike;
    serialize(manager: EShapeResourceManagerSerialization): number;
    deserialize(target: number, manager: EShapeResourceManagerDeserialization): void;
}
