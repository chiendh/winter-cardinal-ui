import { Buffer, Geometry, Renderer, Shader } from "pixi.js";
import { EShape } from "./e-shape";
import { EShapeBufferUnitBuilder } from "./e-shape-buffer-unit-builder";
import { EShapeRendererIterator } from "./e-shape-renderer-iterator";
import { EShapeUploaded } from "./e-shape-uploaded";
export declare class EShapeBuffer {
    vertices: Float32Array;
    protected _vertexCapacity: number;
    protected _vertexCount: number;
    protected _vertexBuffer: Buffer | null;
    clippings: Float32Array;
    protected _clippingBuffer: Buffer | null;
    steps: Float32Array;
    protected _stepBuffer: Buffer | null;
    colorFills: Float32Array;
    protected _colorFillBuffer: Buffer | null;
    colorStrokes: Float32Array;
    protected _colorStrokeBuffer: Buffer | null;
    uvs: Float32Array;
    protected _uvBuffer: Buffer | null;
    indices: Uint16Array | Uint32Array;
    protected _indexCapacity: number;
    protected _indexCount: number;
    indexCountRequested: number;
    protected _indexBuffer: Buffer | null;
    protected _renderer: Renderer;
    protected _geometry: Geometry | null;
    protected _builder: EShapeBufferUnitBuilder;
    constructor(ntriangles: number, renderer: Renderer);
    updateVertices(): void;
    updateClippings(): void;
    updateSteps(): void;
    updateColorFills(): void;
    updateColorStrokes(): void;
    updateUvs(): void;
    updateIndices(): void;
    protected getGeometry(): Geometry;
    upload(): void;
    render(shader: Shader): void;
    isCompatible(shape: EShape, uploaded: EShapeUploaded, vindex: number, iindex: number): boolean;
    update(iterator: EShapeRendererIterator, antialiasWeight: number, noMoreThanOne: boolean): boolean;
    check(vindex: number, ioffset: number, vcount: number, icount: number): boolean;
    destroy(): void;
}
