import { interaction, IPoint, Point, Rectangle } from "pixi.js";
import { DBase } from "./d-base";
import { DMouseModifier } from "./d-mouse-modifier";
import { DThemeView, DView, DViewChecker, DViewOptions } from "./d-view";
import { DViewDrag } from "./d-view-drag";
import { DViewDragImpl } from "./d-view-drag-impl";
import { DViewTargetPoint, DViewToTarget } from "./d-view-to-target";
import { DViewTransformImpl } from "./d-view-transform-impl";
import { UtilWheelEventDeltas } from "./util/util-wheel-event";
export declare class DViewImpl implements DView {
    protected _parent: DBase;
    protected _toTarget: DViewToTarget;
    protected _zoomPoint: Point;
    protected _zoomMin: number;
    protected _zoomMax: number;
    protected _zoomKeepRatio: boolean;
    protected _isWheelZoomEnabled: boolean;
    protected _wheelZoomSpeed: number;
    protected _wheelZoomModifier: DMouseModifier;
    protected _wheelZoomChecker: DViewChecker;
    protected _isDblClickZoomEnabled: boolean;
    protected _dblClickZoomSpeed: number;
    protected _dblClickZoomModifier: DMouseModifier;
    protected _dblClickZoomChecker: DViewChecker;
    protected _dblclickZoomDuration: number;
    protected _isWheelTranslationEnabled: boolean;
    protected _wheelTranslationSpeed: number;
    protected _wheelTranslationModifier: DMouseModifier;
    protected _wheelTranslationChecker: DViewChecker;
    protected _transform: DViewTransformImpl;
    protected _drag: DViewDragImpl;
    protected _workRect: Rectangle;
    constructor(parent: DBase, toTarget: DViewToTarget, options: DViewOptions | undefined);
    get drag(): DViewDrag;
    stop(): void;
    reset(duration?: number, stop?: boolean): void;
    fit(duration?: number, stop?: boolean): void;
    zoomIn(duration?: number, stop?: boolean): void;
    zoomOut(duration?: number, stop?: boolean): void;
    zoomAt(x: number, y: number, scaleX: number, scaleY: number, duration?: number, stop?: boolean): void;
    zoomAtGlobal(x: number, y: number, scaleX: number, scaleY: number, duration?: number, stop?: boolean): void;
    zoom(scaleX: number, scaleY: number, duration?: number, stop?: boolean): void;
    get scale(): DViewTargetPoint;
    set scale(scale: DViewTargetPoint);
    moveTo(x: number, y: number, duration?: number, stop?: boolean): void;
    get position(): DViewTargetPoint;
    set position(position: DViewTargetPoint);
    transform(x: number, y: number, scaleX: number, scaleY: number, duration?: number, stop?: boolean): void;
    toLocal(global: IPoint, local: IPoint, skipUpdate?: boolean): IPoint;
    toGlobal(local: IPoint, global: IPoint, skipUpdate?: boolean): IPoint;
    toNormalizedScale(scale: number): number;
    onWheel(e: WheelEvent, deltas: UtilWheelEventDeltas, global: Point): boolean;
    onDown(e: interaction.InteractionEvent): void;
    onDblClick(e: MouseEvent | TouchEvent, interactionManager: interaction.InteractionManager): boolean;
    protected toTheme(options?: DViewOptions): DThemeView | null;
    protected getThemeDefault(): DThemeView;
    protected getType(): string;
}
