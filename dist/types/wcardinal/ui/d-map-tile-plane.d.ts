import { Point, Renderer } from "pixi.js";
import { DBase } from "./d-base";
import { DMapCoordinate } from "./d-map-coordinate";
import { DMapTile } from "./d-map-tile";
import { DMapTileMappingInternal } from "./d-map-tile-mapping-internal";
import { DMapTileUrlBuilder } from "./d-map-tile-url-builder";
export declare class DMapTilePlane {
    protected static WORK: Point;
    protected readonly _parent: DBase;
    protected readonly _builder: DMapTileUrlBuilder;
    protected readonly _tz: number;
    protected _lon0: number;
    protected _lat0: number;
    protected _lon1: number;
    protected _lat1: number;
    protected readonly _tiles: Map<number, DMapTile>;
    protected _renderer?: Renderer;
    protected readonly _renderTileBound: (tile: DMapTile) => void;
    protected _txmin: number;
    protected _txmax: number;
    protected _tymin: number;
    protected _tymax: number;
    protected readonly _deleteTileBound: (tile: DMapTile, tileCode: number, tiles: Map<number, DMapTile>) => void;
    protected readonly _destroyTileBound: (tile: DMapTile) => void;
    protected _tileCount: number;
    protected _tileScale: number;
    protected _tileScaleRelative: number;
    protected _tileSize: number;
    protected _mapping: DMapTileMappingInternal;
    protected _coordinate: DMapCoordinate;
    protected _isLoaded: boolean;
    protected readonly _updateLoadingStateForEach: (tile: DMapTile) => void;
    protected readonly _onLoaded: () => void;
    protected readonly _onLoadedBound: () => void;
    protected _isOnLoadedCalled: boolean;
    protected _isOnLoadedAllowed: boolean;
    constructor(parent: DBase, builder: DMapTileUrlBuilder, tz: number, mapping: DMapTileMappingInternal, coordinate: DMapCoordinate, onLoaded: () => void);
    protected newTile(tx: number, ty: number, px: number, py: number, scale: number): DMapTile;
    protected renderTile(tile: DMapTile): void;
    get tz(): number;
    render(renderer: Renderer): void;
    move(lon0: number, lat0: number, lon1: number, lat1: number): void;
    protected loadTilesX(tz: number, ctx: number, ltx: number, txmin: number, txmax: number, ty: number, ox: number, oy: number, work: Point): void;
    protected loadTilesY(tz: number, tx: number, cty: number, lty: number, tymin: number, tymax: number, ox: number, oy: number, work: Point): void;
    protected loadTile(tz: number, tx: number, ty: number, ox: number, oy: number, work: Point): void;
    protected toTilePosition(tx: number, ty: number, ox: number, oy: number, result: Point): Point;
    protected toOffset(result: Point): Point;
    protected deleteTile(tile: DMapTile, tileCode: number, tiles: Map<number, DMapTile>): void;
    destroy(): void;
    protected destroyTile(tile: DMapTile): void;
    protected updateLoadingState(): void;
    protected onLoaded(): void;
    get loaded(): boolean;
    get mapping(): DMapTileMappingInternal;
    set mapping(mapping: DMapTileMappingInternal);
}
